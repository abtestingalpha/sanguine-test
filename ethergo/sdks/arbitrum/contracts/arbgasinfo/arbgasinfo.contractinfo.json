{"solidity/ArbGasInfo.sol:ArbGasInfo":{"code":"0x","runtime-code":"0x","info":{"source":"// Copyright 2021-2022, Offchain Labs, Inc.\n// For license information, see https://github.com/OffchainLabs/nitro-contracts/blob/main/LICENSE\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity \u003e=0.4.21 \u003c0.9.0;\n\n/// @title Provides insight into the cost of using the chain.\n/// @notice These methods have been adjusted to account for Nitro's heavy use of calldata compression.\n/// Of note to end-users, we no longer make a distinction between non-zero and zero-valued calldata bytes.\n/// Precompiled contract that exists in every Arbitrum chain at 0x000000000000000000000000000000000000006c.\ninterface ArbGasInfo {\n    /// @notice Get gas prices for a provided aggregator\n    /// @return return gas prices in wei\n    ///        (\n    ///            per L2 tx,\n    ///            per L1 calldata byte\n    ///            per storage allocation,\n    ///            per ArbGas base,\n    ///            per ArbGas congestion,\n    ///            per ArbGas total\n    ///        )\n    function getPricesInWeiWithAggregator(address aggregator)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\n    /// @return return gas prices in wei\n    ///        (\n    ///            per L2 tx,\n    ///            per L1 calldata byte\n    ///            per storage allocation,\n    ///            per ArbGas base,\n    ///            per ArbGas congestion,\n    ///            per ArbGas total\n    ///        )\n    function getPricesInWei()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /// @notice Get prices in ArbGas for the supplied aggregator\n    /// @return (per L2 tx, per L1 calldata byte, per storage allocation)\n    function getPricesInArbGasWithAggregator(address aggregator)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /// @notice Get prices in ArbGas. Assumes the callers preferred validator, or the default if caller doesn't have a preferred one.\n    /// @return (per L2 tx, per L1 calldata byte, per storage allocation)\n    function getPricesInArbGas()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /// @notice Get the gas accounting parameters. `gasPoolMax` is always zero, as the exponential pricing model has no such notion.\n    /// @return (speedLimitPerSecond, gasPoolMax, maxTxGasLimit)\n    function getGasAccountingParams()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /// @notice Get the minimum gas price needed for a tx to succeed\n    function getMinimumGasPrice() external view returns (uint256);\n\n    /// @notice Get ArbOS's estimate of the L1 basefee in wei\n    function getL1BaseFeeEstimate() external view returns (uint256);\n\n    /// @notice Get how slowly ArbOS updates its estimate of the L1 basefee\n    function getL1BaseFeeEstimateInertia() external view returns (uint64);\n\n    /// @notice Deprecated -- Same as getL1BaseFeeEstimate()\n    function getL1GasPriceEstimate() external view returns (uint256);\n\n    /// @notice Get L1 gas fees paid by the current transaction\n    function getCurrentTxL1GasFees() external view returns (uint256);\n\n    /// @notice Get the backlogged amount of gas burnt in excess of the speed limit\n    function getGasBacklog() external view returns (uint64);\n\n    /// @notice Get how slowly ArbOS updates the L2 basefee in response to backlogged gas\n    function getPricingInertia() external view returns (uint64);\n\n    /// @notice Get the forgivable amount of backlogged gas ArbOS will ignore when raising the basefee\n    function getGasBacklogTolerance() external view returns (uint64);\n\n    /// @notice Returns the surplus of funds for L1 batch posting payments (may be negative).\n    function getL1PricingSurplus() external view returns (int256);\n\n    /// @notice Returns the base charge (in L1 gas) attributed to each data batch in the calldata pricer\n    function getPerBatchGasCharge() external view returns (int64);\n\n    /// @notice Returns the cost amortization cap in basis points\n    function getAmortizedCostCapBips() external view returns (uint64);\n\n    /// @notice Returns the available funds from L1 fees\n    function getL1FeesAvailable() external view returns (uint256);\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"getAmortizedCostCapBips","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentTxL1GasFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGasAccountingParams","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGasBacklog","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGasBacklogTolerance","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1BaseFeeEstimate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1BaseFeeEstimateInertia","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1FeesAvailable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1GasPriceEstimate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1PricingSurplus","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumGasPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPerBatchGasCharge","outputs":[{"internalType":"int64","name":"","type":"int64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPricesInArbGas","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"aggregator","type":"address"}],"name":"getPricesInArbGasWithAggregator","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPricesInWei","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"aggregator","type":"address"}],"name":"getPricesInWeiWithAggregator","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPricingInertia","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"getAmortizedCostCapBips()":{"notice":"Returns the cost amortization cap in basis points"},"getCurrentTxL1GasFees()":{"notice":"Get L1 gas fees paid by the current transaction"},"getGasAccountingParams()":{"notice":"Get the gas accounting parameters. `gasPoolMax` is always zero, as the exponential pricing model has no such notion."},"getGasBacklog()":{"notice":"Get the backlogged amount of gas burnt in excess of the speed limit"},"getGasBacklogTolerance()":{"notice":"Get the forgivable amount of backlogged gas ArbOS will ignore when raising the basefee"},"getL1BaseFeeEstimate()":{"notice":"Get ArbOS's estimate of the L1 basefee in wei"},"getL1BaseFeeEstimateInertia()":{"notice":"Get how slowly ArbOS updates its estimate of the L1 basefee"},"getL1FeesAvailable()":{"notice":"Returns the available funds from L1 fees"},"getL1GasPriceEstimate()":{"notice":"Deprecated -- Same as getL1BaseFeeEstimate()"},"getL1PricingSurplus()":{"notice":"Returns the surplus of funds for L1 batch posting payments (may be negative)."},"getMinimumGasPrice()":{"notice":"Get the minimum gas price needed for a tx to succeed"},"getPerBatchGasCharge()":{"notice":"Returns the base charge (in L1 gas) attributed to each data batch in the calldata pricer"},"getPricesInArbGas()":{"notice":"Get prices in ArbGas. Assumes the callers preferred validator, or the default if caller doesn't have a preferred one."},"getPricesInArbGasWithAggregator(address)":{"notice":"Get prices in ArbGas for the supplied aggregator"},"getPricesInWei()":{"notice":"Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one."},"getPricesInWeiWithAggregator(address)":{"notice":"Get gas prices for a provided aggregator"},"getPricingInertia()":{"notice":"Get how slowly ArbOS updates the L2 basefee in response to backlogged gas"}},"notice":"These methods have been adjusted to account for Nitro's heavy use of calldata compression. Of note to end-users, we no longer make a distinction between non-zero and zero-valued calldata bytes. Precompiled contract that exists in every Arbitrum chain at 0x000000000000000000000000000000000000006c.","version":1},"developerDoc":{"kind":"dev","methods":{"getGasAccountingParams()":{"returns":{"_0":"(speedLimitPerSecond, gasPoolMax, maxTxGasLimit)"}},"getPricesInArbGas()":{"returns":{"_0":"(per L2 tx, per L1 calldata byte, per storage allocation)"}},"getPricesInArbGasWithAggregator(address)":{"returns":{"_0":"(per L2 tx, per L1 calldata byte, per storage allocation)"}},"getPricesInWei()":{"returns":{"_0":"return gas prices in wei        (            per L2 tx,            per L1 calldata byte            per storage allocation,            per ArbGas base,            per ArbGas congestion,            per ArbGas total        )"}},"getPricesInWeiWithAggregator(address)":{"returns":{"_0":"return gas prices in wei        (            per L2 tx,            per L1 calldata byte            per storage allocation,            per ArbGas base,            per ArbGas congestion,            per ArbGas total        )"}}},"title":"Provides insight into the cost of using the chain.","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getAmortizedCostCapBips\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTxL1GasFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasAccountingParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasBacklog\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasBacklogTolerance\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1BaseFeeEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1BaseFeeEstimateInertia\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1FeesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1GasPriceEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1PricingSurplus\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPerBatchGasCharge\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricesInArbGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getPricesInArbGasWithAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricesInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getPricesInWeiWithAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricingInertia\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getGasAccountingParams()\":{\"returns\":{\"_0\":\"(speedLimitPerSecond, gasPoolMax, maxTxGasLimit)\"}},\"getPricesInArbGas()\":{\"returns\":{\"_0\":\"(per L2 tx, per L1 calldata byte, per storage allocation)\"}},\"getPricesInArbGasWithAggregator(address)\":{\"returns\":{\"_0\":\"(per L2 tx, per L1 calldata byte, per storage allocation)\"}},\"getPricesInWei()\":{\"returns\":{\"_0\":\"return gas prices in wei        (            per L2 tx,            per L1 calldata byte            per storage allocation,            per ArbGas base,            per ArbGas congestion,            per ArbGas total        )\"}},\"getPricesInWeiWithAggregator(address)\":{\"returns\":{\"_0\":\"return gas prices in wei        (            per L2 tx,            per L1 calldata byte            per storage allocation,            per ArbGas base,            per ArbGas congestion,            per ArbGas total        )\"}}},\"title\":\"Provides insight into the cost of using the chain.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAmortizedCostCapBips()\":{\"notice\":\"Returns the cost amortization cap in basis points\"},\"getCurrentTxL1GasFees()\":{\"notice\":\"Get L1 gas fees paid by the current transaction\"},\"getGasAccountingParams()\":{\"notice\":\"Get the gas accounting parameters. `gasPoolMax` is always zero, as the exponential pricing model has no such notion.\"},\"getGasBacklog()\":{\"notice\":\"Get the backlogged amount of gas burnt in excess of the speed limit\"},\"getGasBacklogTolerance()\":{\"notice\":\"Get the forgivable amount of backlogged gas ArbOS will ignore when raising the basefee\"},\"getL1BaseFeeEstimate()\":{\"notice\":\"Get ArbOS's estimate of the L1 basefee in wei\"},\"getL1BaseFeeEstimateInertia()\":{\"notice\":\"Get how slowly ArbOS updates its estimate of the L1 basefee\"},\"getL1FeesAvailable()\":{\"notice\":\"Returns the available funds from L1 fees\"},\"getL1GasPriceEstimate()\":{\"notice\":\"Deprecated -- Same as getL1BaseFeeEstimate()\"},\"getL1PricingSurplus()\":{\"notice\":\"Returns the surplus of funds for L1 batch posting payments (may be negative).\"},\"getMinimumGasPrice()\":{\"notice\":\"Get the minimum gas price needed for a tx to succeed\"},\"getPerBatchGasCharge()\":{\"notice\":\"Returns the base charge (in L1 gas) attributed to each data batch in the calldata pricer\"},\"getPricesInArbGas()\":{\"notice\":\"Get prices in ArbGas. Assumes the callers preferred validator, or the default if caller doesn't have a preferred one.\"},\"getPricesInArbGasWithAggregator(address)\":{\"notice\":\"Get prices in ArbGas for the supplied aggregator\"},\"getPricesInWei()\":{\"notice\":\"Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\"},\"getPricesInWeiWithAggregator(address)\":{\"notice\":\"Get gas prices for a provided aggregator\"},\"getPricingInertia()\":{\"notice\":\"Get how slowly ArbOS updates the L2 basefee in response to backlogged gas\"}},\"notice\":\"These methods have been adjusted to account for Nitro's heavy use of calldata compression. Of note to end-users, we no longer make a distinction between non-zero and zero-valued calldata bytes. Precompiled contract that exists in every Arbitrum chain at 0x000000000000000000000000000000000000006c.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/ArbGasInfo.sol\":\"ArbGasInfo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/ArbGasInfo.sol\":{\"keccak256\":\"0x61c6b122a3ba71910eebe43b03923b9a863f7e2a6bfdaa0d733e3d2e14f1da5f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://3e5b88906b8a2aef1d179f23c84023d95e7a436a99f7eb1097a9f5095b5719b3\",\"dweb:/ipfs/QmQYfe3NFgnAuY4gQXKJBL2jqWh78e6Z7s665etSLDeVCm\"]}},\"version\":1}"},"hashes":{"getAmortizedCostCapBips()":"7a7d6beb","getCurrentTxL1GasFees()":"c6f7de0e","getGasAccountingParams()":"612af178","getGasBacklog()":"1d5b5c20","getGasBacklogTolerance()":"25754f91","getL1BaseFeeEstimate()":"f5d6ded7","getL1BaseFeeEstimateInertia()":"29eb31ee","getL1FeesAvailable()":"5b39d23c","getL1GasPriceEstimate()":"055f362f","getL1PricingSurplus()":"520acdd7","getMinimumGasPrice()":"f918379a","getPerBatchGasCharge()":"6ecca45a","getPricesInArbGas()":"02199f34","getPricesInArbGasWithAggregator(address)":"7a1ea732","getPricesInWei()":"41b247a8","getPricesInWeiWithAggregator(address)":"ba9c916e","getPricingInertia()":"3dfb45b9"}}}