// autogenerated file

package nodeinterface

import (
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
)

// INodeInterfaceCaller ...
type INodeInterfaceCaller interface {
	// ConstructOutboxProof is a free data retrieval call binding the contract method 0x42696350.
	//
	// Solidity: function constructOutboxProof(uint64 size, uint64 leaf) view returns(bytes32 send, bytes32 root, bytes32[] proof)
	ConstructOutboxProof(opts *bind.CallOpts, size uint64, leaf uint64) (struct {
		Send  [32]byte
		Root  [32]byte
		Proof [][32]byte
	}, error)
	// FindBatchContainingBlock is a free data retrieval call binding the contract method 0x81f1adaf.
	//
	// Solidity: function findBatchContainingBlock(uint64 blockNum) view returns(uint64 batch)
	FindBatchContainingBlock(opts *bind.CallOpts, blockNum uint64) (uint64, error)
	// GetL1Confirmations is a free data retrieval call binding the contract method 0xe5ca238c.
	//
	// Solidity: function getL1Confirmations(bytes32 blockHash) view returns(uint64 confirmations)
	GetL1Confirmations(opts *bind.CallOpts, blockHash [32]byte) (uint64, error)
	// LegacyLookupMessageBatchProof is a free data retrieval call binding the contract method 0x89496270.
	//
	// Solidity: function legacyLookupMessageBatchProof(uint256 batchNum, uint64 index) view returns(bytes32[] proof, uint256 path, address l2Sender, address l1Dest, uint256 l2Block, uint256 l1Block, uint256 timestamp, uint256 amount, bytes calldataForL1)
	LegacyLookupMessageBatchProof(opts *bind.CallOpts, batchNum *big.Int, index uint64) (struct {
		Proof         [][32]byte
		Path          *big.Int
		L2Sender      common.Address
		L1Dest        common.Address
		L2Block       *big.Int
		L1Block       *big.Int
		Timestamp     *big.Int
		Amount        *big.Int
		CalldataForL1 []byte
	}, error)
	// NitroGenesisBlock is a free data retrieval call binding the contract method 0x93a2fe21.
	//
	// Solidity: function nitroGenesisBlock() pure returns(uint256 number)
	NitroGenesisBlock(opts *bind.CallOpts) (*big.Int, error)
}
