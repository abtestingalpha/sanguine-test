// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// INodeInterface is an autogenerated mock type for the INodeInterface type
type INodeInterface struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *INodeInterface) Address() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// ConstructOutboxProof provides a mock function with given fields: opts, size, leaf
func (_m *INodeInterface) ConstructOutboxProof(opts *bind.CallOpts, size uint64, leaf uint64) (struct {
	Send  [32]byte
	Root  [32]byte
	Proof [][32]byte
}, error) {
	ret := _m.Called(opts, size, leaf)

	var r0 struct {
		Send  [32]byte
		Root  [32]byte
		Proof [][32]byte
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint64, uint64) struct {
		Send  [32]byte
		Root  [32]byte
		Proof [][32]byte
	}); ok {
		r0 = rf(opts, size, leaf)
	} else {
		r0 = ret.Get(0).(struct {
			Send  [32]byte
			Root  [32]byte
			Proof [][32]byte
		})
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, uint64, uint64) error); ok {
		r1 = rf(opts, size, leaf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateRetryableTicket provides a mock function with given fields: opts, sender, deposit, to, l2CallValue, excessFeeRefundAddress, callValueRefundAddress, data
func (_m *INodeInterface) EstimateRetryableTicket(opts *bind.TransactOpts, sender common.Address, deposit *big.Int, to common.Address, l2CallValue *big.Int, excessFeeRefundAddress common.Address, callValueRefundAddress common.Address, data []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, sender, deposit, to, l2CallValue, excessFeeRefundAddress, callValueRefundAddress, data)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int, common.Address, *big.Int, common.Address, common.Address, []byte) *types.Transaction); ok {
		r0 = rf(opts, sender, deposit, to, l2CallValue, excessFeeRefundAddress, callValueRefundAddress, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int, common.Address, *big.Int, common.Address, common.Address, []byte) error); ok {
		r1 = rf(opts, sender, deposit, to, l2CallValue, excessFeeRefundAddress, callValueRefundAddress, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBatchContainingBlock provides a mock function with given fields: opts, blockNum
func (_m *INodeInterface) FindBatchContainingBlock(opts *bind.CallOpts, blockNum uint64) (uint64, error) {
	ret := _m.Called(opts, blockNum)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint64) uint64); ok {
		r0 = rf(opts, blockNum)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, uint64) error); ok {
		r1 = rf(opts, blockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GasEstimateComponents provides a mock function with given fields: opts, to, contractCreation, data
func (_m *INodeInterface) GasEstimateComponents(opts *bind.TransactOpts, to common.Address, contractCreation bool, data []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, to, contractCreation, data)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, bool, []byte) *types.Transaction); ok {
		r0 = rf(opts, to, contractCreation, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, bool, []byte) error); ok {
		r1 = rf(opts, to, contractCreation, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GasEstimateL1Component provides a mock function with given fields: opts, to, contractCreation, data
func (_m *INodeInterface) GasEstimateL1Component(opts *bind.TransactOpts, to common.Address, contractCreation bool, data []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, to, contractCreation, data)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, bool, []byte) *types.Transaction); ok {
		r0 = rf(opts, to, contractCreation, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, bool, []byte) error); ok {
		r1 = rf(opts, to, contractCreation, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetL1Confirmations provides a mock function with given fields: opts, blockHash
func (_m *INodeInterface) GetL1Confirmations(opts *bind.CallOpts, blockHash [32]byte) (uint64, error) {
	ret := _m.Called(opts, blockHash)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, [32]byte) uint64); ok {
		r0 = rf(opts, blockHash)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, [32]byte) error); ok {
		r1 = rf(opts, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LegacyLookupMessageBatchProof provides a mock function with given fields: opts, batchNum, index
func (_m *INodeInterface) LegacyLookupMessageBatchProof(opts *bind.CallOpts, batchNum *big.Int, index uint64) (struct {
	Proof         [][32]byte
	Path          *big.Int
	L2Sender      common.Address
	L1Dest        common.Address
	L2Block       *big.Int
	L1Block       *big.Int
	Timestamp     *big.Int
	Amount        *big.Int
	CalldataForL1 []byte
}, error) {
	ret := _m.Called(opts, batchNum, index)

	var r0 struct {
		Proof         [][32]byte
		Path          *big.Int
		L2Sender      common.Address
		L1Dest        common.Address
		L2Block       *big.Int
		L1Block       *big.Int
		Timestamp     *big.Int
		Amount        *big.Int
		CalldataForL1 []byte
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int, uint64) struct {
		Proof         [][32]byte
		Path          *big.Int
		L2Sender      common.Address
		L1Dest        common.Address
		L2Block       *big.Int
		L1Block       *big.Int
		Timestamp     *big.Int
		Amount        *big.Int
		CalldataForL1 []byte
	}); ok {
		r0 = rf(opts, batchNum, index)
	} else {
		r0 = ret.Get(0).(struct {
			Proof         [][32]byte
			Path          *big.Int
			L2Sender      common.Address
			L1Dest        common.Address
			L2Block       *big.Int
			L1Block       *big.Int
			Timestamp     *big.Int
			Amount        *big.Int
			CalldataForL1 []byte
		})
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int, uint64) error); ok {
		r1 = rf(opts, batchNum, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NitroGenesisBlock provides a mock function with given fields: opts
func (_m *INodeInterface) NitroGenesisBlock(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewINodeInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewINodeInterface creates a new instance of INodeInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewINodeInterface(t mockConstructorTestingTNewINodeInterface) *INodeInterface {
	mock := &INodeInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
