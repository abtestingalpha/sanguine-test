{"solidity/InterchainClientV1.sol:Context":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.20;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingModules() external view returns (address[] memory);\n\n    function getRequiredResponses() external view returns (uint256);\n\n    function getOptimisticTimePeriod() external view returns (uint64);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive() external;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param message The message being sent.\n     * @param srcModules The source modules involved in the message sending.\n     */\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * @param transactionID The ID of the transaction being executed.\n     * @param transaction The transaction data.\n     */\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) external;\n\n    /**\n     * @notice Converts a bytes32 value to an address.\n     * @dev Useful for converting blockchain-specific identifiers to Ethereum addresses.\n     * @param _bytes32 The bytes32 value to convert.\n     * @return address The address obtained from the bytes32 value.\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) external pure returns (address);\n\n    /**\n     * @notice Converts an address to a bytes32 value.\n     * @dev Useful for converting Ethereum addresses to blockchain-specific identifiers.\n     * @param _address The address to convert.\n     * @return bytes32 The bytes32 representation of the address.\n     */\n    function convertAddressToBytes32(address _address) external pure returns (bytes32);\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase\n/// @param srcChainId   The chain id of the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param writerNonce  The nonce of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    bytes32 srcWriter;\n    uint256 writerNonce;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param srcWriter    The address of the writer on the local chain\n    /// @param writerNonce  The nonce of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        address srcWriter,\n        uint256 writerNonce,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            srcWriter: TypeCasts.addressToBytes32(srcWriter),\n            writerNonce: writerNonce,\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryId(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.srcWriter, entry.writerNonce));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param dataHash     The hash of the data written on the source chain\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 dataHash;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingDataHash, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(address writer, uint256 writerNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntry(bytes32 dataHash) external returns (uint256 writerNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param writer        The address of the writer on the source chain\n    /// @param writerNonce   The nonce of the writer on the source chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(\n        uint256 destChainId,\n        address writer,\n        uint256 writerNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 writerNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param writer       The address of the writer on this chain\n    /// @param writerNonce  The nonce of the writer's entry on this chain\n    function getEntry(address writer, uint256 writerNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the writer on this chain.\n    /// @param writer       The address of the writer on this chain\n    function getWriterNonce(address writer) external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, IInterchainClientV1 {\n    uint64 public clientNonce;\n    address public interchainDB;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) linkedClients;\n\n    // TODO: Add permissioning\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public {\n        linkedClients[chainId] = client;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    /**\n     * @notice Emitted when an interchain transaction is sent.\n     */\n    event InterchainTransactionSent(\n        bytes32 srcSender,\n        uint256 srcChainId,\n        bytes32 indexed dstReceiver,\n        uint256 indexed dstChainId,\n        bytes message,\n        uint64 nonce,\n        bytes32 indexed transactionId,\n        uint256 dbWriterNonce\n    );\n\n    /**\n     * @dev Represents an interchain transaction.\n     */\n    struct InterchainTransaction {\n        bytes32 srcSender;\n        uint256 srcChainId;\n        bytes32 dstReceiver;\n        uint256 dstChainId;\n        bytes message;\n        uint64 nonce;\n        bytes32 transactionId;\n        uint256 dbWriterNonce;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // TODO: Customizable Gas Limit for Execution\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        public\n        payable\n    {\n        uint256 totalModuleFees = msg.value;\n        bytes32 sender = convertAddressToBytes32(msg.sender);\n        bytes32 transactionID = keccak256(abi.encode(sender, block.chainid, receiver, dstChainId, message, clientNonce));\n\n        uint256 dbWriterNonce = IInterchainDB(interchainDB).writeEntryWithVerification{value: totalModuleFees}(\n            dstChainId, transactionID, srcModules\n        );\n\n        emit InterchainTransactionSent(\n            sender, block.chainid, receiver, dstChainId, message, clientNonce, transactionID, dbWriterNonce\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    function isExecutable(bytes calldata transaction) public view returns (bool) {\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        if (icTx.transactionId == keccak256(reconstructedID)) {\n            return false;\n        }\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n    uint256[] memory moduleResponseTimestamps = new uint256[](\n        approvedDstModules.length\n        );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        if (validResponses \u003e= appRequiredResponses) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // function _getValidResponses(address[] memory approvedModules, InterchainEntry memory icEntry) internal view returns (uint256) {\n    //     uint256 validResponses = 0;\n    //     for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n    //         uint256 moduleResponseTimestamp = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n    //         if (moduleResponseTimestamp + optimisticTimePeriod \u003e= block.timestamp) {\n    //             validResponses++;\n    //         }\n    //     }\n    //     return validResponses;\n    // }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) public {\n        // Steps to verify:\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        // 2. Verify the entry hash vs bytes calldata provided\n        // 3. Check receiver's app dstModule configuration\n        // 4. Check receiver app's optimistic time period\n        // 5. Read module entry's based on receiver app dstModule config\n        // 6. Confirm module threshold is met\n        // 7. Check optimistic threshold set on app config\n        // 8. Execute the transaction, is optimistic period is met.\n\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        // 2. Verify the provided TX ID == constructed TX data\n        require(icTx.transactionId == keccak256(reconstructedID), \"Invalid transaction ID\");\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n        // 3. Check receiver's app dstModule configuration\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        // 4. Check receiver app's optimistic time period\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n        // 5. Read module entry's based on receiver app dstModule config\n        uint256[] memory moduleResponseTimestamps = new uint256[](\n      approvedDstModules.length\n    );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        require(validResponses \u003e= appRequiredResponses, \"Not enough valid responses to meet the threshold\");\n\n        // 8. Execute the transaction, is optimistic period \u0026 valid responses is met.\n        IInterchainApp(receivingApp).appReceive();\n    }\n\n    // TODO: Seperate out into utils\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) public pure returns (address) {\n        return address(uint160(uint256(_bytes32)));\n    }\n\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertAddressToBytes32(address _address) public pure returns (bytes32) {\n        return bytes32(uint256(uint160(_address)));\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xde9ba9a1fab8f472722d15529c3c367c908a754e2b8b16cf129a40c68f711488\",\"urls\":[\"bzz-raw://8d38a483dab4e49fcdc833f8d775ab9d496da5efb1a8f391507e73aef22f7aae\",\"dweb:/ipfs/QmRUWXQQ7NNGgBcpWnztcKmege2sJegg6upR8tKUzHrKCd\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:IInterchainApp":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.20;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingModules() external view returns (address[] memory);\n\n    function getRequiredResponses() external view returns (uint256);\n\n    function getOptimisticTimePeriod() external view returns (uint64);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive() external;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param message The message being sent.\n     * @param srcModules The source modules involved in the message sending.\n     */\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * @param transactionID The ID of the transaction being executed.\n     * @param transaction The transaction data.\n     */\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) external;\n\n    /**\n     * @notice Converts a bytes32 value to an address.\n     * @dev Useful for converting blockchain-specific identifiers to Ethereum addresses.\n     * @param _bytes32 The bytes32 value to convert.\n     * @return address The address obtained from the bytes32 value.\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) external pure returns (address);\n\n    /**\n     * @notice Converts an address to a bytes32 value.\n     * @dev Useful for converting Ethereum addresses to blockchain-specific identifiers.\n     * @param _address The address to convert.\n     * @return bytes32 The bytes32 representation of the address.\n     */\n    function convertAddressToBytes32(address _address) external pure returns (bytes32);\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase\n/// @param srcChainId   The chain id of the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param writerNonce  The nonce of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    bytes32 srcWriter;\n    uint256 writerNonce;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param srcWriter    The address of the writer on the local chain\n    /// @param writerNonce  The nonce of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        address srcWriter,\n        uint256 writerNonce,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            srcWriter: TypeCasts.addressToBytes32(srcWriter),\n            writerNonce: writerNonce,\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryId(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.srcWriter, entry.writerNonce));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param dataHash     The hash of the data written on the source chain\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 dataHash;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingDataHash, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(address writer, uint256 writerNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntry(bytes32 dataHash) external returns (uint256 writerNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param writer        The address of the writer on the source chain\n    /// @param writerNonce   The nonce of the writer on the source chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(\n        uint256 destChainId,\n        address writer,\n        uint256 writerNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 writerNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param writer       The address of the writer on this chain\n    /// @param writerNonce  The nonce of the writer's entry on this chain\n    function getEntry(address writer, uint256 writerNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the writer on this chain.\n    /// @param writer       The address of the writer on this chain\n    function getWriterNonce(address writer) external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, IInterchainClientV1 {\n    uint64 public clientNonce;\n    address public interchainDB;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) linkedClients;\n\n    // TODO: Add permissioning\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public {\n        linkedClients[chainId] = client;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    /**\n     * @notice Emitted when an interchain transaction is sent.\n     */\n    event InterchainTransactionSent(\n        bytes32 srcSender,\n        uint256 srcChainId,\n        bytes32 indexed dstReceiver,\n        uint256 indexed dstChainId,\n        bytes message,\n        uint64 nonce,\n        bytes32 indexed transactionId,\n        uint256 dbWriterNonce\n    );\n\n    /**\n     * @dev Represents an interchain transaction.\n     */\n    struct InterchainTransaction {\n        bytes32 srcSender;\n        uint256 srcChainId;\n        bytes32 dstReceiver;\n        uint256 dstChainId;\n        bytes message;\n        uint64 nonce;\n        bytes32 transactionId;\n        uint256 dbWriterNonce;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // TODO: Customizable Gas Limit for Execution\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        public\n        payable\n    {\n        uint256 totalModuleFees = msg.value;\n        bytes32 sender = convertAddressToBytes32(msg.sender);\n        bytes32 transactionID = keccak256(abi.encode(sender, block.chainid, receiver, dstChainId, message, clientNonce));\n\n        uint256 dbWriterNonce = IInterchainDB(interchainDB).writeEntryWithVerification{value: totalModuleFees}(\n            dstChainId, transactionID, srcModules\n        );\n\n        emit InterchainTransactionSent(\n            sender, block.chainid, receiver, dstChainId, message, clientNonce, transactionID, dbWriterNonce\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    function isExecutable(bytes calldata transaction) public view returns (bool) {\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        if (icTx.transactionId == keccak256(reconstructedID)) {\n            return false;\n        }\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n    uint256[] memory moduleResponseTimestamps = new uint256[](\n        approvedDstModules.length\n        );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        if (validResponses \u003e= appRequiredResponses) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // function _getValidResponses(address[] memory approvedModules, InterchainEntry memory icEntry) internal view returns (uint256) {\n    //     uint256 validResponses = 0;\n    //     for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n    //         uint256 moduleResponseTimestamp = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n    //         if (moduleResponseTimestamp + optimisticTimePeriod \u003e= block.timestamp) {\n    //             validResponses++;\n    //         }\n    //     }\n    //     return validResponses;\n    // }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) public {\n        // Steps to verify:\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        // 2. Verify the entry hash vs bytes calldata provided\n        // 3. Check receiver's app dstModule configuration\n        // 4. Check receiver app's optimistic time period\n        // 5. Read module entry's based on receiver app dstModule config\n        // 6. Confirm module threshold is met\n        // 7. Check optimistic threshold set on app config\n        // 8. Execute the transaction, is optimistic period is met.\n\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        // 2. Verify the provided TX ID == constructed TX data\n        require(icTx.transactionId == keccak256(reconstructedID), \"Invalid transaction ID\");\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n        // 3. Check receiver's app dstModule configuration\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        // 4. Check receiver app's optimistic time period\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n        // 5. Read module entry's based on receiver app dstModule config\n        uint256[] memory moduleResponseTimestamps = new uint256[](\n      approvedDstModules.length\n    );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        require(validResponses \u003e= appRequiredResponses, \"Not enough valid responses to meet the threshold\");\n\n        // 8. Execute the transaction, is optimistic period \u0026 valid responses is met.\n        IInterchainApp(receivingApp).appReceive();\n    }\n\n    // TODO: Seperate out into utils\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) public pure returns (address) {\n        return address(uint160(uint256(_bytes32)));\n    }\n\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertAddressToBytes32(address _address) public pure returns (bytes32) {\n        return bytes32(uint256(uint160(_address)));\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"appReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainID","type":"uint64"}],"name":"getLinkedIApp","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOptimisticTimePeriod","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReceivingModules","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRequiredResponses","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSendingModules","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"send","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"chainIDs","type":"uint64[]"},{"internalType":"address[]","name":"linkedIApps","type":"address[]"},{"internalType":"address[]","name":"sendingModules","type":"address[]"},{"internalType":"address[]","name":"receivingModules","type":"address[]"},{"internalType":"uint256","name":"requiredResponses","type":"uint256"},{"internalType":"uint64","name":"optimisticTimePeriod","type":"uint64"}],"name":"setAppConfig","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"appReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainID\",\"type\":\"uint64\"}],\"name\":\"getLinkedIApp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptimisticTimePeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceivingModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredResponses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSendingModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"chainIDs\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"linkedIApps\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sendingModules\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivingModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"requiredResponses\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"optimisticTimePeriod\",\"type\":\"uint64\"}],\"name\":\"setAppConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainApp\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xde9ba9a1fab8f472722d15529c3c367c908a754e2b8b16cf129a40c68f711488\",\"urls\":[\"bzz-raw://8d38a483dab4e49fcdc833f8d775ab9d496da5efb1a8f391507e73aef22f7aae\",\"dweb:/ipfs/QmRUWXQQ7NNGgBcpWnztcKmege2sJegg6upR8tKUzHrKCd\"]}},\"version\":1}"},"hashes":{"appReceive()":"7bcad630","getLinkedIApp(uint64)":"bfc849ee","getOptimisticTimePeriod()":"7c9abd3e","getReceivingModules()":"a45e107a","getRequiredResponses()":"f31b19a9","getSendingModules()":"ea13398f","send(bytes32,uint256,bytes)":"e1ef3b3f","setAppConfig(uint64[],address[],address[],address[],uint256,uint64)":"dd34f56a"}},"solidity/InterchainClientV1.sol:IInterchainClientV1":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.20;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingModules() external view returns (address[] memory);\n\n    function getRequiredResponses() external view returns (uint256);\n\n    function getOptimisticTimePeriod() external view returns (uint64);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive() external;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param message The message being sent.\n     * @param srcModules The source modules involved in the message sending.\n     */\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * @param transactionID The ID of the transaction being executed.\n     * @param transaction The transaction data.\n     */\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) external;\n\n    /**\n     * @notice Converts a bytes32 value to an address.\n     * @dev Useful for converting blockchain-specific identifiers to Ethereum addresses.\n     * @param _bytes32 The bytes32 value to convert.\n     * @return address The address obtained from the bytes32 value.\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) external pure returns (address);\n\n    /**\n     * @notice Converts an address to a bytes32 value.\n     * @dev Useful for converting Ethereum addresses to blockchain-specific identifiers.\n     * @param _address The address to convert.\n     * @return bytes32 The bytes32 representation of the address.\n     */\n    function convertAddressToBytes32(address _address) external pure returns (bytes32);\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase\n/// @param srcChainId   The chain id of the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param writerNonce  The nonce of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    bytes32 srcWriter;\n    uint256 writerNonce;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param srcWriter    The address of the writer on the local chain\n    /// @param writerNonce  The nonce of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        address srcWriter,\n        uint256 writerNonce,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            srcWriter: TypeCasts.addressToBytes32(srcWriter),\n            writerNonce: writerNonce,\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryId(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.srcWriter, entry.writerNonce));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param dataHash     The hash of the data written on the source chain\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 dataHash;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingDataHash, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(address writer, uint256 writerNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntry(bytes32 dataHash) external returns (uint256 writerNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param writer        The address of the writer on the source chain\n    /// @param writerNonce   The nonce of the writer on the source chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(\n        uint256 destChainId,\n        address writer,\n        uint256 writerNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 writerNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param writer       The address of the writer on this chain\n    /// @param writerNonce  The nonce of the writer's entry on this chain\n    function getEntry(address writer, uint256 writerNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the writer on this chain.\n    /// @param writer       The address of the writer on this chain\n    function getWriterNonce(address writer) external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, IInterchainClientV1 {\n    uint64 public clientNonce;\n    address public interchainDB;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) linkedClients;\n\n    // TODO: Add permissioning\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public {\n        linkedClients[chainId] = client;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    /**\n     * @notice Emitted when an interchain transaction is sent.\n     */\n    event InterchainTransactionSent(\n        bytes32 srcSender,\n        uint256 srcChainId,\n        bytes32 indexed dstReceiver,\n        uint256 indexed dstChainId,\n        bytes message,\n        uint64 nonce,\n        bytes32 indexed transactionId,\n        uint256 dbWriterNonce\n    );\n\n    /**\n     * @dev Represents an interchain transaction.\n     */\n    struct InterchainTransaction {\n        bytes32 srcSender;\n        uint256 srcChainId;\n        bytes32 dstReceiver;\n        uint256 dstChainId;\n        bytes message;\n        uint64 nonce;\n        bytes32 transactionId;\n        uint256 dbWriterNonce;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // TODO: Customizable Gas Limit for Execution\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        public\n        payable\n    {\n        uint256 totalModuleFees = msg.value;\n        bytes32 sender = convertAddressToBytes32(msg.sender);\n        bytes32 transactionID = keccak256(abi.encode(sender, block.chainid, receiver, dstChainId, message, clientNonce));\n\n        uint256 dbWriterNonce = IInterchainDB(interchainDB).writeEntryWithVerification{value: totalModuleFees}(\n            dstChainId, transactionID, srcModules\n        );\n\n        emit InterchainTransactionSent(\n            sender, block.chainid, receiver, dstChainId, message, clientNonce, transactionID, dbWriterNonce\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    function isExecutable(bytes calldata transaction) public view returns (bool) {\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        if (icTx.transactionId == keccak256(reconstructedID)) {\n            return false;\n        }\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n    uint256[] memory moduleResponseTimestamps = new uint256[](\n        approvedDstModules.length\n        );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        if (validResponses \u003e= appRequiredResponses) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // function _getValidResponses(address[] memory approvedModules, InterchainEntry memory icEntry) internal view returns (uint256) {\n    //     uint256 validResponses = 0;\n    //     for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n    //         uint256 moduleResponseTimestamp = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n    //         if (moduleResponseTimestamp + optimisticTimePeriod \u003e= block.timestamp) {\n    //             validResponses++;\n    //         }\n    //     }\n    //     return validResponses;\n    // }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) public {\n        // Steps to verify:\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        // 2. Verify the entry hash vs bytes calldata provided\n        // 3. Check receiver's app dstModule configuration\n        // 4. Check receiver app's optimistic time period\n        // 5. Read module entry's based on receiver app dstModule config\n        // 6. Confirm module threshold is met\n        // 7. Check optimistic threshold set on app config\n        // 8. Execute the transaction, is optimistic period is met.\n\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        // 2. Verify the provided TX ID == constructed TX data\n        require(icTx.transactionId == keccak256(reconstructedID), \"Invalid transaction ID\");\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n        // 3. Check receiver's app dstModule configuration\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        // 4. Check receiver app's optimistic time period\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n        // 5. Read module entry's based on receiver app dstModule config\n        uint256[] memory moduleResponseTimestamps = new uint256[](\n      approvedDstModules.length\n    );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        require(validResponses \u003e= appRequiredResponses, \"Not enough valid responses to meet the threshold\");\n\n        // 8. Execute the transaction, is optimistic period \u0026 valid responses is met.\n        IInterchainApp(receivingApp).appReceive();\n    }\n\n    // TODO: Seperate out into utils\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) public pure returns (address) {\n        return address(uint160(uint256(_bytes32)));\n    }\n\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertAddressToBytes32(address _address) public pure returns (bytes32) {\n        return bytes32(uint256(uint160(_address)));\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"convertAddressToBytes32","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_bytes32","type":"bytes32"}],"name":"convertBytes32ToAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionID","type":"bytes32"},{"internalType":"bytes","name":"transaction","type":"bytes"}],"name":"interchainExecute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"interchainSend","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_interchainDB","type":"address"}],"name":"setInterchainDB","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"setLinkedClient","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"convertAddressToBytes32(address)":{"notice":"Converts an address to a bytes32 value."},"convertBytes32ToAddress(bytes32)":{"notice":"Converts a bytes32 value to an address."},"interchainExecute(bytes32,bytes)":{"notice":"Executes a transaction that has been sent via the Interchain."},"interchainSend(bytes32,uint256,bytes,address[])":{"notice":"Sends a message to another chain via the Interchain Communication Protocol."},"setInterchainDB(address)":{"notice":"Sets the address of the InterchainDB contract."},"setLinkedClient(uint256,bytes32)":{"notice":"Sets the linked client for a specific chain ID."}},"version":1},"developerDoc":{"kind":"dev","methods":{"convertAddressToBytes32(address)":{"details":"Useful for converting Ethereum addresses to blockchain-specific identifiers.","params":{"_address":"The address to convert."},"returns":{"_0":"bytes32 The bytes32 representation of the address."}},"convertBytes32ToAddress(bytes32)":{"details":"Useful for converting blockchain-specific identifiers to Ethereum addresses.","params":{"_bytes32":"The bytes32 value to convert."},"returns":{"_0":"address The address obtained from the bytes32 value."}},"interchainExecute(bytes32,bytes)":{"details":"The transaction must have been previously sent and recorded.","params":{"transaction":"The transaction data.","transactionID":"The ID of the transaction being executed."}},"interchainSend(bytes32,uint256,bytes,address[])":{"details":"Charges a fee for the message, which is payable upon calling this function.","params":{"dstChainId":"The chain ID of the destination chain.","message":"The message being sent.","receiver":"The address of the receiver on the destination chain.","srcModules":"The source modules involved in the message sending."}},"setInterchainDB(address)":{"details":"Only callable by the contract owner or an authorized account.","params":{"_interchainDB":"The address of the InterchainDB contract."}},"setLinkedClient(uint256,bytes32)":{"details":"Stores the address of the linked client in a mapping with the chain ID as the key.","params":{"chainId":"The chain ID for which the client is being set.","client":"The address of the client being linked."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"convertAddressToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"convertBytes32ToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"}],\"name\":\"interchainExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"interchainSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interchainDB\",\"type\":\"address\"}],\"name\":\"setInterchainDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"setLinkedClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convertAddressToBytes32(address)\":{\"details\":\"Useful for converting Ethereum addresses to blockchain-specific identifiers.\",\"params\":{\"_address\":\"The address to convert.\"},\"returns\":{\"_0\":\"bytes32 The bytes32 representation of the address.\"}},\"convertBytes32ToAddress(bytes32)\":{\"details\":\"Useful for converting blockchain-specific identifiers to Ethereum addresses.\",\"params\":{\"_bytes32\":\"The bytes32 value to convert.\"},\"returns\":{\"_0\":\"address The address obtained from the bytes32 value.\"}},\"interchainExecute(bytes32,bytes)\":{\"details\":\"The transaction must have been previously sent and recorded.\",\"params\":{\"transaction\":\"The transaction data.\",\"transactionID\":\"The ID of the transaction being executed.\"}},\"interchainSend(bytes32,uint256,bytes,address[])\":{\"details\":\"Charges a fee for the message, which is payable upon calling this function.\",\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"message\":\"The message being sent.\",\"receiver\":\"The address of the receiver on the destination chain.\",\"srcModules\":\"The source modules involved in the message sending.\"}},\"setInterchainDB(address)\":{\"details\":\"Only callable by the contract owner or an authorized account.\",\"params\":{\"_interchainDB\":\"The address of the InterchainDB contract.\"}},\"setLinkedClient(uint256,bytes32)\":{\"details\":\"Stores the address of the linked client in a mapping with the chain ID as the key.\",\"params\":{\"chainId\":\"The chain ID for which the client is being set.\",\"client\":\"The address of the client being linked.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"convertAddressToBytes32(address)\":{\"notice\":\"Converts an address to a bytes32 value.\"},\"convertBytes32ToAddress(bytes32)\":{\"notice\":\"Converts a bytes32 value to an address.\"},\"interchainExecute(bytes32,bytes)\":{\"notice\":\"Executes a transaction that has been sent via the Interchain.\"},\"interchainSend(bytes32,uint256,bytes,address[])\":{\"notice\":\"Sends a message to another chain via the Interchain Communication Protocol.\"},\"setInterchainDB(address)\":{\"notice\":\"Sets the address of the InterchainDB contract.\"},\"setLinkedClient(uint256,bytes32)\":{\"notice\":\"Sets the linked client for a specific chain ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainClientV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xde9ba9a1fab8f472722d15529c3c367c908a754e2b8b16cf129a40c68f711488\",\"urls\":[\"bzz-raw://8d38a483dab4e49fcdc833f8d775ab9d496da5efb1a8f391507e73aef22f7aae\",\"dweb:/ipfs/QmRUWXQQ7NNGgBcpWnztcKmege2sJegg6upR8tKUzHrKCd\"]}},\"version\":1}"},"hashes":{"convertAddressToBytes32(address)":"5893740e","convertBytes32ToAddress(bytes32)":"1efa2220","interchainExecute(bytes32,bytes)":"d3388b80","interchainSend(bytes32,uint256,bytes,address[])":"8366a109","setInterchainDB(address)":"b7ce2078","setLinkedClient(uint256,bytes32)":"f34234c8"}},"solidity/InterchainClientV1.sol:IInterchainDB":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.20;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingModules() external view returns (address[] memory);\n\n    function getRequiredResponses() external view returns (uint256);\n\n    function getOptimisticTimePeriod() external view returns (uint64);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive() external;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param message The message being sent.\n     * @param srcModules The source modules involved in the message sending.\n     */\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * @param transactionID The ID of the transaction being executed.\n     * @param transaction The transaction data.\n     */\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) external;\n\n    /**\n     * @notice Converts a bytes32 value to an address.\n     * @dev Useful for converting blockchain-specific identifiers to Ethereum addresses.\n     * @param _bytes32 The bytes32 value to convert.\n     * @return address The address obtained from the bytes32 value.\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) external pure returns (address);\n\n    /**\n     * @notice Converts an address to a bytes32 value.\n     * @dev Useful for converting Ethereum addresses to blockchain-specific identifiers.\n     * @param _address The address to convert.\n     * @return bytes32 The bytes32 representation of the address.\n     */\n    function convertAddressToBytes32(address _address) external pure returns (bytes32);\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase\n/// @param srcChainId   The chain id of the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param writerNonce  The nonce of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    bytes32 srcWriter;\n    uint256 writerNonce;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param srcWriter    The address of the writer on the local chain\n    /// @param writerNonce  The nonce of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        address srcWriter,\n        uint256 writerNonce,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            srcWriter: TypeCasts.addressToBytes32(srcWriter),\n            writerNonce: writerNonce,\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryId(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.srcWriter, entry.writerNonce));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param dataHash     The hash of the data written on the source chain\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 dataHash;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingDataHash, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(address writer, uint256 writerNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntry(bytes32 dataHash) external returns (uint256 writerNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param writer        The address of the writer on the source chain\n    /// @param writerNonce   The nonce of the writer on the source chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(\n        uint256 destChainId,\n        address writer,\n        uint256 writerNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 writerNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param writer       The address of the writer on this chain\n    /// @param writerNonce  The nonce of the writer's entry on this chain\n    function getEntry(address writer, uint256 writerNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the writer on this chain.\n    /// @param writer       The address of the writer on this chain\n    function getWriterNonce(address writer) external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, IInterchainClientV1 {\n    uint64 public clientNonce;\n    address public interchainDB;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) linkedClients;\n\n    // TODO: Add permissioning\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public {\n        linkedClients[chainId] = client;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    /**\n     * @notice Emitted when an interchain transaction is sent.\n     */\n    event InterchainTransactionSent(\n        bytes32 srcSender,\n        uint256 srcChainId,\n        bytes32 indexed dstReceiver,\n        uint256 indexed dstChainId,\n        bytes message,\n        uint64 nonce,\n        bytes32 indexed transactionId,\n        uint256 dbWriterNonce\n    );\n\n    /**\n     * @dev Represents an interchain transaction.\n     */\n    struct InterchainTransaction {\n        bytes32 srcSender;\n        uint256 srcChainId;\n        bytes32 dstReceiver;\n        uint256 dstChainId;\n        bytes message;\n        uint64 nonce;\n        bytes32 transactionId;\n        uint256 dbWriterNonce;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // TODO: Customizable Gas Limit for Execution\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        public\n        payable\n    {\n        uint256 totalModuleFees = msg.value;\n        bytes32 sender = convertAddressToBytes32(msg.sender);\n        bytes32 transactionID = keccak256(abi.encode(sender, block.chainid, receiver, dstChainId, message, clientNonce));\n\n        uint256 dbWriterNonce = IInterchainDB(interchainDB).writeEntryWithVerification{value: totalModuleFees}(\n            dstChainId, transactionID, srcModules\n        );\n\n        emit InterchainTransactionSent(\n            sender, block.chainid, receiver, dstChainId, message, clientNonce, transactionID, dbWriterNonce\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    function isExecutable(bytes calldata transaction) public view returns (bool) {\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        if (icTx.transactionId == keccak256(reconstructedID)) {\n            return false;\n        }\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n    uint256[] memory moduleResponseTimestamps = new uint256[](\n        approvedDstModules.length\n        );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        if (validResponses \u003e= appRequiredResponses) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // function _getValidResponses(address[] memory approvedModules, InterchainEntry memory icEntry) internal view returns (uint256) {\n    //     uint256 validResponses = 0;\n    //     for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n    //         uint256 moduleResponseTimestamp = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n    //         if (moduleResponseTimestamp + optimisticTimePeriod \u003e= block.timestamp) {\n    //             validResponses++;\n    //         }\n    //     }\n    //     return validResponses;\n    // }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) public {\n        // Steps to verify:\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        // 2. Verify the entry hash vs bytes calldata provided\n        // 3. Check receiver's app dstModule configuration\n        // 4. Check receiver app's optimistic time period\n        // 5. Read module entry's based on receiver app dstModule config\n        // 6. Confirm module threshold is met\n        // 7. Check optimistic threshold set on app config\n        // 8. Execute the transaction, is optimistic period is met.\n\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        // 2. Verify the provided TX ID == constructed TX data\n        require(icTx.transactionId == keccak256(reconstructedID), \"Invalid transaction ID\");\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n        // 3. Check receiver's app dstModule configuration\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        // 4. Check receiver app's optimistic time period\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n        // 5. Read module entry's based on receiver app dstModule config\n        uint256[] memory moduleResponseTimestamps = new uint256[](\n      approvedDstModules.length\n    );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        require(validResponses \u003e= appRequiredResponses, \"Not enough valid responses to meet the threshold\");\n\n        // 8. Execute the transaction, is optimistic period \u0026 valid responses is met.\n        IInterchainApp(receivingApp).appReceive();\n    }\n\n    // TODO: Seperate out into utils\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) public pure returns (address) {\n        return address(uint160(uint256(_bytes32)));\n    }\n\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertAddressToBytes32(address _address) public pure returns (bytes32) {\n        return bytes32(uint256(uint160(_address)));\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"bytes32","name":"existingDataHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"uint256","name":"writerNonce","type":"uint256"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"newEntry","type":"tuple"}],"name":"InterchainDB__ConflictingEntries","type":"error"},{"inputs":[{"internalType":"address","name":"writer","type":"address"},{"internalType":"uint256","name":"writerNonce","type":"uint256"}],"name":"InterchainDB__EntryDoesNotExist","type":"error"},{"inputs":[{"internalType":"uint256","name":"actualFee","type":"uint256"},{"internalType":"uint256","name":"expectedFee","type":"uint256"}],"name":"InterchainDB__IncorrectFeeAmount","type":"error"},{"inputs":[],"name":"InterchainDB__NoModulesSpecified","type":"error"},{"inputs":[],"name":"InterchainDB__SameChainId","type":"error"},{"inputs":[{"internalType":"address","name":"writer","type":"address"},{"internalType":"uint256","name":"writerNonce","type":"uint256"}],"name":"getEntry","outputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"uint256","name":"writerNonce","type":"uint256"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"destChainId","type":"uint256"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"getInterchainFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"writer","type":"address"}],"name":"getWriterNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dstModule","type":"address"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"uint256","name":"writerNonce","type":"uint256"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"entry","type":"tuple"}],"name":"readEntry","outputs":[{"internalType":"uint256","name":"moduleVerifiedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"destChainId","type":"uint256"},{"internalType":"address","name":"writer","type":"address"},{"internalType":"uint256","name":"writerNonce","type":"uint256"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"requestVerification","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"uint256","name":"writerNonce","type":"uint256"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"entry","type":"tuple"}],"name":"verifyEntry","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"writeEntry","outputs":[{"internalType":"uint256","name":"writerNonce","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"destChainId","type":"uint256"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"writeEntryWithVerification","outputs":[{"internalType":"uint256","name":"writerNonce","type":"uint256"}],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{"getEntry(address,uint256)":{"notice":"Get the Interchain Entry by the writer and the writer nonce."},"getInterchainFee(uint256,address[])":{"notice":"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules."},"getWriterNonce(address)":{"notice":"Get the nonce of the writer on this chain."},"readEntry(address,(uint256,bytes32,uint256,bytes32))":{"notice":"Read the data written on specific source chain by a specific writer, and verify it on the destination chain using the provided Interchain Module. Note: returned zero value indicates that the module has not verified the entry."},"requestVerification(uint256,address,uint256,address[])":{"notice":"Request the given Interchain Modules to verify the already written entry on the destination chain. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any entry."},"verifyEntry((uint256,bytes32,uint256,bytes32))":{"notice":"Allows the Interchain Module to verify the entry coming from a remote source chain."},"writeEntry(bytes32)":{"notice":"Write data to the Interchain DataBase as a new entry. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `verifyEntry` to ensure that the entry is available for reading on the destination chain."},"writeEntryWithVerification(uint256,bytes32,address[])":{"notice":"Write data to the Interchain DataBase, and request the given Interchain Modules to verify it on the destination chain. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: additional verification for the same entry could be later done using `requestVerification`."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getEntry(address,uint256)":{"details":"Will revert if the entry with the given nonce does not exist.","params":{"writer":"The address of the writer on this chain","writerNonce":"The nonce of the writer's entry on this chain"}},"getInterchainFee(uint256,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"destChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"getWriterNonce(address)":{"params":{"writer":"The address of the writer on this chain"}},"readEntry(address,(uint256,bytes32,uint256,bytes32))":{"params":{"dstModule":"The destination chain addresses of the Interchain Modules to use for verification","entry":"The Interchain Entry to read"},"returns":{"moduleVerifiedAt":"  The block timestamp at which the entry was verified by the module,                             or zero if the module has not verified the entry."}},"requestVerification(uint256,address,uint256,address[])":{"details":"Will revert if the entry with the given nonce does not exist.","params":{"destChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification","writer":"The address of the writer on the source chain","writerNonce":"The nonce of the writer on the source chain"}},"verifyEntry((uint256,bytes32,uint256,bytes32))":{"params":{"entry":"The Interchain Entry to confirm"}},"writeEntry(bytes32)":{"params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry"},"returns":{"writerNonce":"The writer-specific nonce of the written entry"}},"writeEntryWithVerification(uint256,bytes32,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry","destChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"},"returns":{"writerNonce":"The writer-specific nonce of the written entry"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"existingDataHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"writerNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"newEntry\",\"type\":\"tuple\"}],\"name\":\"InterchainDB__ConflictingEntries\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"writerNonce\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__EntryDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedFee\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__IncorrectFeeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainDB__NoModulesSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainDB__SameChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"writerNonce\",\"type\":\"uint256\"}],\"name\":\"getEntry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"writerNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"getInterchainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"}],\"name\":\"getWriterNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dstModule\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"writerNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"entry\",\"type\":\"tuple\"}],\"name\":\"readEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleVerifiedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"writerNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"requestVerification\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"writerNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"entry\",\"type\":\"tuple\"}],\"name\":\"verifyEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"writeEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"writerNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"writeEntryWithVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"writerNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getEntry(address,uint256)\":{\"details\":\"Will revert if the entry with the given nonce does not exist.\",\"params\":{\"writer\":\"The address of the writer on this chain\",\"writerNonce\":\"The nonce of the writer's entry on this chain\"}},\"getInterchainFee(uint256,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"destChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"getWriterNonce(address)\":{\"params\":{\"writer\":\"The address of the writer on this chain\"}},\"readEntry(address,(uint256,bytes32,uint256,bytes32))\":{\"params\":{\"dstModule\":\"The destination chain addresses of the Interchain Modules to use for verification\",\"entry\":\"The Interchain Entry to read\"},\"returns\":{\"moduleVerifiedAt\":\"  The block timestamp at which the entry was verified by the module,                             or zero if the module has not verified the entry.\"}},\"requestVerification(uint256,address,uint256,address[])\":{\"details\":\"Will revert if the entry with the given nonce does not exist.\",\"params\":{\"destChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\",\"writer\":\"The address of the writer on the source chain\",\"writerNonce\":\"The nonce of the writer on the source chain\"}},\"verifyEntry((uint256,bytes32,uint256,bytes32))\":{\"params\":{\"entry\":\"The Interchain Entry to confirm\"}},\"writeEntry(bytes32)\":{\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\"},\"returns\":{\"writerNonce\":\"The writer-specific nonce of the written entry\"}},\"writeEntryWithVerification(uint256,bytes32,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\",\"destChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"},\"returns\":{\"writerNonce\":\"The writer-specific nonce of the written entry\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEntry(address,uint256)\":{\"notice\":\"Get the Interchain Entry by the writer and the writer nonce.\"},\"getInterchainFee(uint256,address[])\":{\"notice\":\"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules.\"},\"getWriterNonce(address)\":{\"notice\":\"Get the nonce of the writer on this chain.\"},\"readEntry(address,(uint256,bytes32,uint256,bytes32))\":{\"notice\":\"Read the data written on specific source chain by a specific writer, and verify it on the destination chain using the provided Interchain Module. Note: returned zero value indicates that the module has not verified the entry.\"},\"requestVerification(uint256,address,uint256,address[])\":{\"notice\":\"Request the given Interchain Modules to verify the already written entry on the destination chain. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any entry.\"},\"verifyEntry((uint256,bytes32,uint256,bytes32))\":{\"notice\":\"Allows the Interchain Module to verify the entry coming from a remote source chain.\"},\"writeEntry(bytes32)\":{\"notice\":\"Write data to the Interchain DataBase as a new entry. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\"},\"writeEntryWithVerification(uint256,bytes32,address[])\":{\"notice\":\"Write data to the Interchain DataBase, and request the given Interchain Modules to verify it on the destination chain. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: additional verification for the same entry could be later done using `requestVerification`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainDB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xde9ba9a1fab8f472722d15529c3c367c908a754e2b8b16cf129a40c68f711488\",\"urls\":[\"bzz-raw://8d38a483dab4e49fcdc833f8d775ab9d496da5efb1a8f391507e73aef22f7aae\",\"dweb:/ipfs/QmRUWXQQ7NNGgBcpWnztcKmege2sJegg6upR8tKUzHrKCd\"]}},\"version\":1}"},"hashes":{"getEntry(address,uint256)":"b8a740e0","getInterchainFee(uint256,address[])":"fc7686ec","getWriterNonce(address)":"4a30a686","readEntry(address,(uint256,bytes32,uint256,bytes32))":"d48588e0","requestVerification(uint256,address,uint256,address[])":"b4f16bae","verifyEntry((uint256,bytes32,uint256,bytes32))":"9cbc6dd5","writeEntry(bytes32)":"2ad8c706","writeEntryWithVerification(uint256,bytes32,address[])":"67c769af"}},"solidity/InterchainClientV1.sol:InterchainClientV1":{"code":"","runtime-code":"0x6080604052600436106100c75760003560e01c80638366a10911610074578063d3388b801161004e578063d3388b801461027a578063f2fde38b1461029a578063f34234c8146102ba57600080fd5b80638366a1091461021c5780638da5cb5b1461022f578063b7ce20781461025a57600080fd5b806331afa7de116100a557806331afa7de146101935780635893740e146101c3578063715018a61461020557600080fd5b80630d898416146100cc5780630e785ce0146101235780631efa222014610175575b600080fd5b3480156100d857600080fd5b506000546101059074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b34801561012f57600080fd5b506001546101509073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011a565b34801561018157600080fd5b50610150610190366004610fc7565b90565b34801561019f57600080fd5b506101b36101ae366004611029565b6102e7565b604051901515815260200161011a565b3480156101cf57600080fd5b506101f76101de36600461108d565b73ffffffffffffffffffffffffffffffffffffffff1690565b60405190815260200161011a565b34801561021157600080fd5b5061021a610717565b005b61021a61022a3660046110b1565b61072b565b34801561023b57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610150565b34801561026657600080fd5b5061021a61027536600461108d565b6108f1565b34801561028657600080fd5b5061021a610295366004611163565b610940565b3480156102a657600080fd5b5061021a6102b536600461108d565b610e9b565b3480156102c657600080fd5b5061021a6102d53660046111af565b60009182526002602052604090912055565b6000806102f6838501856112f1565b9050600060405180608001604052808360200151815260200160026000856020015181526020019081526020016000205481526020018360e0015181526020018360c0015181525090506000826000015183602001518460400151856060015186608001518760a00151604051602001610375969594939291906113af565b604051602081830303815290604052905080805190602001208360c00151036103a45760009350505050610711565b60006103b1846040015190565b905060008173ffffffffffffffffffffffffffffffffffffffff1663a45e107a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610400573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104289190810190611431565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f31b19a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b91906114e3565b905060008373ffffffffffffffffffffffffffffffffffffffff16637c9abd3e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e91906114fc565b67ffffffffffffffff1690506000835167ffffffffffffffff811115610536576105366111d1565b60405190808252806020026020018201604052801561055f578160200160208202803683370190505b50905060005b845181101561069057600154855173ffffffffffffffffffffffffffffffffffffffff9091169063d48588e0908790849081106105a4576105a4611519565b602090810291909101810151604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301528c516024830152918c01516044820152908b0151606482015260608b0151608482015260a401602060405180830381865afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066191906114e3565b82828151811061067357610673611519565b60209081029190910101528061068881611577565b915050610565565b506000805b82518110156106e95742848483815181106106b2576106b2611519565b60200260200101516106c491906115af565b106106d757816106d381611577565b9250505b806106e181611577565b915050610695565b508381106107035760019950505050505050505050610711565b600099505050505050505050505b92915050565b61071f610eff565b6107296000610f52565b565b6000805460405134923392909161077391849146918d918d918d918d9174010000000000000000000000000000000000000000900467ffffffffffffffff16906020016115ed565b60408051601f198184030181529082905280516020909101206001547f67c769af00000000000000000000000000000000000000000000000000000000835290925060009173ffffffffffffffffffffffffffffffffffffffff909116906367c769af9086906107ed908d9087908c908c90600401611637565b60206040518083038185885af115801561080b573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061083091906114e3565b905081898b7ff679da022706ad89d2486ce3bf6cba510d619af7c1b2f6799637ed085f9287d186468d8d600060149054906101000a900467ffffffffffffffff1689604051610884969594939291906116a3565b60405180910390a46000805474010000000000000000000000000000000000000000900467ffffffffffffffff169060146108be836116e2565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050505050505050565b6108f9610eff565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061094e828401846112f1565b9050600060405180608001604052808360200151815260200160026000856020015181526020019081526020016000205481526020018360e0015181526020018360c0015181525090506000826000015183602001518460400151856060015186608001518760a001516040516020016109cd969594939291906113af565b604051602081830303815290604052905080805190602001208360c0015114610a57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c6964207472616e73616374696f6e2049440000000000000000000060448201526064015b60405180910390fd5b6000610a64846040015190565b905060008173ffffffffffffffffffffffffffffffffffffffff1663a45e107a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ab3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610adb9190810190611431565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f31b19a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4e91906114e3565b905060008373ffffffffffffffffffffffffffffffffffffffff16637c9abd3e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc191906114fc565b67ffffffffffffffff1690506000835167ffffffffffffffff811115610be957610be96111d1565b604051908082528060200260200182016040528015610c12578160200160208202803683370190505b50905060005b8451811015610d4357600154855173ffffffffffffffffffffffffffffffffffffffff9091169063d48588e090879084908110610c5757610c57611519565b602090810291909101810151604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301528c516024830152918c01516044820152908b0151606482015260608b0151608482015260a401602060405180830381865afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1491906114e3565b828281518110610d2657610d26611519565b602090810291909101015280610d3b81611577565b915050610c18565b506000805b8251811015610d9c574284848381518110610d6557610d65611519565b6020026020010151610d7791906115af565b10610d8a5781610d8681611577565b9250505b80610d9481611577565b915050610d48565b5083811015610e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4e6f7420656e6f7567682076616c696420726573706f6e73657320746f206d6560448201527f657420746865207468726573686f6c64000000000000000000000000000000006064820152608401610a4e565b8573ffffffffffffffffffffffffffffffffffffffff16637bcad6306040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e7557600080fd5b505af1158015610e89573d6000803e3d6000fd5b50505050505050505050505050505050565b610ea3610eff565b73ffffffffffffffffffffffffffffffffffffffff8116610ef3576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610a4e565b610efc81610f52565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610729576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610a4e565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610fd957600080fd5b5035919050565b60008083601f840112610ff257600080fd5b50813567ffffffffffffffff81111561100a57600080fd5b60208301915083602082850101111561102257600080fd5b9250929050565b6000806020838503121561103c57600080fd5b823567ffffffffffffffff81111561105357600080fd5b61105f85828601610fe0565b90969095509350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610efc57600080fd5b60006020828403121561109f57600080fd5b81356110aa8161106b565b9392505050565b600080600080600080608087890312156110ca57600080fd5b8635955060208701359450604087013567ffffffffffffffff808211156110f057600080fd5b6110fc8a838b01610fe0565b9096509450606089013591508082111561111557600080fd5b818901915089601f83011261112957600080fd5b81358181111561113857600080fd5b8a60208260051b850101111561114d57600080fd5b6020830194508093505050509295509295509295565b60008060006040848603121561117857600080fd5b83359250602084013567ffffffffffffffff81111561119657600080fd5b6111a286828701610fe0565b9497909650939450505050565b600080604083850312156111c257600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611224576112246111d1565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611253576112536111d1565b604052919050565b600082601f83011261126c57600080fd5b813567ffffffffffffffff811115611286576112866111d1565b6112996020601f19601f8401160161122a565b8181528460208386010111156112ae57600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff81168114610efc57600080fd5b80356112ec816112cb565b919050565b60006020828403121561130357600080fd5b813567ffffffffffffffff8082111561131b57600080fd5b90830190610100828603121561133057600080fd5b611338611200565b8235815260208301356020820152604083013560408201526060830135606082015260808301358281111561136c57600080fd5b6113788782860161125b565b60808301525061138a60a084016112e1565b60a082015260c083013560c082015260e083013560e082015280935050505092915050565b86815260006020878184015286604084015285606084015260c0608084015284518060c085015260005b818110156113f55786810183015185820160e0015282016113d9565b50600060e0828601015260e0601f19601f8301168501019250505061142660a083018467ffffffffffffffff169052565b979650505050505050565b6000602080838503121561144457600080fd5b825167ffffffffffffffff8082111561145c57600080fd5b818501915085601f83011261147057600080fd5b815181811115611482576114826111d1565b8060051b915061149384830161122a565b81815291830184019184810190888411156114ad57600080fd5b938501935b838510156114d757845192506114c78361106b565b82825293850193908501906114b2565b98975050505050505050565b6000602082840312156114f557600080fd5b5051919050565b60006020828403121561150e57600080fd5b81516110aa816112cb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036115a8576115a8611548565b5060010190565b8082018082111561071157610711611548565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b87815286602082015285604082015284606082015260c06080820152600061161960c0830185876115c2565b905067ffffffffffffffff831660a083015298975050505050505050565b84815260208082018590526060604083018190528201839052600090849060808401835b8681101561169657833561166e8161106b565b73ffffffffffffffffffffffffffffffffffffffff168252928201929082019060010161165b565b5098975050505050505050565b86815285602082015260a0604082015260006116c360a0830186886115c2565b67ffffffffffffffff9490941660608301525060800152949350505050565b600067ffffffffffffffff8083168181036116ff576116ff611548565b600101939250505056fea26469706673582212202b97925dd68f095019a66c3be4609e4e216f7f489c6d951f931e1520926ae43064736f6c63430008140033","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.20;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingModules() external view returns (address[] memory);\n\n    function getRequiredResponses() external view returns (uint256);\n\n    function getOptimisticTimePeriod() external view returns (uint64);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive() external;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param message The message being sent.\n     * @param srcModules The source modules involved in the message sending.\n     */\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * @param transactionID The ID of the transaction being executed.\n     * @param transaction The transaction data.\n     */\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) external;\n\n    /**\n     * @notice Converts a bytes32 value to an address.\n     * @dev Useful for converting blockchain-specific identifiers to Ethereum addresses.\n     * @param _bytes32 The bytes32 value to convert.\n     * @return address The address obtained from the bytes32 value.\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) external pure returns (address);\n\n    /**\n     * @notice Converts an address to a bytes32 value.\n     * @dev Useful for converting Ethereum addresses to blockchain-specific identifiers.\n     * @param _address The address to convert.\n     * @return bytes32 The bytes32 representation of the address.\n     */\n    function convertAddressToBytes32(address _address) external pure returns (bytes32);\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase\n/// @param srcChainId   The chain id of the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param writerNonce  The nonce of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    bytes32 srcWriter;\n    uint256 writerNonce;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param srcWriter    The address of the writer on the local chain\n    /// @param writerNonce  The nonce of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        address srcWriter,\n        uint256 writerNonce,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            srcWriter: TypeCasts.addressToBytes32(srcWriter),\n            writerNonce: writerNonce,\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryId(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.srcWriter, entry.writerNonce));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param dataHash     The hash of the data written on the source chain\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 dataHash;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingDataHash, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(address writer, uint256 writerNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntry(bytes32 dataHash) external returns (uint256 writerNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param writer        The address of the writer on the source chain\n    /// @param writerNonce   The nonce of the writer on the source chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(\n        uint256 destChainId,\n        address writer,\n        uint256 writerNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 writerNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param writer       The address of the writer on this chain\n    /// @param writerNonce  The nonce of the writer's entry on this chain\n    function getEntry(address writer, uint256 writerNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the writer on this chain.\n    /// @param writer       The address of the writer on this chain\n    function getWriterNonce(address writer) external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, IInterchainClientV1 {\n    uint64 public clientNonce;\n    address public interchainDB;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) linkedClients;\n\n    // TODO: Add permissioning\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public {\n        linkedClients[chainId] = client;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    /**\n     * @notice Emitted when an interchain transaction is sent.\n     */\n    event InterchainTransactionSent(\n        bytes32 srcSender,\n        uint256 srcChainId,\n        bytes32 indexed dstReceiver,\n        uint256 indexed dstChainId,\n        bytes message,\n        uint64 nonce,\n        bytes32 indexed transactionId,\n        uint256 dbWriterNonce\n    );\n\n    /**\n     * @dev Represents an interchain transaction.\n     */\n    struct InterchainTransaction {\n        bytes32 srcSender;\n        uint256 srcChainId;\n        bytes32 dstReceiver;\n        uint256 dstChainId;\n        bytes message;\n        uint64 nonce;\n        bytes32 transactionId;\n        uint256 dbWriterNonce;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // TODO: Customizable Gas Limit for Execution\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        public\n        payable\n    {\n        uint256 totalModuleFees = msg.value;\n        bytes32 sender = convertAddressToBytes32(msg.sender);\n        bytes32 transactionID = keccak256(abi.encode(sender, block.chainid, receiver, dstChainId, message, clientNonce));\n\n        uint256 dbWriterNonce = IInterchainDB(interchainDB).writeEntryWithVerification{value: totalModuleFees}(\n            dstChainId, transactionID, srcModules\n        );\n\n        emit InterchainTransactionSent(\n            sender, block.chainid, receiver, dstChainId, message, clientNonce, transactionID, dbWriterNonce\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    function isExecutable(bytes calldata transaction) public view returns (bool) {\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        if (icTx.transactionId == keccak256(reconstructedID)) {\n            return false;\n        }\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n    uint256[] memory moduleResponseTimestamps = new uint256[](\n        approvedDstModules.length\n        );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        if (validResponses \u003e= appRequiredResponses) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // function _getValidResponses(address[] memory approvedModules, InterchainEntry memory icEntry) internal view returns (uint256) {\n    //     uint256 validResponses = 0;\n    //     for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n    //         uint256 moduleResponseTimestamp = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n    //         if (moduleResponseTimestamp + optimisticTimePeriod \u003e= block.timestamp) {\n    //             validResponses++;\n    //         }\n    //     }\n    //     return validResponses;\n    // }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) public {\n        // Steps to verify:\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        // 2. Verify the entry hash vs bytes calldata provided\n        // 3. Check receiver's app dstModule configuration\n        // 4. Check receiver app's optimistic time period\n        // 5. Read module entry's based on receiver app dstModule config\n        // 6. Confirm module threshold is met\n        // 7. Check optimistic threshold set on app config\n        // 8. Execute the transaction, is optimistic period is met.\n\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        // 2. Verify the provided TX ID == constructed TX data\n        require(icTx.transactionId == keccak256(reconstructedID), \"Invalid transaction ID\");\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n        // 3. Check receiver's app dstModule configuration\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        // 4. Check receiver app's optimistic time period\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n        // 5. Read module entry's based on receiver app dstModule config\n        uint256[] memory moduleResponseTimestamps = new uint256[](\n      approvedDstModules.length\n    );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        require(validResponses \u003e= appRequiredResponses, \"Not enough valid responses to meet the threshold\");\n\n        // 8. Execute the transaction, is optimistic period \u0026 valid responses is met.\n        IInterchainApp(receivingApp).appReceive();\n    }\n\n    // TODO: Seperate out into utils\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) public pure returns (address) {\n        return address(uint160(uint256(_bytes32)));\n    }\n\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertAddressToBytes32(address _address) public pure returns (bytes32) {\n        return bytes32(uint256(uint160(_address)));\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"14932:8027:0:-:0;;;15350:36;;;;;;;;;-1:-1:-1;15372:10:0;;7493:95;;7546:31;;-1:-1:-1;;;7546:31:0;;7574:1;7546:31;;;160:51:1;133:18;;7546:31:0;;;;;;;7493:95;7597:32;7616:12;7597:18;:32::i;:::-;7449:187;14932:8027;;9136:187;9209:16;9228:6;;-1:-1:-1;;;;;9244:17:0;;;-1:-1:-1;;;;;;9244:17:0;;;;;;9276:40;;9228:6;;;;;;;9276:40;;9209:16;9276:40;9199:124;9136:187;:::o;14:203:1:-;14932:8027:0;;;;;;","srcMapRuntime":"14932:8027:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14998:25;;;;;;;;;;-1:-1:-1;14998:25:0;;;;;;;;;;;;;;295:18:1;283:31;;;265:50;;253:2;238:18;14998:25:0;;;;;;;;15029:27;;;;;;;;;;-1:-1:-1;15029:27:0;;;;;;;;;;;502:42:1;490:55;;;472:74;;460:2;445:18;15029:27:0;326:226:1;22616:140:0;;;;;;;;;;-1:-1:-1;22616:140:0;;;;;:::i;:::-;22738:8;22616:140;17224:1852;;;;;;;;;;-1:-1:-1;17224:1852:0;;;;;:::i;:::-;;:::i;:::-;;;1673:14:1;;1666:22;1648:41;;1636:2;1621:18;17224:1852:0;1508:187:1;22817:140:0;;;;;;;;;;-1:-1:-1;22817:140:0;;;;;:::i;:::-;22923:26;;;22817:140;;;;2257:25:1;;;2245:2;2230:18;22817:140:0;2111:177:1;8517:101:0;;;;;;;;;;;;;:::i;:::-;;16391:827;;;;;;:::i;:::-;;:::i;7862:85::-;;;;;;;;;;-1:-1:-1;7908:7:0;7934:6;;;7862:85;;15431:110;;;;;;;;;;-1:-1:-1;15431:110:0;;;;;:::i;:::-;;:::i;19737:2781::-;;;;;;;;;;-1:-1:-1;19737:2781:0;;;;;:::i;:::-;;:::i;8767:215::-;;;;;;;;;;-1:-1:-1;8767:215:0;;;;;:::i;:::-;;:::i;15231:113::-;;;;;;;;;;-1:-1:-1;15231:113:0;;;;;:::i;:::-;15306:22;;;;:13;:22;;;;;;:31;15231:113;17224:1852;17295:4;;17347:48;;;;17358:11;17347:48;:::i;:::-;17311:84;;17470:30;17503:210;;;;;;;;17545:4;:15;;;17503:210;;;;17585:13;:30;17599:4;:15;;;17585:30;;;;;;;;;;;;17503:210;;;;17642:4;:18;;;17503:210;;;;17684:4;:18;;;17503:210;;;17470:243;;17724:28;17778:4;:14;;;17794:4;:15;;;17811:4;:16;;;17829:4;:15;;;17846:4;:12;;;17860:4;:10;;;17767:104;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;17724:147;;17918:15;17908:26;;;;;;17886:4;:18;;;:48;17882:91;;17957:5;17950:12;;;;;;;17882:91;17983:20;18006:41;18030:4;:16;;;22738:8;22616:140;18006:41;17983:64;;18058:35;18111:12;18096:48;;;:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;18096:50:0;;;;;;;;;;;;:::i;:::-;18058:88;;18157:28;18203:12;18188:49;;;:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18157:82;;18250:28;18296:12;18281:52;;;:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18250:85;;;;18342:41;18409:18;:25;18386:58;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;18386:58:0;;18342:102;;18460:9;18455:180;18479:18;:25;18475:1;:29;18455:180;;;18569:12;;18593:21;;18569:12;;;;;18555:37;;18593:18;;18612:1;;18593:21;;;;;;:::i;:::-;;;;;;;;;;;;18555:69;;;;;;;;;;;9670:42:1;9658:55;;;18555:69:0;;;9640:74:1;9750:13;;9730:18;;;9723:41;9806:15;;;9800:22;9780:18;;;9773:50;9865:15;;;9859:22;9839:18;;;9832:50;9854:2;9925:15;;9919:22;9898:19;;;9891:51;9612:19;;18555:69:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18525:24;18550:1;18525:27;;;;;;;;:::i;:::-;;;;;;;;;;:99;18506:3;;;;:::i;:::-;;;;18455:180;;;;18690:22;18732:9;18727:210;18751:24;:31;18747:1;:35;18727:210;;;18861:15;18837:20;18807:24;18832:1;18807:27;;;;;;;;:::i;:::-;;;;;;;:50;;;;:::i;:::-;:69;18803:124;;18896:16;;;;:::i;:::-;;;;18803:124;18784:3;;;;:::i;:::-;;;;18727:210;;;;18969:20;18951:14;:38;18947:123;;19012:4;19005:11;;;;;;;;;;;;;18947:123;19054:5;19047:12;;;;;;;;;;;17224:1852;;;;;:::o;8517:101::-;7755:13;:11;:13::i;:::-;8581:30:::1;8608:1;8581:18;:30::i;:::-;8517:101::o:0;16391:827::-;16591:23;16797:11;;16732:77;;16617:9;;16677:10;;16591:23;;16732:77;;16677:10;;16751:13;;16766:8;;16776:10;;16788:7;;;;16797:11;;;;;;16732:77;;;:::i;:::-;;;;-1:-1:-1;;16732:77:0;;;;;;;;;;16722:88;;16732:77;16722:88;;;;16859:12;;16845:139;;;16722:88;;-1:-1:-1;16821:21:0;;16859:12;;;;;16845:54;;16907:15;;16845:139;;16937:10;;16722:88;;16964:10;;;;16845:139;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16821:163;;17106:13;17072:10;17062:8;17000:144;17039:6;17047:13;17084:7;;17093:11;;;;;;;;;;;17121:13;17000:144;;;;;;;;;;;:::i;:::-;;;;;;;;17198:11;:13;;;;;;;;:11;:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;16581:637;;;;16391:827;;;;;;:::o;15431:110::-;7755:13;:11;:13::i;:::-;15506:12:::1;:28:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;15431:110::o;19737:2781::-;20373:33;20409:48;;;;20420:11;20409:48;:::i;:::-;20373:84;;20554:30;20587:210;;;;;;;;20629:4;:15;;;20587:210;;;;20669:13;:30;20683:4;:15;;;20669:30;;;;;;;;;;;;20587:210;;;;20726:4;:18;;;20587:210;;;;20768:4;:18;;;20587:210;;;20554:243;;20808:28;20862:4;:14;;;20878:4;:15;;;20895:4;:16;;;20913:4;:15;;;20930:4;:12;;;20944:4;:10;;;20851:104;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;20808:147;;21069:15;21059:26;;;;;;21037:4;:18;;;:48;21029:83;;;;;;;13284:2:1;21029:83:0;;;13266:21:1;13323:2;13303:18;;;13296:30;13362:24;13342:18;;;13335:52;13404:18;;21029:83:0;;;;;;;;;21123:20;21146:41;21170:4;:16;;;22738:8;22616:140;21146:41;21123:64;;21256:35;21309:12;21294:48;;;:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;21294:50:0;;;;;;;;;;;;:::i;:::-;21256:88;;21355:28;21401:12;21386:49;;;:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21355:82;;21506:28;21552:12;21537:52;;;:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21506:85;;;;21675:41;21740:18;:25;21719:52;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21719:52:0;;21675:96;;21787:9;21782:180;21806:18;:25;21802:1;:29;21782:180;;;21896:12;;21920:21;;21896:12;;;;;21882:37;;21920:18;;21939:1;;21920:21;;;;;;:::i;:::-;;;;;;;;;;;;21882:69;;;;;;;;;;;9670:42:1;9658:55;;;21882:69:0;;;9640:74:1;9750:13;;9730:18;;;9723:41;9806:15;;;9800:22;9780:18;;;9773:50;9865:15;;;9859:22;9839:18;;;9832:50;9854:2;9925:15;;9919:22;9898:19;;;9891:51;9612:19;;21882:69:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21852:24;21877:1;21852:27;;;;;;;;:::i;:::-;;;;;;;;;;:99;21833:3;;;;:::i;:::-;;;;21782:180;;;;22017:22;22059:9;22054:210;22078:24;:31;22074:1;:35;22054:210;;;22188:15;22164:20;22134:24;22159:1;22134:27;;;;;;;;:::i;:::-;;;;;;;:50;;;;:::i;:::-;:69;22130:124;;22223:16;;;;:::i;:::-;;;;22130:124;22111:3;;;;:::i;:::-;;;;22054:210;;;;22300:20;22282:14;:38;;22274:99;;;;;;;13635:2:1;22274:99:0;;;13617:21:1;13674:2;13654:18;;;13647:30;13713:34;13693:18;;;13686:62;13784:18;13764;;;13757:46;13820:19;;22274:99:0;13433:412:1;22274:99:0;22485:12;22470:39;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19822:2696;;;;;;;;;19737:2781;;;:::o;8767:215::-;7755:13;:11;:13::i;:::-;8851:22:::1;::::0;::::1;8847:91;;8896:31;::::0;::::1;::::0;;8924:1:::1;8896:31;::::0;::::1;472:74:1::0;445:18;;8896:31:0::1;326:226:1::0;8847:91:0::1;8947:28;8966:8;8947:18;:28::i;:::-;8767:215:::0;:::o;8020:162::-;7908:7;7934:6;8079:23;7934:6;4461:10;8079:23;8075:101;;8125:40;;;;;4461:10;8125:40;;;472:74:1;445:18;;8125:40:0;326:226:1;9136:187:0;9209:16;9228:6;;;9244:17;;;;;;;;;;9276:40;;9228:6;;;;;;;9276:40;;9209:16;9276:40;9199:124;9136:187;:::o;557:180:1:-;616:6;669:2;657:9;648:7;644:23;640:32;637:52;;;685:1;682;675:12;637:52;-1:-1:-1;708:23:1;;557:180;-1:-1:-1;557:180:1:o;742:347::-;793:8;803:6;857:3;850:4;842:6;838:17;834:27;824:55;;875:1;872;865:12;824:55;-1:-1:-1;898:20:1;;941:18;930:30;;927:50;;;973:1;970;963:12;927:50;1010:4;1002:6;998:17;986:29;;1062:3;1055:4;1046:6;1038;1034:19;1030:30;1027:39;1024:59;;;1079:1;1076;1069:12;1024:59;742:347;;;;;:::o;1094:409::-;1164:6;1172;1225:2;1213:9;1204:7;1200:23;1196:32;1193:52;;;1241:1;1238;1231:12;1193:52;1281:9;1268:23;1314:18;1306:6;1303:30;1300:50;;;1346:1;1343;1336:12;1300:50;1385:58;1435:7;1426:6;1415:9;1411:22;1385:58;:::i;:::-;1462:8;;1359:84;;-1:-1:-1;1094:409:1;-1:-1:-1;;;;1094:409:1:o;1700:154::-;1786:42;1779:5;1775:54;1768:5;1765:65;1755:93;;1844:1;1841;1834:12;1859:247;1918:6;1971:2;1959:9;1950:7;1946:23;1942:32;1939:52;;;1987:1;1984;1977:12;1939:52;2026:9;2013:23;2045:31;2070:5;2045:31;:::i;:::-;2095:5;1859:247;-1:-1:-1;;;1859:247:1:o;2293:1039::-;2417:6;2425;2433;2441;2449;2457;2510:3;2498:9;2489:7;2485:23;2481:33;2478:53;;;2527:1;2524;2517:12;2478:53;2563:9;2550:23;2540:33;;2620:2;2609:9;2605:18;2592:32;2582:42;;2675:2;2664:9;2660:18;2647:32;2698:18;2739:2;2731:6;2728:14;2725:34;;;2755:1;2752;2745:12;2725:34;2794:58;2844:7;2835:6;2824:9;2820:22;2794:58;:::i;:::-;2871:8;;-1:-1:-1;2768:84:1;-1:-1:-1;2959:2:1;2944:18;;2931:32;;-1:-1:-1;2975:16:1;;;2972:36;;;3004:1;3001;2994:12;2972:36;3042:8;3031:9;3027:24;3017:34;;3089:7;3082:4;3078:2;3074:13;3070:27;3060:55;;3111:1;3108;3101:12;3060:55;3151:2;3138:16;3177:2;3169:6;3166:14;3163:34;;;3193:1;3190;3183:12;3163:34;3246:7;3241:2;3231:6;3228:1;3224:14;3220:2;3216:23;3212:32;3209:45;3206:65;;;3267:1;3264;3257:12;3206:65;3298:2;3294;3290:11;3280:21;;3320:6;3310:16;;;;;2293:1039;;;;;;;;:::o;3337:477::-;3416:6;3424;3432;3485:2;3473:9;3464:7;3460:23;3456:32;3453:52;;;3501:1;3498;3491:12;3453:52;3537:9;3524:23;3514:33;;3598:2;3587:9;3583:18;3570:32;3625:18;3617:6;3614:30;3611:50;;;3657:1;3654;3647:12;3611:50;3696:58;3746:7;3737:6;3726:9;3722:22;3696:58;:::i;:::-;3337:477;;3773:8;;-1:-1:-1;3670:84:1;;-1:-1:-1;;;;3337:477:1:o;3819:248::-;3887:6;3895;3948:2;3936:9;3927:7;3923:23;3919:32;3916:52;;;3964:1;3961;3954:12;3916:52;-1:-1:-1;;3987:23:1;;;4057:2;4042:18;;;4029:32;;-1:-1:-1;3819:248:1:o;4072:184::-;4124:77;4121:1;4114:88;4221:4;4218:1;4211:15;4245:4;4242:1;4235:15;4261:255;4333:2;4327:9;4375:6;4363:19;;4412:18;4397:34;;4433:22;;;4394:62;4391:88;;;4459:18;;:::i;:::-;4495:2;4488:22;4261:255;:::o;4521:334::-;4592:2;4586:9;4648:2;4638:13;;-1:-1:-1;;4634:86:1;4622:99;;4751:18;4736:34;;4772:22;;;4733:62;4730:88;;;4798:18;;:::i;:::-;4834:2;4827:22;4521:334;;-1:-1:-1;4521:334:1:o;4860:589::-;4902:5;4955:3;4948:4;4940:6;4936:17;4932:27;4922:55;;4973:1;4970;4963:12;4922:55;5009:6;4996:20;5035:18;5031:2;5028:26;5025:52;;;5057:18;;:::i;:::-;5101:114;5209:4;-1:-1:-1;;5133:4:1;5129:2;5125:13;5121:86;5117:97;5101:114;:::i;:::-;5240:2;5231:7;5224:19;5286:3;5279:4;5274:2;5266:6;5262:15;5258:26;5255:35;5252:55;;;5303:1;5300;5293:12;5252:55;5368:2;5361:4;5353:6;5349:17;5342:4;5333:7;5329:18;5316:55;5416:1;5391:16;;;5409:4;5387:27;5380:38;;;;5395:7;4860:589;-1:-1:-1;;;4860:589:1:o;5454:129::-;5539:18;5532:5;5528:30;5521:5;5518:41;5508:69;;5573:1;5570;5563:12;5588:132;5655:20;;5684:30;5655:20;5684:30;:::i;:::-;5588:132;;;:::o;5725:1042::-;5822:6;5875:2;5863:9;5854:7;5850:23;5846:32;5843:52;;;5891:1;5888;5881:12;5843:52;5931:9;5918:23;5960:18;6001:2;5993:6;5990:14;5987:34;;;6017:1;6014;6007:12;5987:34;6040:22;;;;6096:6;6078:16;;;6074:29;6071:49;;;6116:1;6113;6106:12;6071:49;6142:22;;:::i;:::-;6200:2;6187:16;6180:5;6173:31;6257:2;6253;6249:11;6236:25;6231:2;6224:5;6220:14;6213:49;6315:2;6311;6307:11;6294:25;6289:2;6282:5;6278:14;6271:49;6373:2;6369;6365:11;6352:25;6347:2;6340:5;6336:14;6329:49;6424:3;6420:2;6416:12;6403:26;6454:2;6444:8;6441:16;6438:36;;;6470:1;6467;6460:12;6438:36;6507:44;6543:7;6532:8;6528:2;6524:17;6507:44;:::i;:::-;6501:3;6494:5;6490:15;6483:69;;6585:31;6611:3;6607:2;6603:12;6585:31;:::i;:::-;6579:3;6572:5;6568:15;6561:56;6671:3;6667:2;6663:12;6650:26;6644:3;6637:5;6633:15;6626:51;6731:3;6727:2;6723:12;6710:26;6704:3;6697:5;6693:15;6686:51;6756:5;6746:15;;;;;5725:1042;;;;:::o;6772:976::-;7057:6;7046:9;7039:25;7020:4;7083:2;7121:6;7116:2;7105:9;7101:18;7094:34;7164:6;7159:2;7148:9;7144:18;7137:34;7207:6;7202:2;7191:9;7187:18;7180:34;7251:3;7245;7234:9;7230:19;7223:32;7284:6;7278:13;7328:6;7322:3;7311:9;7307:19;7300:35;7353:1;7363:141;7377:6;7374:1;7371:13;7363:141;;;7473:14;;;7469:23;;7463:30;7438:17;;;7457:3;7434:27;7427:67;7392:10;;7363:141;;;7367:3;7554:1;7548:3;7539:6;7528:9;7524:22;7520:32;7513:43;7683:3;-1:-1:-1;;7608:2:1;7600:6;7596:15;7592:88;7581:9;7577:104;7573:114;7565:122;;;;7696:46;7737:3;7726:9;7722:19;7714:6;90:18;79:30;67:43;;14:102;7696:46;6772:976;;;;;;;;;:::o;7753:1011::-;7848:6;7879:2;7922;7910:9;7901:7;7897:23;7893:32;7890:52;;;7938:1;7935;7928:12;7890:52;7971:9;7965:16;8000:18;8041:2;8033:6;8030:14;8027:34;;;8057:1;8054;8047:12;8027:34;8095:6;8084:9;8080:22;8070:32;;8140:7;8133:4;8129:2;8125:13;8121:27;8111:55;;8162:1;8159;8152:12;8111:55;8191:2;8185:9;8213:2;8209;8206:10;8203:36;;;8219:18;;:::i;:::-;8265:2;8262:1;8258:10;8248:20;;8288:28;8312:2;8308;8304:11;8288:28;:::i;:::-;8350:15;;;8420:11;;;8416:20;;;8381:12;;;;8448:19;;;8445:39;;;8480:1;8477;8470:12;8445:39;8504:11;;;;8524:210;8540:6;8535:3;8532:15;8524:210;;;8613:3;8607:10;8594:23;;8630:31;8655:5;8630:31;:::i;:::-;8674:18;;;8557:12;;;;8712;;;;8524:210;;;8753:5;7753:1011;-1:-1:-1;;;;;;;;7753:1011:1:o;8769:184::-;8839:6;8892:2;8880:9;8871:7;8867:23;8863:32;8860:52;;;8908:1;8905;8898:12;8860:52;-1:-1:-1;8931:16:1;;8769:184;-1:-1:-1;8769:184:1:o;8958:249::-;9027:6;9080:2;9068:9;9059:7;9055:23;9051:32;9048:52;;;9096:1;9093;9086:12;9048:52;9128:9;9122:16;9147:30;9171:5;9147:30;:::i;9212:184::-;9264:77;9261:1;9254:88;9361:4;9358:1;9351:15;9385:4;9382:1;9375:15;9953:184;10005:77;10002:1;9995:88;10102:4;10099:1;10092:15;10126:4;10123:1;10116:15;10142:195;10181:3;10212:66;10205:5;10202:77;10199:103;;10282:18;;:::i;:::-;-1:-1:-1;10329:1:1;10318:13;;10142:195::o;10342:125::-;10407:9;;;10428:10;;;10425:36;;;10441:18;;:::i;10472:325::-;10560:6;10555:3;10548:19;10612:6;10605:5;10598:4;10593:3;10589:14;10576:43;;10664:1;10657:4;10648:6;10643:3;10639:16;10635:27;10628:38;10530:3;10786:4;-1:-1:-1;;10711:2:1;10703:6;10699:15;10695:88;10690:3;10686:98;10682:109;10675:116;;10472:325;;;;:::o;10802:626::-;11097:6;11086:9;11079:25;11140:6;11135:2;11124:9;11120:18;11113:34;11183:6;11178:2;11167:9;11163:18;11156:34;11226:6;11221:2;11210:9;11206:18;11199:34;11270:3;11264;11253:9;11249:19;11242:32;11060:4;11291:62;11348:3;11337:9;11333:19;11325:6;11317;11291:62;:::i;:::-;11283:70;;11402:18;11394:6;11390:31;11384:3;11373:9;11369:19;11362:60;10802:626;;;;;;;;;;:::o;11433:871::-;11701:25;;;11745:2;11763:18;;;11756:34;;;11689:2;11821;11806:18;;11799:30;;;11674:18;;11864:22;;;11641:4;;11944:6;;11917:3;11902:19;;11641:4;11978:300;11992:6;11989:1;11986:13;11978:300;;;12067:6;12054:20;12087:31;12112:5;12087:31;:::i;:::-;12154:42;12143:54;12131:67;;12253:15;;;;12218:12;;;;12014:1;12007:9;11978:300;;;-1:-1:-1;12295:3:1;11433:871;-1:-1:-1;;;;;;;;11433:871:1:o;12309:554::-;12576:6;12565:9;12558:25;12619:6;12614:2;12603:9;12599:18;12592:34;12662:3;12657:2;12646:9;12642:18;12635:31;12539:4;12683:62;12740:3;12729:9;12725:19;12717:6;12709;12683:62;:::i;:::-;12793:18;12781:31;;;;12776:2;12761:18;;12754:59;-1:-1:-1;12844:3:1;12829:19;12822:35;12675:70;12309:554;-1:-1:-1;;;;12309:554:1:o;12868:209::-;12906:3;12934:18;12987:2;12980:5;12976:14;13014:2;13005:7;13002:15;12999:41;;13020:18;;:::i;:::-;13069:1;13056:15;;12868:209;-1:-1:-1;;;12868:209:1:o","abiDefinition":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"srcChainId","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dstChainId","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"},{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"dbWriterNonce","type":"uint256"}],"name":"InterchainTransactionSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"clientNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"convertAddressToBytes32","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_bytes32","type":"bytes32"}],"name":"convertBytes32ToAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"interchainDB","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionID","type":"bytes32"},{"internalType":"bytes","name":"transaction","type":"bytes"}],"name":"interchainExecute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"interchainSend","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"transaction","type":"bytes"}],"name":"isExecutable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_interchainDB","type":"address"}],"name":"setInterchainDB","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"setLinkedClient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"events":{"InterchainTransactionSent(bytes32,uint256,bytes32,uint256,bytes,uint64,bytes32,uint256)":{"notice":"Emitted when an interchain transaction is sent."}},"kind":"user","methods":{"convertAddressToBytes32(address)":{"notice":"Converts an address to a bytes32 value."},"convertBytes32ToAddress(bytes32)":{"notice":"Converts a bytes32 value to an address."},"interchainExecute(bytes32,bytes)":{"notice":"Executes a transaction that has been sent via the Interchain."},"interchainSend(bytes32,uint256,bytes,address[])":{"notice":"Sends a message to another chain via the Interchain Communication Protocol."},"setInterchainDB(address)":{"notice":"Sets the address of the InterchainDB contract."},"setLinkedClient(uint256,bytes32)":{"notice":"Sets the linked client for a specific chain ID."}},"version":1},"developerDoc":{"details":"Implements the operations of the Interchain Execution Layer.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"convertAddressToBytes32(address)":{"details":"Useful for converting Ethereum addresses to blockchain-specific identifiers.","params":{"_address":"The address to convert."},"returns":{"_0":"bytes32 The bytes32 representation of the address."}},"convertBytes32ToAddress(bytes32)":{"details":"Useful for converting blockchain-specific identifiers to Ethereum addresses.","params":{"_bytes32":"The bytes32 value to convert."},"returns":{"_0":"address The address obtained from the bytes32 value."}},"interchainExecute(bytes32,bytes)":{"details":"The transaction must have been previously sent and recorded.","params":{"transaction":"The transaction data.","transactionID":"The ID of the transaction being executed."}},"interchainSend(bytes32,uint256,bytes,address[])":{"details":"Charges a fee for the message, which is payable upon calling this function.","params":{"dstChainId":"The chain ID of the destination chain.","message":"The message being sent.","receiver":"The address of the receiver on the destination chain.","srcModules":"The source modules involved in the message sending."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setInterchainDB(address)":{"details":"Only callable by the contract owner or an authorized account.","params":{"_interchainDB":"The address of the InterchainDB contract."}},"setLinkedClient(uint256,bytes32)":{"details":"Stores the address of the linked client in a mapping with the chain ID as the key.","params":{"chainId":"The chain ID for which the client is being set.","client":"The address of the client being linked."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"InterchainClientV1","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dbWriterNonce\",\"type\":\"uint256\"}],\"name\":\"InterchainTransactionSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"clientNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"convertAddressToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"convertBytes32ToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainDB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"}],\"name\":\"interchainExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"interchainSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"}],\"name\":\"isExecutable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interchainDB\",\"type\":\"address\"}],\"name\":\"setInterchainDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"setLinkedClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements the operations of the Interchain Execution Layer.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"convertAddressToBytes32(address)\":{\"details\":\"Useful for converting Ethereum addresses to blockchain-specific identifiers.\",\"params\":{\"_address\":\"The address to convert.\"},\"returns\":{\"_0\":\"bytes32 The bytes32 representation of the address.\"}},\"convertBytes32ToAddress(bytes32)\":{\"details\":\"Useful for converting blockchain-specific identifiers to Ethereum addresses.\",\"params\":{\"_bytes32\":\"The bytes32 value to convert.\"},\"returns\":{\"_0\":\"address The address obtained from the bytes32 value.\"}},\"interchainExecute(bytes32,bytes)\":{\"details\":\"The transaction must have been previously sent and recorded.\",\"params\":{\"transaction\":\"The transaction data.\",\"transactionID\":\"The ID of the transaction being executed.\"}},\"interchainSend(bytes32,uint256,bytes,address[])\":{\"details\":\"Charges a fee for the message, which is payable upon calling this function.\",\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"message\":\"The message being sent.\",\"receiver\":\"The address of the receiver on the destination chain.\",\"srcModules\":\"The source modules involved in the message sending.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setInterchainDB(address)\":{\"details\":\"Only callable by the contract owner or an authorized account.\",\"params\":{\"_interchainDB\":\"The address of the InterchainDB contract.\"}},\"setLinkedClient(uint256,bytes32)\":{\"details\":\"Stores the address of the linked client in a mapping with the chain ID as the key.\",\"params\":{\"chainId\":\"The chain ID for which the client is being set.\",\"client\":\"The address of the client being linked.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"InterchainClientV1\",\"version\":1},\"userdoc\":{\"events\":{\"InterchainTransactionSent(bytes32,uint256,bytes32,uint256,bytes,uint64,bytes32,uint256)\":{\"notice\":\"Emitted when an interchain transaction is sent.\"}},\"kind\":\"user\",\"methods\":{\"convertAddressToBytes32(address)\":{\"notice\":\"Converts an address to a bytes32 value.\"},\"convertBytes32ToAddress(bytes32)\":{\"notice\":\"Converts a bytes32 value to an address.\"},\"interchainExecute(bytes32,bytes)\":{\"notice\":\"Executes a transaction that has been sent via the Interchain.\"},\"interchainSend(bytes32,uint256,bytes,address[])\":{\"notice\":\"Sends a message to another chain via the Interchain Communication Protocol.\"},\"setInterchainDB(address)\":{\"notice\":\"Sets the address of the InterchainDB contract.\"},\"setLinkedClient(uint256,bytes32)\":{\"notice\":\"Sets the linked client for a specific chain ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainClientV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xde9ba9a1fab8f472722d15529c3c367c908a754e2b8b16cf129a40c68f711488\",\"urls\":[\"bzz-raw://8d38a483dab4e49fcdc833f8d775ab9d496da5efb1a8f391507e73aef22f7aae\",\"dweb:/ipfs/QmRUWXQQ7NNGgBcpWnztcKmege2sJegg6upR8tKUzHrKCd\"]}},\"version\":1}"},"hashes":{"clientNonce()":"0d898416","convertAddressToBytes32(address)":"5893740e","convertBytes32ToAddress(bytes32)":"1efa2220","interchainDB()":"0e785ce0","interchainExecute(bytes32,bytes)":"d3388b80","interchainSend(bytes32,uint256,bytes,address[])":"8366a109","isExecutable(bytes)":"31afa7de","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setInterchainDB(address)":"b7ce2078","setLinkedClient(uint256,bytes32)":"f34234c8","transferOwnership(address)":"f2fde38b"}},"solidity/InterchainClientV1.sol:InterchainEntryLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127bf2630ede92bb7f35343d376b83763bd490af4cf90ff52fa431dfb6e586e964736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127bf2630ede92bb7f35343d376b83763bd490af4cf90ff52fa431dfb6e586e964736f6c63430008140033","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.20;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingModules() external view returns (address[] memory);\n\n    function getRequiredResponses() external view returns (uint256);\n\n    function getOptimisticTimePeriod() external view returns (uint64);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive() external;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param message The message being sent.\n     * @param srcModules The source modules involved in the message sending.\n     */\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * @param transactionID The ID of the transaction being executed.\n     * @param transaction The transaction data.\n     */\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) external;\n\n    /**\n     * @notice Converts a bytes32 value to an address.\n     * @dev Useful for converting blockchain-specific identifiers to Ethereum addresses.\n     * @param _bytes32 The bytes32 value to convert.\n     * @return address The address obtained from the bytes32 value.\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) external pure returns (address);\n\n    /**\n     * @notice Converts an address to a bytes32 value.\n     * @dev Useful for converting Ethereum addresses to blockchain-specific identifiers.\n     * @param _address The address to convert.\n     * @return bytes32 The bytes32 representation of the address.\n     */\n    function convertAddressToBytes32(address _address) external pure returns (bytes32);\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase\n/// @param srcChainId   The chain id of the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param writerNonce  The nonce of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    bytes32 srcWriter;\n    uint256 writerNonce;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param srcWriter    The address of the writer on the local chain\n    /// @param writerNonce  The nonce of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        address srcWriter,\n        uint256 writerNonce,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            srcWriter: TypeCasts.addressToBytes32(srcWriter),\n            writerNonce: writerNonce,\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryId(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.srcWriter, entry.writerNonce));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param dataHash     The hash of the data written on the source chain\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 dataHash;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingDataHash, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(address writer, uint256 writerNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntry(bytes32 dataHash) external returns (uint256 writerNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param writer        The address of the writer on the source chain\n    /// @param writerNonce   The nonce of the writer on the source chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(\n        uint256 destChainId,\n        address writer,\n        uint256 writerNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 writerNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param writer       The address of the writer on this chain\n    /// @param writerNonce  The nonce of the writer's entry on this chain\n    function getEntry(address writer, uint256 writerNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the writer on this chain.\n    /// @param writer       The address of the writer on this chain\n    function getWriterNonce(address writer) external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, IInterchainClientV1 {\n    uint64 public clientNonce;\n    address public interchainDB;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) linkedClients;\n\n    // TODO: Add permissioning\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public {\n        linkedClients[chainId] = client;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    /**\n     * @notice Emitted when an interchain transaction is sent.\n     */\n    event InterchainTransactionSent(\n        bytes32 srcSender,\n        uint256 srcChainId,\n        bytes32 indexed dstReceiver,\n        uint256 indexed dstChainId,\n        bytes message,\n        uint64 nonce,\n        bytes32 indexed transactionId,\n        uint256 dbWriterNonce\n    );\n\n    /**\n     * @dev Represents an interchain transaction.\n     */\n    struct InterchainTransaction {\n        bytes32 srcSender;\n        uint256 srcChainId;\n        bytes32 dstReceiver;\n        uint256 dstChainId;\n        bytes message;\n        uint64 nonce;\n        bytes32 transactionId;\n        uint256 dbWriterNonce;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // TODO: Customizable Gas Limit for Execution\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        public\n        payable\n    {\n        uint256 totalModuleFees = msg.value;\n        bytes32 sender = convertAddressToBytes32(msg.sender);\n        bytes32 transactionID = keccak256(abi.encode(sender, block.chainid, receiver, dstChainId, message, clientNonce));\n\n        uint256 dbWriterNonce = IInterchainDB(interchainDB).writeEntryWithVerification{value: totalModuleFees}(\n            dstChainId, transactionID, srcModules\n        );\n\n        emit InterchainTransactionSent(\n            sender, block.chainid, receiver, dstChainId, message, clientNonce, transactionID, dbWriterNonce\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    function isExecutable(bytes calldata transaction) public view returns (bool) {\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        if (icTx.transactionId == keccak256(reconstructedID)) {\n            return false;\n        }\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n    uint256[] memory moduleResponseTimestamps = new uint256[](\n        approvedDstModules.length\n        );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        if (validResponses \u003e= appRequiredResponses) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // function _getValidResponses(address[] memory approvedModules, InterchainEntry memory icEntry) internal view returns (uint256) {\n    //     uint256 validResponses = 0;\n    //     for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n    //         uint256 moduleResponseTimestamp = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n    //         if (moduleResponseTimestamp + optimisticTimePeriod \u003e= block.timestamp) {\n    //             validResponses++;\n    //         }\n    //     }\n    //     return validResponses;\n    // }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) public {\n        // Steps to verify:\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        // 2. Verify the entry hash vs bytes calldata provided\n        // 3. Check receiver's app dstModule configuration\n        // 4. Check receiver app's optimistic time period\n        // 5. Read module entry's based on receiver app dstModule config\n        // 6. Confirm module threshold is met\n        // 7. Check optimistic threshold set on app config\n        // 8. Execute the transaction, is optimistic period is met.\n\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        // 2. Verify the provided TX ID == constructed TX data\n        require(icTx.transactionId == keccak256(reconstructedID), \"Invalid transaction ID\");\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n        // 3. Check receiver's app dstModule configuration\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        // 4. Check receiver app's optimistic time period\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n        // 5. Read module entry's based on receiver app dstModule config\n        uint256[] memory moduleResponseTimestamps = new uint256[](\n      approvedDstModules.length\n    );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        require(validResponses \u003e= appRequiredResponses, \"Not enough valid responses to meet the threshold\");\n\n        // 8. Execute the transaction, is optimistic period \u0026 valid responses is met.\n        IInterchainApp(receivingApp).appReceive();\n    }\n\n    // TODO: Seperate out into utils\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) public pure returns (address) {\n        return address(uint160(uint256(_bytes32)));\n    }\n\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertAddressToBytes32(address _address) public pure returns (bytes32) {\n        return bytes32(uint256(uint160(_address)));\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"5187:1080:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;5187:1080:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"5187:1080:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainEntryLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xde9ba9a1fab8f472722d15529c3c367c908a754e2b8b16cf129a40c68f711488\",\"urls\":[\"bzz-raw://8d38a483dab4e49fcdc833f8d775ab9d496da5efb1a8f391507e73aef22f7aae\",\"dweb:/ipfs/QmRUWXQQ7NNGgBcpWnztcKmege2sJegg6upR8tKUzHrKCd\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:Ownable":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.20;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingModules() external view returns (address[] memory);\n\n    function getRequiredResponses() external view returns (uint256);\n\n    function getOptimisticTimePeriod() external view returns (uint64);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive() external;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param message The message being sent.\n     * @param srcModules The source modules involved in the message sending.\n     */\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * @param transactionID The ID of the transaction being executed.\n     * @param transaction The transaction data.\n     */\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) external;\n\n    /**\n     * @notice Converts a bytes32 value to an address.\n     * @dev Useful for converting blockchain-specific identifiers to Ethereum addresses.\n     * @param _bytes32 The bytes32 value to convert.\n     * @return address The address obtained from the bytes32 value.\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) external pure returns (address);\n\n    /**\n     * @notice Converts an address to a bytes32 value.\n     * @dev Useful for converting Ethereum addresses to blockchain-specific identifiers.\n     * @param _address The address to convert.\n     * @return bytes32 The bytes32 representation of the address.\n     */\n    function convertAddressToBytes32(address _address) external pure returns (bytes32);\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase\n/// @param srcChainId   The chain id of the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param writerNonce  The nonce of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    bytes32 srcWriter;\n    uint256 writerNonce;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param srcWriter    The address of the writer on the local chain\n    /// @param writerNonce  The nonce of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        address srcWriter,\n        uint256 writerNonce,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            srcWriter: TypeCasts.addressToBytes32(srcWriter),\n            writerNonce: writerNonce,\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryId(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.srcWriter, entry.writerNonce));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param dataHash     The hash of the data written on the source chain\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 dataHash;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingDataHash, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(address writer, uint256 writerNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntry(bytes32 dataHash) external returns (uint256 writerNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param writer        The address of the writer on the source chain\n    /// @param writerNonce   The nonce of the writer on the source chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(\n        uint256 destChainId,\n        address writer,\n        uint256 writerNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 writerNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param writer       The address of the writer on this chain\n    /// @param writerNonce  The nonce of the writer's entry on this chain\n    function getEntry(address writer, uint256 writerNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the writer on this chain.\n    /// @param writer       The address of the writer on this chain\n    function getWriterNonce(address writer) external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, IInterchainClientV1 {\n    uint64 public clientNonce;\n    address public interchainDB;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) linkedClients;\n\n    // TODO: Add permissioning\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public {\n        linkedClients[chainId] = client;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    /**\n     * @notice Emitted when an interchain transaction is sent.\n     */\n    event InterchainTransactionSent(\n        bytes32 srcSender,\n        uint256 srcChainId,\n        bytes32 indexed dstReceiver,\n        uint256 indexed dstChainId,\n        bytes message,\n        uint64 nonce,\n        bytes32 indexed transactionId,\n        uint256 dbWriterNonce\n    );\n\n    /**\n     * @dev Represents an interchain transaction.\n     */\n    struct InterchainTransaction {\n        bytes32 srcSender;\n        uint256 srcChainId;\n        bytes32 dstReceiver;\n        uint256 dstChainId;\n        bytes message;\n        uint64 nonce;\n        bytes32 transactionId;\n        uint256 dbWriterNonce;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // TODO: Customizable Gas Limit for Execution\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        public\n        payable\n    {\n        uint256 totalModuleFees = msg.value;\n        bytes32 sender = convertAddressToBytes32(msg.sender);\n        bytes32 transactionID = keccak256(abi.encode(sender, block.chainid, receiver, dstChainId, message, clientNonce));\n\n        uint256 dbWriterNonce = IInterchainDB(interchainDB).writeEntryWithVerification{value: totalModuleFees}(\n            dstChainId, transactionID, srcModules\n        );\n\n        emit InterchainTransactionSent(\n            sender, block.chainid, receiver, dstChainId, message, clientNonce, transactionID, dbWriterNonce\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    function isExecutable(bytes calldata transaction) public view returns (bool) {\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        if (icTx.transactionId == keccak256(reconstructedID)) {\n            return false;\n        }\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n    uint256[] memory moduleResponseTimestamps = new uint256[](\n        approvedDstModules.length\n        );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        if (validResponses \u003e= appRequiredResponses) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // function _getValidResponses(address[] memory approvedModules, InterchainEntry memory icEntry) internal view returns (uint256) {\n    //     uint256 validResponses = 0;\n    //     for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n    //         uint256 moduleResponseTimestamp = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n    //         if (moduleResponseTimestamp + optimisticTimePeriod \u003e= block.timestamp) {\n    //             validResponses++;\n    //         }\n    //     }\n    //     return validResponses;\n    // }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) public {\n        // Steps to verify:\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        // 2. Verify the entry hash vs bytes calldata provided\n        // 3. Check receiver's app dstModule configuration\n        // 4. Check receiver app's optimistic time period\n        // 5. Read module entry's based on receiver app dstModule config\n        // 6. Confirm module threshold is met\n        // 7. Check optimistic threshold set on app config\n        // 8. Execute the transaction, is optimistic period is met.\n\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        // 2. Verify the provided TX ID == constructed TX data\n        require(icTx.transactionId == keccak256(reconstructedID), \"Invalid transaction ID\");\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n        // 3. Check receiver's app dstModule configuration\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        // 4. Check receiver app's optimistic time period\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n        // 5. Read module entry's based on receiver app dstModule config\n        uint256[] memory moduleResponseTimestamps = new uint256[](\n      approvedDstModules.length\n    );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        require(validResponses \u003e= appRequiredResponses, \"Not enough valid responses to meet the threshold\");\n\n        // 8. Execute the transaction, is optimistic period \u0026 valid responses is met.\n        IInterchainApp(receivingApp).appReceive();\n    }\n\n    // TODO: Seperate out into utils\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) public pure returns (address) {\n        return address(uint160(uint256(_bytes32)));\n    }\n\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertAddressToBytes32(address _address) public pure returns (bytes32) {\n        return bytes32(uint256(uint160(_address)));\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xde9ba9a1fab8f472722d15529c3c367c908a754e2b8b16cf129a40c68f711488\",\"urls\":[\"bzz-raw://8d38a483dab4e49fcdc833f8d775ab9d496da5efb1a8f391507e73aef22f7aae\",\"dweb:/ipfs/QmRUWXQQ7NNGgBcpWnztcKmege2sJegg6upR8tKUzHrKCd\"]}},\"version\":1}"},"hashes":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"solidity/InterchainClientV1.sol:TypeCasts":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201e76a279b7c07b2463caa88767f3638dfa82f250b1103daf460e133cf7d71dc364736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201e76a279b7c07b2463caa88767f3638dfa82f250b1103daf460e133cf7d71dc364736f6c63430008140033","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.20;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingModules() external view returns (address[] memory);\n\n    function getRequiredResponses() external view returns (uint256);\n\n    function getOptimisticTimePeriod() external view returns (uint64);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive() external;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param message The message being sent.\n     * @param srcModules The source modules involved in the message sending.\n     */\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * @param transactionID The ID of the transaction being executed.\n     * @param transaction The transaction data.\n     */\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) external;\n\n    /**\n     * @notice Converts a bytes32 value to an address.\n     * @dev Useful for converting blockchain-specific identifiers to Ethereum addresses.\n     * @param _bytes32 The bytes32 value to convert.\n     * @return address The address obtained from the bytes32 value.\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) external pure returns (address);\n\n    /**\n     * @notice Converts an address to a bytes32 value.\n     * @dev Useful for converting Ethereum addresses to blockchain-specific identifiers.\n     * @param _address The address to convert.\n     * @return bytes32 The bytes32 representation of the address.\n     */\n    function convertAddressToBytes32(address _address) external pure returns (bytes32);\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase\n/// @param srcChainId   The chain id of the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param writerNonce  The nonce of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    bytes32 srcWriter;\n    uint256 writerNonce;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param srcWriter    The address of the writer on the local chain\n    /// @param writerNonce  The nonce of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        address srcWriter,\n        uint256 writerNonce,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            srcWriter: TypeCasts.addressToBytes32(srcWriter),\n            writerNonce: writerNonce,\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryId(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.srcWriter, entry.writerNonce));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param dataHash     The hash of the data written on the source chain\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 dataHash;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingDataHash, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(address writer, uint256 writerNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntry(bytes32 dataHash) external returns (uint256 writerNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param writer        The address of the writer on the source chain\n    /// @param writerNonce   The nonce of the writer on the source chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(\n        uint256 destChainId,\n        address writer,\n        uint256 writerNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return writerNonce The writer-specific nonce of the written entry\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 writerNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param writer       The address of the writer on this chain\n    /// @param writerNonce  The nonce of the writer's entry on this chain\n    function getEntry(address writer, uint256 writerNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the writer on this chain.\n    /// @param writer       The address of the writer on this chain\n    function getWriterNonce(address writer) external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, IInterchainClientV1 {\n    uint64 public clientNonce;\n    address public interchainDB;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) linkedClients;\n\n    // TODO: Add permissioning\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public {\n        linkedClients[chainId] = client;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    /**\n     * @notice Emitted when an interchain transaction is sent.\n     */\n    event InterchainTransactionSent(\n        bytes32 srcSender,\n        uint256 srcChainId,\n        bytes32 indexed dstReceiver,\n        uint256 indexed dstChainId,\n        bytes message,\n        uint64 nonce,\n        bytes32 indexed transactionId,\n        uint256 dbWriterNonce\n    );\n\n    /**\n     * @dev Represents an interchain transaction.\n     */\n    struct InterchainTransaction {\n        bytes32 srcSender;\n        uint256 srcChainId;\n        bytes32 dstReceiver;\n        uint256 dstChainId;\n        bytes message;\n        uint64 nonce;\n        bytes32 transactionId;\n        uint256 dbWriterNonce;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // TODO: Customizable Gas Limit for Execution\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        bytes32 receiver,\n        uint256 dstChainId,\n        bytes calldata message,\n        address[] calldata srcModules\n    )\n        public\n        payable\n    {\n        uint256 totalModuleFees = msg.value;\n        bytes32 sender = convertAddressToBytes32(msg.sender);\n        bytes32 transactionID = keccak256(abi.encode(sender, block.chainid, receiver, dstChainId, message, clientNonce));\n\n        uint256 dbWriterNonce = IInterchainDB(interchainDB).writeEntryWithVerification{value: totalModuleFees}(\n            dstChainId, transactionID, srcModules\n        );\n\n        emit InterchainTransactionSent(\n            sender, block.chainid, receiver, dstChainId, message, clientNonce, transactionID, dbWriterNonce\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    function isExecutable(bytes calldata transaction) public view returns (bool) {\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        if (icTx.transactionId == keccak256(reconstructedID)) {\n            return false;\n        }\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n    uint256[] memory moduleResponseTimestamps = new uint256[](\n        approvedDstModules.length\n        );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        if (validResponses \u003e= appRequiredResponses) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // function _getValidResponses(address[] memory approvedModules, InterchainEntry memory icEntry) internal view returns (uint256) {\n    //     uint256 validResponses = 0;\n    //     for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n    //         uint256 moduleResponseTimestamp = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n    //         if (moduleResponseTimestamp + optimisticTimePeriod \u003e= block.timestamp) {\n    //             validResponses++;\n    //         }\n    //     }\n    //     return validResponses;\n    // }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(bytes32 transactionID, bytes calldata transaction) public {\n        // Steps to verify:\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        // 2. Verify the entry hash vs bytes calldata provided\n        // 3. Check receiver's app dstModule configuration\n        // 4. Check receiver app's optimistic time period\n        // 5. Read module entry's based on receiver app dstModule config\n        // 6. Confirm module threshold is met\n        // 7. Check optimistic threshold set on app config\n        // 8. Execute the transaction, is optimistic period is met.\n\n        InterchainTransaction memory icTx = abi.decode(transaction, (InterchainTransaction));\n\n        // 1. Call icDB.getEntry(linkedClients.srcChainId, transaction.dbWriterNonce)\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            srcWriter: linkedClients[icTx.srcChainId],\n            writerNonce: icTx.dbWriterNonce,\n            dataHash: icTx.transactionId\n        });\n\n        bytes memory reconstructedID =\n            abi.encode(icTx.srcSender, icTx.srcChainId, icTx.dstReceiver, icTx.dstChainId, icTx.message, icTx.nonce);\n\n        // 2. Verify the provided TX ID == constructed TX data\n        require(icTx.transactionId == keccak256(reconstructedID), \"Invalid transaction ID\");\n\n        address receivingApp = convertBytes32ToAddress(icTx.dstReceiver);\n        // 3. Check receiver's app dstModule configuration\n        address[] memory approvedDstModules = IInterchainApp(receivingApp).getReceivingModules();\n\n        uint256 appRequiredResponses = IInterchainApp(receivingApp).getRequiredResponses();\n\n        // 4. Check receiver app's optimistic time period\n        uint256 optimisticTimePeriod = IInterchainApp(receivingApp).getOptimisticTimePeriod();\n\n        // 5. Read module entry's based on receiver app dstModule config\n        uint256[] memory moduleResponseTimestamps = new uint256[](\n      approvedDstModules.length\n    );\n\n        for (uint256 i = 0; i \u003c approvedDstModules.length; i++) {\n            moduleResponseTimestamps[i] = IInterchainDB(interchainDB).readEntry(approvedDstModules[i], icEntry);\n        }\n        // 6. Confirm module threshold is met\n        uint256 validResponses = 0;\n\n        for (uint256 i = 0; i \u003c moduleResponseTimestamps.length; i++) {\n            if (moduleResponseTimestamps[i] + optimisticTimePeriod \u003e= block.timestamp) {\n                validResponses++;\n            }\n        }\n\n        require(validResponses \u003e= appRequiredResponses, \"Not enough valid responses to meet the threshold\");\n\n        // 8. Execute the transaction, is optimistic period \u0026 valid responses is met.\n        IInterchainApp(receivingApp).appReceive();\n    }\n\n    // TODO: Seperate out into utils\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertBytes32ToAddress(bytes32 _bytes32) public pure returns (address) {\n        return address(uint160(uint256(_bytes32)));\n    }\n\n    /**\n     * @inheritdoc IInterchainClientV1\n     */\n    function convertAddressToBytes32(address _address) public pure returns (bytes32) {\n        return bytes32(uint256(uint160(_address)));\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"3443:280:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;3443:280:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"3443:280:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"TypeCasts\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xde9ba9a1fab8f472722d15529c3c367c908a754e2b8b16cf129a40c68f711488\",\"urls\":[\"bzz-raw://8d38a483dab4e49fcdc833f8d775ab9d496da5efb1a8f391507e73aef22f7aae\",\"dweb:/ipfs/QmRUWXQQ7NNGgBcpWnztcKmege2sJegg6upR8tKUzHrKCd\"]}},\"version\":1}"},"hashes":{}}}