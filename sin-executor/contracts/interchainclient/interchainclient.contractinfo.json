{"solidity/InterchainClientV1.sol:AppConfigLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df2ade007599b969d91296fcb9b6d6877480a99fbd94de7ba34860921a3f88ca64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df2ade007599b969d91296fcb9b6d6877480a99fbd94de7ba34860921a3f88ca64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"9699:2072:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;9699:2072:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"9699:2072:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"AppConfigLib__IncorrectVersion","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"AppConfigLib__IncorrectVersion\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"AppConfigLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:Context":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:IExecutionFees":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"addExecutionFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claimExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"getAccumulatedRewards","outputs":[{"internalType":"uint256","name":"accumulated","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"getUnclaimedRewards","outputs":[{"internalType":"uint256","name":"unclaimed","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"recordExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"addExecutionFee(uint256,bytes32)":{"notice":"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions."},"claimExecutionFees()":{"notice":"Allows the executor to claim their unclaimed rewards."},"getAccumulatedRewards(address)":{"notice":"Get the accumulated rewards for an executor."},"getUnclaimedRewards(address)":{"notice":"Get the unclaimed rewards for an executor."},"recordExecutor(uint256,bytes32,address)":{"notice":"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor."}},"version":1},"developerDoc":{"kind":"dev","methods":{"addExecutionFee(uint256,bytes32)":{"details":"Will revert if the executor is already recorded for the transaction.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to add the execution fee to."}},"claimExecutionFees()":{"details":"Will revert if the executor has no unclaimed rewards."},"getAccumulatedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"getUnclaimedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"recordExecutor(uint256,bytes32,address)":{"details":"Could only be called by the Recorder.","params":{"dstChainId":"The chain id of the destination chain.","executor":"The address of the executor who completed the transaction.","transactionId":"The id of the transaction to record the executor for."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"addExecutionFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"getAccumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"getUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"recordExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addExecutionFee(uint256,bytes32)\":{\"details\":\"Will revert if the executor is already recorded for the transaction.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to add the execution fee to.\"}},\"claimExecutionFees()\":{\"details\":\"Will revert if the executor has no unclaimed rewards.\"},\"getAccumulatedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"getUnclaimedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"recordExecutor(uint256,bytes32,address)\":{\"details\":\"Could only be called by the Recorder.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executor\":\"The address of the executor who completed the transaction.\",\"transactionId\":\"The id of the transaction to record the executor for.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addExecutionFee(uint256,bytes32)\":{\"notice\":\"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions.\"},\"claimExecutionFees()\":{\"notice\":\"Allows the executor to claim their unclaimed rewards.\"},\"getAccumulatedRewards(address)\":{\"notice\":\"Get the accumulated rewards for an executor.\"},\"getUnclaimedRewards(address)\":{\"notice\":\"Get the unclaimed rewards for an executor.\"},\"recordExecutor(uint256,bytes32,address)\":{\"notice\":\"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IExecutionFees\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{"addExecutionFee(uint256,bytes32)":"ffecec7e","claimExecutionFees()":"10886ac4","getAccumulatedRewards(address)":"5ee09669","getUnclaimedRewards(address)":"69a69e29","recordExecutor(uint256,bytes32,address)":"0676b706"}},"solidity/InterchainClientV1.sol:IExecutionService":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"getExecutionFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint256","name":"executionFee","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"requestExecution","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"getExecutionFee(uint256,uint256,bytes)":{"notice":"Get the execution fee for executing an Interchain Transaction on a remote chain."},"requestExecution(uint256,uint256,bytes32,uint256,bytes)":{"notice":"Request the execution of an Interchain Transaction on a remote chain. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)` Once the execution is confirmed on the source chain, the off-chain actor will be able to claim `executionFee` in the ExecutionFees contract."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getExecutionFee(uint256,uint256,bytes)":{"params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"requestExecution(uint256,uint256,bytes32,uint256,bytes)":{"details":"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.","params":{"dstChainId":"The chain id of the destination chain.","executionFee":"The fee paid for the execution.","options":"The options to use for the execution.","transactionId":"The id of the transaction to execute.","txPayloadSize":"The size of the transaction payload to use for the execution."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"getExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"requestExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getExecutionFee(uint256,uint256,bytes)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"requestExecution(uint256,uint256,bytes32,uint256,bytes)\":{\"details\":\"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executionFee\":\"The fee paid for the execution.\",\"options\":\"The options to use for the execution.\",\"transactionId\":\"The id of the transaction to execute.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExecutionFee(uint256,uint256,bytes)\":{\"notice\":\"Get the execution fee for executing an Interchain Transaction on a remote chain.\"},\"requestExecution(uint256,uint256,bytes32,uint256,bytes)\":{\"notice\":\"Request the execution of an Interchain Transaction on a remote chain. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)` Once the execution is confirmed on the source chain, the off-chain actor will be able to claim `executionFee` in the ExecutionFees contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IExecutionService\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{"getExecutionFee(uint256,uint256,bytes)":"c473e7e8","requestExecution(uint256,uint256,bytes32,uint256,bytes)":"e4e06522"}},"solidity/InterchainClientV1.sol:IInterchainApp":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"appReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainID","type":"uint64"}],"name":"getLinkedIApp","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReceivingConfig","outputs":[{"internalType":"bytes","name":"appConfig","type":"bytes"},{"internalType":"address[]","name":"modules","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSendingModules","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"send","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"chainIDs","type":"uint64[]"},{"internalType":"address[]","name":"linkedIApps","type":"address[]"},{"internalType":"address[]","name":"sendingModules","type":"address[]"},{"internalType":"address[]","name":"receivingModules","type":"address[]"},{"internalType":"uint256","name":"requiredResponses","type":"uint256"},{"internalType":"uint64","name":"optimisticTimePeriod","type":"uint64"}],"name":"setAppConfig","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"appReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainID\",\"type\":\"uint64\"}],\"name\":\"getLinkedIApp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceivingConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"appConfig\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSendingModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"chainIDs\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"linkedIApps\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sendingModules\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivingModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"requiredResponses\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"optimisticTimePeriod\",\"type\":\"uint64\"}],\"name\":\"setAppConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainApp\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{"appReceive(uint256,bytes32,uint64,bytes)":"d1eb8bde","getLinkedIApp(uint64)":"bfc849ee","getReceivingConfig()":"287bc057","getSendingModules()":"ea13398f","send(bytes32,uint256,bytes)":"e1ef3b3f","setAppConfig(uint64[],address[],address[],address[],uint256,uint64)":"dd34f56a"}},"solidity/InterchainClientV1.sol:IInterchainClientV1":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"actual","type":"uint256"},{"internalType":"uint256","name":"expected","type":"uint256"}],"name":"InterchainClientV1__IncorrectMsgValue","type":"error"},{"inputs":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"transaction","type":"bytes"}],"name":"interchainExecute","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"interchainSend","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"transaction","type":"bytes"}],"name":"isExecutable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executionFees_","type":"address"}],"name":"setExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_interchainDB","type":"address"}],"name":"setInterchainDB","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"setLinkedClient","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"interchainExecute(uint256,bytes)":{"notice":"Executes a transaction that has been sent via the Interchain."},"interchainSend(uint256,bytes32,address,address[],bytes,bytes)":{"notice":"Sends a message to another chain via the Interchain Communication Protocol."},"isExecutable(bytes)":{"notice":"Checks if a transaction is executable."},"setExecutionFees(address)":{"notice":"Sets the address of the ExecutionFees contract."},"setInterchainDB(address)":{"notice":"Sets the address of the InterchainDB contract."},"setLinkedClient(uint256,bytes32)":{"notice":"Sets the linked client for a specific chain ID."}},"version":1},"developerDoc":{"kind":"dev","methods":{"interchainExecute(uint256,bytes)":{"details":"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.","params":{"gasLimit":"The gas limit to use for the execution.","transaction":"The transaction data."}},"interchainSend(uint256,bytes32,address,address[],bytes,bytes)":{"details":"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.","params":{"dstChainId":"The chain ID of the destination chain.","message":"The message being sent.","options":"Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.","receiver":"The address of the receiver on the destination chain.","srcExecutionService":"The address of the execution service to use for the message.","srcModules":"The source modules involved in the message sending."}},"isExecutable(bytes)":{"details":"Determines if a transaction meets the criteria to be executed based on: - If approved modules have written to the InterchainDB - If the threshold of approved modules have been met - If the optimistic window has passed for all modules","params":{"transaction":"The InterchainTransaction struct to be checked."},"returns":{"_0":"bool Returns true if the transaction is executable, false otherwise."}},"setExecutionFees(address)":{"details":"Only callable by the contract owner or an authorized account.","params":{"executionFees_":"The address of the ExecutionFees contract."}},"setInterchainDB(address)":{"details":"Only callable by the contract owner or an authorized account.","params":{"_interchainDB":"The address of the InterchainDB contract."}},"setLinkedClient(uint256,bytes32)":{"details":"Stores the address of the linked client in a mapping with the chain ID as the key.","params":{"chainId":"The chain ID for which the client is being set.","client":"The address of the client being linked."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__IncorrectMsgValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"}],\"name\":\"interchainExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"interchainSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"}],\"name\":\"isExecutable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executionFees_\",\"type\":\"address\"}],\"name\":\"setExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interchainDB\",\"type\":\"address\"}],\"name\":\"setInterchainDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"setLinkedClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"interchainExecute(uint256,bytes)\":{\"details\":\"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.\",\"params\":{\"gasLimit\":\"The gas limit to use for the execution.\",\"transaction\":\"The transaction data.\"}},\"interchainSend(uint256,bytes32,address,address[],bytes,bytes)\":{\"details\":\"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.\",\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"message\":\"The message being sent.\",\"options\":\"Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\",\"receiver\":\"The address of the receiver on the destination chain.\",\"srcExecutionService\":\"The address of the execution service to use for the message.\",\"srcModules\":\"The source modules involved in the message sending.\"}},\"isExecutable(bytes)\":{\"details\":\"Determines if a transaction meets the criteria to be executed based on: - If approved modules have written to the InterchainDB - If the threshold of approved modules have been met - If the optimistic window has passed for all modules\",\"params\":{\"transaction\":\"The InterchainTransaction struct to be checked.\"},\"returns\":{\"_0\":\"bool Returns true if the transaction is executable, false otherwise.\"}},\"setExecutionFees(address)\":{\"details\":\"Only callable by the contract owner or an authorized account.\",\"params\":{\"executionFees_\":\"The address of the ExecutionFees contract.\"}},\"setInterchainDB(address)\":{\"details\":\"Only callable by the contract owner or an authorized account.\",\"params\":{\"_interchainDB\":\"The address of the InterchainDB contract.\"}},\"setLinkedClient(uint256,bytes32)\":{\"details\":\"Stores the address of the linked client in a mapping with the chain ID as the key.\",\"params\":{\"chainId\":\"The chain ID for which the client is being set.\",\"client\":\"The address of the client being linked.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"interchainExecute(uint256,bytes)\":{\"notice\":\"Executes a transaction that has been sent via the Interchain.\"},\"interchainSend(uint256,bytes32,address,address[],bytes,bytes)\":{\"notice\":\"Sends a message to another chain via the Interchain Communication Protocol.\"},\"isExecutable(bytes)\":{\"notice\":\"Checks if a transaction is executable.\"},\"setExecutionFees(address)\":{\"notice\":\"Sets the address of the ExecutionFees contract.\"},\"setInterchainDB(address)\":{\"notice\":\"Sets the address of the InterchainDB contract.\"},\"setLinkedClient(uint256,bytes32)\":{\"notice\":\"Sets the linked client for a specific chain ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainClientV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{"interchainExecute(uint256,bytes)":"80efe777","interchainSend(uint256,bytes32,address,address[],bytes,bytes)":"98939d28","isExecutable(bytes)":"31afa7de","setExecutionFees(address)":"3dc68b87","setInterchainDB(address)":"b7ce2078","setLinkedClient(uint256,bytes32)":"f34234c8"}},"solidity/InterchainClientV1.sol:IInterchainDB":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"bytes32","name":"existingEntryValue","type":"bytes32"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"newEntry","type":"tuple"}],"name":"InterchainDB__ConflictingEntries","type":"error"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"InterchainDB__EntryDoesNotExist","type":"error"},{"inputs":[{"internalType":"uint256","name":"actualFee","type":"uint256"},{"internalType":"uint256","name":"expectedFee","type":"uint256"}],"name":"InterchainDB__IncorrectFeeAmount","type":"error"},{"inputs":[],"name":"InterchainDB__NoModulesSpecified","type":"error"},{"inputs":[],"name":"InterchainDB__SameChainId","type":"error"},{"inputs":[],"name":"getDBNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getEntry","outputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"destChainId","type":"uint256"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"getInterchainFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dstModule","type":"address"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"entry","type":"tuple"}],"name":"readEntry","outputs":[{"internalType":"uint256","name":"moduleVerifiedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"destChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"requestVerification","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"entry","type":"tuple"}],"name":"verifyEntry","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"writeEntry","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"destChainId","type":"uint256"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"writeEntryWithVerification","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{"getDBNonce()":{"notice":"Get the nonce of the database."},"getEntry(uint256)":{"notice":"Get the Interchain Entry by the writer and the writer nonce."},"getInterchainFee(uint256,address[])":{"notice":"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules."},"readEntry(address,(uint256,uint256,bytes32,bytes32))":{"notice":"Read the data written on specific source chain by a specific writer, and verify it on the destination chain using the provided Interchain Module. Note: returned zero value indicates that the module has not verified the entry."},"requestVerification(uint256,uint256,address[])":{"notice":"Request the given Interchain Modules to verify the already written entry on the destination chain. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any entry."},"verifyEntry((uint256,uint256,bytes32,bytes32))":{"notice":"Allows the Interchain Module to verify the entry coming from a remote source chain."},"writeEntry(bytes32)":{"notice":"Write data to the Interchain DataBase as a new entry. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `verifyEntry` to ensure that the entry is available for reading on the destination chain."},"writeEntryWithVerification(uint256,bytes32,address[])":{"notice":"Write data to the Interchain DataBase, and request the given Interchain Modules to verify it on the destination chain. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: additional verification for the same entry could be later done using `requestVerification` by providing the returned `dbNonce`."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getEntry(uint256)":{"details":"Will revert if the entry with the given nonce does not exist.","params":{"dbNonce":"The database nonce of the written entry on this chain"}},"getInterchainFee(uint256,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"destChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"readEntry(address,(uint256,uint256,bytes32,bytes32))":{"params":{"dstModule":"The destination chain addresses of the Interchain Modules to use for verification","entry":"The Interchain Entry to read"},"returns":{"moduleVerifiedAt":"  The block timestamp at which the entry was verified by the module,                             or zero if the module has not verified the entry."}},"requestVerification(uint256,uint256,address[])":{"details":"Will revert if the entry with the given nonce does not exist.","params":{"dbNonce":"The database nonce of the written entry on this chain","destChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"verifyEntry((uint256,uint256,bytes32,bytes32))":{"params":{"entry":"The Interchain Entry to confirm"}},"writeEntry(bytes32)":{"params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry"},"returns":{"dbNonce":"    The database nonce of the written entry on this chain"}},"writeEntryWithVerification(uint256,bytes32,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry","destChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"},"returns":{"dbNonce":"    The database nonce of the written entry on this chain"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"existingEntryValue\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"newEntry\",\"type\":\"tuple\"}],\"name\":\"InterchainDB__ConflictingEntries\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__EntryDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedFee\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__IncorrectFeeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainDB__NoModulesSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainDB__SameChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getDBNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getEntry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"getInterchainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dstModule\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"entry\",\"type\":\"tuple\"}],\"name\":\"readEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleVerifiedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"requestVerification\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"entry\",\"type\":\"tuple\"}],\"name\":\"verifyEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"writeEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"writeEntryWithVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getEntry(uint256)\":{\"details\":\"Will revert if the entry with the given nonce does not exist.\",\"params\":{\"dbNonce\":\"The database nonce of the written entry on this chain\"}},\"getInterchainFee(uint256,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"destChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"readEntry(address,(uint256,uint256,bytes32,bytes32))\":{\"params\":{\"dstModule\":\"The destination chain addresses of the Interchain Modules to use for verification\",\"entry\":\"The Interchain Entry to read\"},\"returns\":{\"moduleVerifiedAt\":\"  The block timestamp at which the entry was verified by the module,                             or zero if the module has not verified the entry.\"}},\"requestVerification(uint256,uint256,address[])\":{\"details\":\"Will revert if the entry with the given nonce does not exist.\",\"params\":{\"dbNonce\":\"The database nonce of the written entry on this chain\",\"destChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"verifyEntry((uint256,uint256,bytes32,bytes32))\":{\"params\":{\"entry\":\"The Interchain Entry to confirm\"}},\"writeEntry(bytes32)\":{\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\"},\"returns\":{\"dbNonce\":\"    The database nonce of the written entry on this chain\"}},\"writeEntryWithVerification(uint256,bytes32,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\",\"destChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"},\"returns\":{\"dbNonce\":\"    The database nonce of the written entry on this chain\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDBNonce()\":{\"notice\":\"Get the nonce of the database.\"},\"getEntry(uint256)\":{\"notice\":\"Get the Interchain Entry by the writer and the writer nonce.\"},\"getInterchainFee(uint256,address[])\":{\"notice\":\"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules.\"},\"readEntry(address,(uint256,uint256,bytes32,bytes32))\":{\"notice\":\"Read the data written on specific source chain by a specific writer, and verify it on the destination chain using the provided Interchain Module. Note: returned zero value indicates that the module has not verified the entry.\"},\"requestVerification(uint256,uint256,address[])\":{\"notice\":\"Request the given Interchain Modules to verify the already written entry on the destination chain. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any entry.\"},\"verifyEntry((uint256,uint256,bytes32,bytes32))\":{\"notice\":\"Allows the Interchain Module to verify the entry coming from a remote source chain.\"},\"writeEntry(bytes32)\":{\"notice\":\"Write data to the Interchain DataBase as a new entry. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\"},\"writeEntryWithVerification(uint256,bytes32,address[])\":{\"notice\":\"Write data to the Interchain DataBase, and request the given Interchain Modules to verify it on the destination chain. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: additional verification for the same entry could be later done using `requestVerification` by providing the returned `dbNonce`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainDB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{"getDBNonce()":"f338140e","getEntry(uint256)":"bae78d7b","getInterchainFee(uint256,address[])":"fc7686ec","readEntry(address,(uint256,uint256,bytes32,bytes32))":"a9c9cff1","requestVerification(uint256,uint256,address[])":"81ab5b5a","verifyEntry((uint256,uint256,bytes32,bytes32))":"54941dfa","writeEntry(bytes32)":"2ad8c706","writeEntryWithVerification(uint256,bytes32,address[])":"67c769af"}},"solidity/InterchainClientV1.sol:InterchainClientV1":{"code":"0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611edb806100a56000396000f3fe6080604052600436106100f35760003560e01c806380efe7771161008a578063b7ce207811610059578063b7ce20781461031e578063d5e788a01461033e578063f2fde38b14610379578063f34234c81461039957600080fd5b806380efe7771461029d5780638691d34c146102b05780638da5cb5b146102e057806398939d281461030b57600080fd5b80634d84cc11116100c65780634d84cc11146101f3578063715018a6146102205780637268b08f146102355780637341eaf91461027057600080fd5b80630d898416146100f85780630e785ce01461014f57806331afa7de146101a15780633dc68b87146101d1575b600080fd5b34801561010457600080fd5b506000546101319074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b34801561015b57600080fd5b5060015461017c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610146565b3480156101ad57600080fd5b506101c16101bc36600461142c565b6103b9565b6040519015158152602001610146565b3480156101dd57600080fd5b506101f16101ec366004611490565b61041f565b005b3480156101ff57600080fd5b5061021361020e3660046115e2565b61046e565b6040516101469190611707565b34801561022c57600080fd5b506101f1610497565b34801561024157600080fd5b5061026261025036600461171a565b60046020526000908152604090205481565b604051908152602001610146565b34801561027c57600080fd5b5060025461017c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101f16102ab366004611733565b6104ab565b3480156102bc57600080fd5b506101c16102cb36600461171a565b60036020526000908152604090205460ff1681565b3480156102ec57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661017c565b6101f161031936600461177f565b6106fd565b34801561032a57600080fd5b506101f1610339366004611490565b610bb4565b34801561034a57600080fd5b5061035e610359366004611872565b610c03565b60408051825181526020928301519281019290925201610146565b34801561038557600080fd5b506101f1610394366004611490565b610c20565b3480156103a557600080fd5b506101f16103b43660046118a7565b610c84565b6000806103fb84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c9e92505050565b9050600061040882610d0a565b90506104148183610d3a565b925050505b92915050565b610427610ed0565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60608160405160200161048191906118c9565b6040516020818303038152906040529050919050565b61049f610ed0565b6104a96000610f23565b565b60006104ec83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c9e92505050565b905060006104f982610d0a565b90506105058183610d3a565b610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5472616e73616374696f6e206973206e6f742065786563757461626c6500000060448201526064015b60405180910390fd5b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560c08301516105b590610f98565b9050806020015134146106035760208101516040517f2b3610250000000000000000000000000000000000000000000000000000000081523460048201526024810191909152604401610567565b805186101561061157805195505b606083015173ffffffffffffffffffffffffffffffffffffffff1663d1eb8bde87348660000151876020015188608001518960e001516040518763ffffffff1660e01b81526004016106669493929190611954565b6000604051808303818589803b15801561067f57600080fd5b5088f1158015610693573d6000803e3d6000fd5b50505060a08601518651602088015160608901516040519396508895507fdb272c7b2f65161c0573b8b7c21bc3e25cf53bcd8c1524fb3fb78bac8c7df94e94506106ed939283526020830191909152604082015260600190565b60405180910390a3505050505050565b6001546040517ffc7686ec00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063fc7686ec90610758908d908b908b906004016119d9565b602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906119fc565b905060006107a78234611a44565b905060006108da338d8d600060149054906101000a900467ffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f338140e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610835573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085991906119fc565b8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061101c92505050565b905060006108e782610d0a565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166367c769af858460400151848e8e6040518663ffffffff1660e01b815260040161094f9493929190611a57565b60206040518083038185885af115801561096d573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061099291906119fc565b8260a00151146109a4576109a4611a77565b73ffffffffffffffffffffffffffffffffffffffff8b1615610a56578a73ffffffffffffffffffffffffffffffffffffffff1663e4e065228e846040516020016109ee91906118c9565b6040516020818303038152906040525184878d8d6040518763ffffffff1660e01b8152600401610a2396959493929190611aa6565b600060405180830381600087803b158015610a3d57600080fd5b505af1158015610a51573d6000803e3d6000fd5b505050505b60025460408381015190517fffecec7e00000000000000000000000000000000000000000000000000000000815260048101919091526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063ffecec7e9085906044016000604051808303818588803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050508160a00151817f17199fd72cefca8fee1a37066b73936ae3142a665a4d0dd5e9f216529471907e84608001518560400151866020015187606001518a8a8a60c001518b60e00151604051610b44989796959493929190611af1565b60405180910390a36000805474010000000000000000000000000000000000000000900467ffffffffffffffff16906014610b7e83611b56565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050505050505050505050565b610bbc610ed0565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080518082019091526000808252602082015261041982610f98565b610c28610ed0565b73ffffffffffffffffffffffffffffffffffffffff8116610c78576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610567565b610c8181610f23565b50565b610c8c610ed0565b60009182526004602052604090912055565b610cf660405180610100016040528060008152602001600080191681526020016000815260200160008019168152602001600067ffffffffffffffff1681526020016000815260200160608152602001606081525090565b818060200190518101906104199190611bcd565b600081604051602001610d1d91906118c9565b604051602081830303815290604052805190602001209050919050565b60008281526003602052604081205460ff1615610db3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5472616e73616374696f6e20616c7265616479206578656375746564000000006044820152606401610567565b60006040518060800160405280846000015181526020018460a00151815260200160046000866000015181526020019081526020016000205481526020018581525090506000806000610e0f610e0a876060015190565b6110e1565b9250925092506000610e218286611180565b90506000610e2f8285611300565b905084811015610ec1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4e6f7420656e6f7567682076616c696420726573706f6e73657320746f206d6560448201527f657420746865207468726573686f6c64000000000000000000000000000000006064820152608401610567565b50600198975050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104a9576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610567565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805180820190915260008082526020820152600080610fb884611359565b9092509050600160ff83161015611000576040517fbd91a21500000000000000000000000000000000000000000000000000000000815260ff83166004820152602401610567565b808060200190518101906110149190611ce2565b949350505050565b61107460405180610100016040528060008152602001600080191681526020016000815260200160008019168152602001600067ffffffffffffffff1681526020016000815260200160608152602001606081525090565b6040518061010001604052804681526020016110a38a73ffffffffffffffffffffffffffffffffffffffff1690565b81526020018881526020018781526020018667ffffffffffffffff168152602001858152602001848152602001838152509050979650505050505050565b6000806060808473ffffffffffffffffffffffffffffffffffffffff1663287bc0576040518163ffffffff1660e01b8152600401600060405180830381865afa158015611132573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115a9190810190611cfe565b9250905060006111698261137b565b805160209091015190979096509294509192505050565b60606000835167ffffffffffffffff81111561119e5761119e6114b4565b6040519080825280602002602001820160405280156111c7578160200160208202803683370190505b50905060005b84518110156112f857600154855173ffffffffffffffffffffffffffffffffffffffff9091169063a9c9cff19087908490811061120c5761120c611dd4565b602090810291909101810151604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152885160248301529188015160448201529087015160648201526060870151608482015260a401602060405180830381865afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c991906119fc565b8282815181106112db576112db611dd4565b6020908102919091010152806112f081611e03565b9150506111cd565b509392505050565b600080805b84518110156112f857428486838151811061132257611322611dd4565b60200260200101516113349190611e3b565b11611347578161134381611e03565b9250505b8061135181611e03565b915050611305565b60006060828060200190518101906113719190611e4e565b9094909350915050565b604080518082019091526000808252602082015260008061139b84611359565b9092509050600160ff83161015611000576040517fc3e3b66600000000000000000000000000000000000000000000000000000000815260ff83166004820152602401610567565b60008083601f8401126113f557600080fd5b50813567ffffffffffffffff81111561140d57600080fd5b60208301915083602082850101111561142557600080fd5b9250929050565b6000806020838503121561143f57600080fd5b823567ffffffffffffffff81111561145657600080fd5b611462858286016113e3565b90969095509350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610c8157600080fd5b6000602082840312156114a257600080fd5b81356114ad8161146e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611507576115076114b4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611536576115366114b4565b604052919050565b67ffffffffffffffff81168114610c8157600080fd5b803561155f8161153e565b919050565b600067ffffffffffffffff82111561157e5761157e6114b4565b50601f01601f191660200190565b600082601f83011261159d57600080fd5b81356115b06115ab82611564565b61150d565b8181528460208386010111156115c557600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156115f457600080fd5b813567ffffffffffffffff8082111561160c57600080fd5b90830190610100828603121561162157600080fd5b6116296114e3565b8235815260208301356020820152604083013560408201526060830135606082015261165760808401611554565b608082015260a083013560a082015260c08301358281111561167857600080fd5b6116848782860161158c565b60c08301525060e08301358281111561169c57600080fd5b6116a88782860161158c565b60e08301525095945050505050565b60005b838110156116d25781810151838201526020016116ba565b50506000910152565b600081518084526116f38160208601602086016116b7565b601f01601f19169290920160200192915050565b6020815260006114ad60208301846116db565b60006020828403121561172c57600080fd5b5035919050565b60008060006040848603121561174857600080fd5b83359250602084013567ffffffffffffffff81111561176657600080fd5b611772868287016113e3565b9497909650939450505050565b600080600080600080600080600060c08a8c03121561179d57600080fd5b8935985060208a0135975060408a01356117b68161146e565b965060608a013567ffffffffffffffff808211156117d357600080fd5b818c0191508c601f8301126117e757600080fd5b8135818111156117f657600080fd5b8d60208260051b850101111561180b57600080fd5b6020830198508097505060808c013591508082111561182957600080fd5b6118358d838e016113e3565b909650945060a08c013591508082111561184e57600080fd5b5061185b8c828d016113e3565b915080935050809150509295985092959850929598565b60006020828403121561188457600080fd5b813567ffffffffffffffff81111561189b57600080fd5b6110148482850161158c565b600080604083850312156118ba57600080fd5b50508035926020909101359150565b602081528151602082015260208201516040820152604082015160608201526060820151608082015267ffffffffffffffff60808301511660a082015260a082015160c0820152600060c08301516101008060e085015261192e6101208501836116db565b915060e0850151601f19858403018286015261194a83826116db565b9695505050505050565b84815283602082015267ffffffffffffffff8316604082015260806060820152600061194a60808301846116db565b8183526000602080850194508260005b858110156119ce5781356119a68161146e565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611993565b509495945050505050565b8381526040602082015260006119f3604083018486611983565b95945050505050565b600060208284031215611a0e57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561041957610419611a15565b84815283602082015260606040820152600061194a606083018486611983565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b86815285602082015284604082015283606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b600061010067ffffffffffffffff8b1683528960208401528860408401528760608401528660808401528560a08401528060c0840152611b33818401866116db565b905082810360e0840152611b4781856116db565b9b9a5050505050505050505050565b600067ffffffffffffffff808316818103611b7357611b73611a15565b6001019392505050565b805161155f8161153e565b600082601f830112611b9957600080fd5b8151611ba76115ab82611564565b818152846020838601011115611bbc57600080fd5b6110148260208301602087016116b7565b600060208284031215611bdf57600080fd5b815167ffffffffffffffff80821115611bf757600080fd5b908301906101008286031215611c0c57600080fd5b611c146114e3565b82518152602083015160208201526040830151604082015260608301516060820152611c4260808401611b7d565b608082015260a083015160a082015260c083015182811115611c6357600080fd5b611c6f87828601611b88565b60c08301525060e083015182811115611c8757600080fd5b6116a887828601611b88565b600060408284031215611ca557600080fd5b6040516040810181811067ffffffffffffffff82111715611cc857611cc86114b4565b604052825181526020928301519281019290925250919050565b600060408284031215611cf457600080fd5b6114ad8383611c93565b60008060408385031215611d1157600080fd5b825167ffffffffffffffff80821115611d2957600080fd5b611d3586838701611b88565b9350602091508185015181811115611d4c57600080fd5b8501601f81018713611d5d57600080fd5b805182811115611d6f57611d6f6114b4565b8060051b9250611d8084840161150d565b8181529282018401928481019089851115611d9a57600080fd5b928501925b84841015611dc45783519250611db48361146e565b8282529285019290850190611d9f565b8096505050505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e3457611e34611a15565b5060010190565b8082018082111561041957610419611a15565b60008060408385031215611e6157600080fd5b825160ff81168114611e7257600080fd5b602084015190925067ffffffffffffffff811115611e8f57600080fd5b611e9b85828601611b88565b915050925092905056fea26469706673582212203f7b817e961bd708cb060385a647f4fa16a943b45821145f2a012fd4bdb3fac864736f6c63430008140033","runtime-code":"0x6080604052600436106100f35760003560e01c806380efe7771161008a578063b7ce207811610059578063b7ce20781461031e578063d5e788a01461033e578063f2fde38b14610379578063f34234c81461039957600080fd5b806380efe7771461029d5780638691d34c146102b05780638da5cb5b146102e057806398939d281461030b57600080fd5b80634d84cc11116100c65780634d84cc11146101f3578063715018a6146102205780637268b08f146102355780637341eaf91461027057600080fd5b80630d898416146100f85780630e785ce01461014f57806331afa7de146101a15780633dc68b87146101d1575b600080fd5b34801561010457600080fd5b506000546101319074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b34801561015b57600080fd5b5060015461017c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610146565b3480156101ad57600080fd5b506101c16101bc36600461142c565b6103b9565b6040519015158152602001610146565b3480156101dd57600080fd5b506101f16101ec366004611490565b61041f565b005b3480156101ff57600080fd5b5061021361020e3660046115e2565b61046e565b6040516101469190611707565b34801561022c57600080fd5b506101f1610497565b34801561024157600080fd5b5061026261025036600461171a565b60046020526000908152604090205481565b604051908152602001610146565b34801561027c57600080fd5b5060025461017c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101f16102ab366004611733565b6104ab565b3480156102bc57600080fd5b506101c16102cb36600461171a565b60036020526000908152604090205460ff1681565b3480156102ec57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661017c565b6101f161031936600461177f565b6106fd565b34801561032a57600080fd5b506101f1610339366004611490565b610bb4565b34801561034a57600080fd5b5061035e610359366004611872565b610c03565b60408051825181526020928301519281019290925201610146565b34801561038557600080fd5b506101f1610394366004611490565b610c20565b3480156103a557600080fd5b506101f16103b43660046118a7565b610c84565b6000806103fb84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c9e92505050565b9050600061040882610d0a565b90506104148183610d3a565b925050505b92915050565b610427610ed0565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60608160405160200161048191906118c9565b6040516020818303038152906040529050919050565b61049f610ed0565b6104a96000610f23565b565b60006104ec83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c9e92505050565b905060006104f982610d0a565b90506105058183610d3a565b610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5472616e73616374696f6e206973206e6f742065786563757461626c6500000060448201526064015b60405180910390fd5b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560c08301516105b590610f98565b9050806020015134146106035760208101516040517f2b3610250000000000000000000000000000000000000000000000000000000081523460048201526024810191909152604401610567565b805186101561061157805195505b606083015173ffffffffffffffffffffffffffffffffffffffff1663d1eb8bde87348660000151876020015188608001518960e001516040518763ffffffff1660e01b81526004016106669493929190611954565b6000604051808303818589803b15801561067f57600080fd5b5088f1158015610693573d6000803e3d6000fd5b50505060a08601518651602088015160608901516040519396508895507fdb272c7b2f65161c0573b8b7c21bc3e25cf53bcd8c1524fb3fb78bac8c7df94e94506106ed939283526020830191909152604082015260600190565b60405180910390a3505050505050565b6001546040517ffc7686ec00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063fc7686ec90610758908d908b908b906004016119d9565b602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906119fc565b905060006107a78234611a44565b905060006108da338d8d600060149054906101000a900467ffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f338140e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610835573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085991906119fc565b8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061101c92505050565b905060006108e782610d0a565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166367c769af858460400151848e8e6040518663ffffffff1660e01b815260040161094f9493929190611a57565b60206040518083038185885af115801561096d573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061099291906119fc565b8260a00151146109a4576109a4611a77565b73ffffffffffffffffffffffffffffffffffffffff8b1615610a56578a73ffffffffffffffffffffffffffffffffffffffff1663e4e065228e846040516020016109ee91906118c9565b6040516020818303038152906040525184878d8d6040518763ffffffff1660e01b8152600401610a2396959493929190611aa6565b600060405180830381600087803b158015610a3d57600080fd5b505af1158015610a51573d6000803e3d6000fd5b505050505b60025460408381015190517fffecec7e00000000000000000000000000000000000000000000000000000000815260048101919091526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063ffecec7e9085906044016000604051808303818588803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050508160a00151817f17199fd72cefca8fee1a37066b73936ae3142a665a4d0dd5e9f216529471907e84608001518560400151866020015187606001518a8a8a60c001518b60e00151604051610b44989796959493929190611af1565b60405180910390a36000805474010000000000000000000000000000000000000000900467ffffffffffffffff16906014610b7e83611b56565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050505050505050505050565b610bbc610ed0565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080518082019091526000808252602082015261041982610f98565b610c28610ed0565b73ffffffffffffffffffffffffffffffffffffffff8116610c78576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610567565b610c8181610f23565b50565b610c8c610ed0565b60009182526004602052604090912055565b610cf660405180610100016040528060008152602001600080191681526020016000815260200160008019168152602001600067ffffffffffffffff1681526020016000815260200160608152602001606081525090565b818060200190518101906104199190611bcd565b600081604051602001610d1d91906118c9565b604051602081830303815290604052805190602001209050919050565b60008281526003602052604081205460ff1615610db3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5472616e73616374696f6e20616c7265616479206578656375746564000000006044820152606401610567565b60006040518060800160405280846000015181526020018460a00151815260200160046000866000015181526020019081526020016000205481526020018581525090506000806000610e0f610e0a876060015190565b6110e1565b9250925092506000610e218286611180565b90506000610e2f8285611300565b905084811015610ec1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4e6f7420656e6f7567682076616c696420726573706f6e73657320746f206d6560448201527f657420746865207468726573686f6c64000000000000000000000000000000006064820152608401610567565b50600198975050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104a9576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610567565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805180820190915260008082526020820152600080610fb884611359565b9092509050600160ff83161015611000576040517fbd91a21500000000000000000000000000000000000000000000000000000000815260ff83166004820152602401610567565b808060200190518101906110149190611ce2565b949350505050565b61107460405180610100016040528060008152602001600080191681526020016000815260200160008019168152602001600067ffffffffffffffff1681526020016000815260200160608152602001606081525090565b6040518061010001604052804681526020016110a38a73ffffffffffffffffffffffffffffffffffffffff1690565b81526020018881526020018781526020018667ffffffffffffffff168152602001858152602001848152602001838152509050979650505050505050565b6000806060808473ffffffffffffffffffffffffffffffffffffffff1663287bc0576040518163ffffffff1660e01b8152600401600060405180830381865afa158015611132573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115a9190810190611cfe565b9250905060006111698261137b565b805160209091015190979096509294509192505050565b60606000835167ffffffffffffffff81111561119e5761119e6114b4565b6040519080825280602002602001820160405280156111c7578160200160208202803683370190505b50905060005b84518110156112f857600154855173ffffffffffffffffffffffffffffffffffffffff9091169063a9c9cff19087908490811061120c5761120c611dd4565b602090810291909101810151604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152885160248301529188015160448201529087015160648201526060870151608482015260a401602060405180830381865afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c991906119fc565b8282815181106112db576112db611dd4565b6020908102919091010152806112f081611e03565b9150506111cd565b509392505050565b600080805b84518110156112f857428486838151811061132257611322611dd4565b60200260200101516113349190611e3b565b11611347578161134381611e03565b9250505b8061135181611e03565b915050611305565b60006060828060200190518101906113719190611e4e565b9094909350915050565b604080518082019091526000808252602082015260008061139b84611359565b9092509050600160ff83161015611000576040517fc3e3b66600000000000000000000000000000000000000000000000000000000815260ff83166004820152602401610567565b60008083601f8401126113f557600080fd5b50813567ffffffffffffffff81111561140d57600080fd5b60208301915083602082850101111561142557600080fd5b9250929050565b6000806020838503121561143f57600080fd5b823567ffffffffffffffff81111561145657600080fd5b611462858286016113e3565b90969095509350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610c8157600080fd5b6000602082840312156114a257600080fd5b81356114ad8161146e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611507576115076114b4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611536576115366114b4565b604052919050565b67ffffffffffffffff81168114610c8157600080fd5b803561155f8161153e565b919050565b600067ffffffffffffffff82111561157e5761157e6114b4565b50601f01601f191660200190565b600082601f83011261159d57600080fd5b81356115b06115ab82611564565b61150d565b8181528460208386010111156115c557600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156115f457600080fd5b813567ffffffffffffffff8082111561160c57600080fd5b90830190610100828603121561162157600080fd5b6116296114e3565b8235815260208301356020820152604083013560408201526060830135606082015261165760808401611554565b608082015260a083013560a082015260c08301358281111561167857600080fd5b6116848782860161158c565b60c08301525060e08301358281111561169c57600080fd5b6116a88782860161158c565b60e08301525095945050505050565b60005b838110156116d25781810151838201526020016116ba565b50506000910152565b600081518084526116f38160208601602086016116b7565b601f01601f19169290920160200192915050565b6020815260006114ad60208301846116db565b60006020828403121561172c57600080fd5b5035919050565b60008060006040848603121561174857600080fd5b83359250602084013567ffffffffffffffff81111561176657600080fd5b611772868287016113e3565b9497909650939450505050565b600080600080600080600080600060c08a8c03121561179d57600080fd5b8935985060208a0135975060408a01356117b68161146e565b965060608a013567ffffffffffffffff808211156117d357600080fd5b818c0191508c601f8301126117e757600080fd5b8135818111156117f657600080fd5b8d60208260051b850101111561180b57600080fd5b6020830198508097505060808c013591508082111561182957600080fd5b6118358d838e016113e3565b909650945060a08c013591508082111561184e57600080fd5b5061185b8c828d016113e3565b915080935050809150509295985092959850929598565b60006020828403121561188457600080fd5b813567ffffffffffffffff81111561189b57600080fd5b6110148482850161158c565b600080604083850312156118ba57600080fd5b50508035926020909101359150565b602081528151602082015260208201516040820152604082015160608201526060820151608082015267ffffffffffffffff60808301511660a082015260a082015160c0820152600060c08301516101008060e085015261192e6101208501836116db565b915060e0850151601f19858403018286015261194a83826116db565b9695505050505050565b84815283602082015267ffffffffffffffff8316604082015260806060820152600061194a60808301846116db565b8183526000602080850194508260005b858110156119ce5781356119a68161146e565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611993565b509495945050505050565b8381526040602082015260006119f3604083018486611983565b95945050505050565b600060208284031215611a0e57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561041957610419611a15565b84815283602082015260606040820152600061194a606083018486611983565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b86815285602082015284604082015283606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b600061010067ffffffffffffffff8b1683528960208401528860408401528760608401528660808401528560a08401528060c0840152611b33818401866116db565b905082810360e0840152611b4781856116db565b9b9a5050505050505050505050565b600067ffffffffffffffff808316818103611b7357611b73611a15565b6001019392505050565b805161155f8161153e565b600082601f830112611b9957600080fd5b8151611ba76115ab82611564565b818152846020838601011115611bbc57600080fd5b6110148260208301602087016116b7565b600060208284031215611bdf57600080fd5b815167ffffffffffffffff80821115611bf757600080fd5b908301906101008286031215611c0c57600080fd5b611c146114e3565b82518152602083015160208201526040830151604082015260608301516060820152611c4260808401611b7d565b608082015260a083015160a082015260c083015182811115611c6357600080fd5b611c6f87828601611b88565b60c08301525060e083015182811115611c8757600080fd5b6116a887828601611b88565b600060408284031215611ca557600080fd5b6040516040810181811067ffffffffffffffff82111715611cc857611cc86114b4565b604052825181526020928301519281019290925250919050565b600060408284031215611cf457600080fd5b6114ad8383611c93565b60008060408385031215611d1157600080fd5b825167ffffffffffffffff80821115611d2957600080fd5b611d3586838701611b88565b9350602091508185015181811115611d4c57600080fd5b8501601f81018713611d5d57600080fd5b805182811115611d6f57611d6f6114b4565b8060051b9250611d8084840161150d565b8181529282018401928481019089851115611d9a57600080fd5b928501925b84841015611dc45783519250611db48361146e565b8282529285019290850190611d9f565b8096505050505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e3457611e34611a15565b5060010190565b8082018082111561041957610419611a15565b60008060408385031215611e6157600080fd5b825160ff81168114611e7257600080fd5b602084015190925067ffffffffffffffff811115611e8f57600080fd5b611e9b85828601611b88565b915050925092905056fea26469706673582212203f7b817e961bd708cb060385a647f4fa16a943b45821145f2a012fd4bdb3fac864736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"27695:9713:0:-:0;;;28116:36;;;;;;;;;-1:-1:-1;28138:10:0;;20219:95;;20272:31;;-1:-1:-1;;;20272:31:0;;20300:1;20272:31;;;160:51:1;133:18;;20272:31:0;;;;;;;20219:95;20323:32;20342:12;20323:18;:32::i;:::-;20175:187;27695:9713;;21862:187;21935:16;21954:6;;-1:-1:-1;;;;;21970:17:0;;;-1:-1:-1;;;;;;21970:17:0;;;;;;22002:40;;21954:6;;;;;;;22002:40;;21935:16;22002:40;21925:124;21862:187;:::o;14:203:1:-;27695:9713:0;;;;;;","srcMapRuntime":"27695:9713:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27854:25;;;;;;;;;;-1:-1:-1;27854:25:0;;;;;;;;;;;;;;188:18:1;176:31;;;158:50;;146:2;131:18;27854:25:0;;;;;;;;27885:27;;;;;;;;;;-1:-1:-1;27885:27:0;;;;;;;;;;;395:42:1;383:55;;;365:74;;353:2;338:18;27885:27:0;219:226:1;32176:286:0;;;;;;;;;;-1:-1:-1;32176:286:0;;;;;:::i;:::-;;:::i;:::-;;;1381:14:1;;1374:22;1356:41;;1344:2;1329:18;32176:286:0;1216:187:1;28197:114:0;;;;;;;;;;-1:-1:-1;28197:114:0;;;;;:::i;:::-;;:::i;:::-;;35625:137;;;;;;;;;;-1:-1:-1;35625:137:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;21243:101::-;;;;;;;;;;;;;:::i;28061:48::-;;;;;;;;;;-1:-1:-1;28061:48:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5898:25:1;;;5886:2;5871:18;28061:48:0;5752:177:1;27918:28:0;;;;;;;;;;-1:-1:-1;27918:28:0;;;;;;;;36020:1386;;;;;;:::i;:::-;;:::i;27952:52::-;;;;;;;;;;-1:-1:-1;27952:52:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;20588:85;;;;;;;;;;-1:-1:-1;20634:7:0;20660:6;;;20588:85;;28741:2289;;;;;;:::i;:::-;;:::i;28356:110::-;;;;;;;;;;-1:-1:-1;28356:110:0;;;;;:::i;:::-;;:::i;35768:147::-;;;;;;;;;;-1:-1:-1;35768:147:0;;;;;:::i;:::-;;:::i;:::-;;;;8610:13:1;;8592:32;;8680:4;8668:17;;;8662:24;8640:20;;;8633:54;;;;8565:18;35768:147:0;8394:299:1;21493:215:0;;;;;;;;;;-1:-1:-1;21493:215:0;;;;;:::i;:::-;;:::i;28511:123::-;;;;;;;;;;-1:-1:-1;28511:123:0;;;;;:::i;:::-;;:::i;32176:286::-;32245:4;32261:33;32297:53;32340:9;;32297:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;32297:42:0;;-1:-1:-1;;;32297:53:0:i;:::-;32261:89;;32360:21;32384:20;:4;:18;:20::i;:::-;32360:44;;32421:34;32435:13;32450:4;32421:13;:34::i;:::-;32414:41;;;;32176:286;;;;;:::o;28197:114::-;20481:13;:11;:13::i;:::-;28274::::1;:30:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;28197:114::o;35625:137::-;35708:12;35750:4;35739:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;35732:23;;35625:137;;;:::o;21243:101::-;20481:13;:11;:13::i;:::-;21307:30:::1;21334:1;21307:18;:30::i;:::-;21243:101::o:0;36020:1386::-;36120:33;36156:55;36199:11;;36156:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;36156:42:0;;-1:-1:-1;;;36156:55:0:i;:::-;36120:91;;36221:21;36245:20;:4;:18;:20::i;:::-;36221:44;;36283:34;36297:13;36312:4;36283:13;:34::i;:::-;36275:76;;;;;;;10181:2:1;36275:76:0;;;10163:21:1;10220:2;10200:18;;;10193:30;10259:31;10239:18;;;10232:59;10308:18;;36275:76:0;;;;;;;;;36361:35;;;;:20;:35;;;;;:42;;;;36399:4;36361:42;;;36448:12;;;;:30;;:28;:30::i;:::-;36414:64;;36505:14;:25;;;36492:9;:38;36488:151;;36602:25;;;;36553:75;;;;;36591:9;36553:75;;;10511:25:1;10552:18;;;10545:34;;;;10484:18;;36553:75:0;10337:248:1;36488:151:0;36800:23;;:34;-1:-1:-1;36796:74:0;;;36847:23;;;-1:-1:-1;36796:74:0;37036:16;;;;36994:71;;;37071:8;37088:9;37125:4;:15;;;37162:4;:14;;;37197:4;:10;;;37230:4;:12;;;36994:259;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;37326:12:0;;;;37340:15;;37357:14;;;;37373:16;;;;37268:131;;37326:12;;-1:-1:-1;37311:13:0;;-1:-1:-1;37268:131:0;;-1:-1:-1;37268:131:0;;11252:25:1;;;11308:2;11293:18;;11286:34;;;;11351:2;11336:18;;11329:34;11240:2;11225:18;;11050:319;37268:131:0;;;;;;;;36110:1296;;;36020:1386;;;:::o;28741:2289::-;29118:12;;29104:68;;;;;29078:23;;29118:12;;;29104:44;;:68;;29149:10;;29161;;;;29104:68;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;29078:94;-1:-1:-1;29241:20:0;29264:27;29078:94;29264:9;:27;:::i;:::-;29241:50;;29302:33;29338:323;29414:10;29485;29451:8;29516:11;;;;;;;;;;;29564:12;;;;;;;;;;;29550:38;;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;29613:7;;29338:323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29643:7;;29338:323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;29338:50:0;;-1:-1:-1;;;29338:323:0:i;:::-;29302:359;;29672:21;29696:20;:4;:18;:20::i;:::-;29672:44;;29897:12;;;;;;;;;;;29883:54;;;29945:15;29983:4;:15;;;30000:13;30015:10;;29883:160;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;29851:4;:12;;;:192;29831:222;;;;:::i;:::-;30067:33;;;;30063:465;;30134:19;30116:55;;;30202:10;30366:4;30355:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;:23;30411:13;30456:12;30495:7;;30116:401;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30063:465;30552:13;;30604:15;;;;;30537:98;;;;;;;;10511:25:1;;;;10552:18;;;10545:34;;;30552:13:0;;;;;30537:45;;30590:12;;10484:18:1;;30537:98:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30716:4;:12;;;30689:13;30650:306;30742:4;:10;;;30766:4;:15;;;30795:4;:14;;;30823:4;:16;;;30853:15;30882:12;30908:4;:12;;;30934:4;:12;;;30650:306;;;;;;;;;;;;;:::i;:::-;;;;;;;;31010:11;:13;;;;;;;;:11;:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;29000:2030;;;;28741:2289;;;;;;;;;:::o;28356:110::-;20481:13;:11;:13::i;:::-;28431:12:::1;:28:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;28356:110::o;35768:147::-;-1:-1:-1;;;;;;;;;;;;;;;;;35876:32:0;:14;:30;:32::i;21493:215::-;20481:13;:11;:13::i;:::-;21577:22:::1;::::0;::::1;21573:91;;21622:31;::::0;::::1;::::0;;21650:1:::1;21622:31;::::0;::::1;365:74:1::0;338:18;;21622:31:0::1;219:226:1::0;21573:91:0::1;21673:28;21692:8;21673:18;:28::i;:::-;21493:215:::0;:::o;28511:123::-;20481:13;:11;:13::i;:::-;28596:22:::1;::::0;;;:13:::1;:22;::::0;;;;;:31;28511:123::o;18656:174::-;18730:28;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18730:28:0;18788:9;18777:46;;;;;;;;;;;;:::i;18836:155::-;18924:7;18971:11;18960:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;18950:34;;;;;;18943:41;;18836:155;;;:::o;32468:1030::-;32572:4;32596:35;;;:20;:35;;;;;;;;:44;32588:85;;;;;;;17428:2:1;32588:85:0;;;17410:21:1;17467:2;17447:18;;;17440:30;17506;17486:18;;;17479:58;17554:18;;32588:85:0;17226:352:1;32588:85:0;32747:30;32780:195;;;;;;;;32822:4;:15;;;32780:195;;;;32860:4;:12;;;32780:195;;;;32897:13;:30;32911:4;:15;;;32897:30;;;;;;;;;;;;32780:195;;;;32951:13;32780:195;;;32747:228;;32987:25;33014:28;33044:35;33095:59;33109:44;33136:4;:16;;;14550:1;14440:121;33109:44;33095:13;:59::i;:::-;32986:168;;;;;;33165:34;33202:50;33224:18;33244:7;33202:21;:50::i;:::-;33165:87;;33263:26;33292:68;33320:17;33339:20;33292:27;:68::i;:::-;33263:97;;33400:17;33378:18;:39;;33370:100;;;;;;;17785:2:1;33370:100:0;;;17767:21:1;17824:2;17804:18;;;17797:30;17863:34;17843:18;;;17836:62;17934:18;17914;;;17907:46;17970:19;;33370:100:0;17583:412:1;33370:100:0;-1:-1:-1;33487:4:0;;32468:1030;-1:-1:-1;;;;;;;;32468:1030:0:o;20746:162::-;20634:7;20660:6;20805:23;20660:6;15301:10;20805:23;20801:101;;20851:40;;;;;15301:10;20851:40;;;365:74:1;338:18;;20851:40:0;219:226:1;21862:187:0;21935:16;21954:6;;;21970:17;;;;;;;;;;22002:40;;21954:6;;;;;;;22002:40;;21935:16;22002:40;21925:124;21862:187;:::o;13643:603::-;-1:-1:-1;;;;;;;;;;;;;;;;;13739:13:0;13754:20;13778:28;13801:4;13778:22;:28::i;:::-;13738:68;;-1:-1:-1;13738:68:0;-1:-1:-1;12399:1:0;13820:20;;;;13816:95;;;13863:37;;;;;18172:4:1;18160:17;;13863:37:0;;;18142:36:1;18115:18;;13863:37:0;18000:184:1;13816:95:0;14218:7;14207:32;;;;;;;;;;;;:::i;:::-;14200:39;13643:603;-1:-1:-1;;;;13643:603:0:o;17818:673::-;18097:40;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18097:40:0;18160:324;;;;;;;;18208:13;18160:324;;;;18246:37;18273:9;14404:22;;;14307:127;18246:37;18160:324;;;;18309:10;18160:324;;;;18346:11;18160:324;;;;18378:5;18160:324;;;;;;18406:7;18160:324;;;;18436:7;18160:324;;;;18466:7;18160:324;;;18153:331;;17818:673;;;;;;;;;:::o;31604:527::-;31695:25;31722:28;31752:35;31803:22;31884:11;31869:46;;;:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;31869:48:0;;;;;;;;;;;;:::i;:::-;31835:82;-1:-1:-1;31835:82:0;-1:-1:-1;31927:35:0;31965:29;31835:82;31965:27;:29::i;:::-;32024:34;;32091:33;;;;;32024:34;;32091:33;;-1:-1:-1;31604:527:0;;-1:-1:-1;31604:527:0;;-1:-1:-1;;;31604:527:0:o;35130:489::-;35296:16;35328:34;35379:15;:22;35365:37;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;35365:37:0;;35328:74;;35417:9;35412:167;35436:15;:22;35432:1;:26;35412:167;;;35516:12;;35540:18;;35516:12;;;;;35502:37;;35540:15;;35556:1;;35540:18;;;;;;:::i;:::-;;;;;;;;;;;;35502:66;;;;;;;;;;;20602:42:1;20590:55;;;35502:66:0;;;20572:74:1;20682:13;;20662:18;;;20655:41;20738:15;;;20732:22;20712:18;;;20705:50;20797:15;;;20791:22;20771:18;;;20764:50;20786:2;20857:15;;20851:22;20830:19;;;20823:51;20544:19;;35502:66:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;35479:17;35497:1;35479:20;;;;;;;;:::i;:::-;;;;;;;;;;:89;35460:3;;;;:::i;:::-;;;;35412:167;;;-1:-1:-1;35595:17:0;35130:489;-1:-1:-1;;;35130:489:0:o;33947:476::-;34119:7;;;34182:200;34206:17;:24;34202:1;:28;34182:200;;;34302:15;34278:20;34255:17;34273:1;34255:20;;;;;;;;:::i;:::-;;;;;;;:43;;;;:::i;:::-;:62;34251:121;;34337:20;;;;:::i;:::-;;;;34251:121;34232:3;;;;:::i;:::-;;;;34182:200;;13014:181;13088:13;13103:20;13167:4;13156:32;;;;;;;;;;;;:::i;:::-;13135:53;;;;-1:-1:-1;13014:181:0;-1:-1:-1;;13014:181:0:o;11149:620::-;-1:-1:-1;;;;;;;;;;;;;;;;;11249:13:0;11264:22;11290:30;11315:4;11290:24;:30::i;:::-;11248:72;;-1:-1:-1;11248:72:0;-1:-1:-1;9815:1:0;11334:23;;;;11330:100;;;11380:39;;;;;18172:4:1;18160:17;;11380:39:0;;;18142:36:1;18115:18;;11380:39:0;18000:184:1;450:347;501:8;511:6;565:3;558:4;550:6;546:17;542:27;532:55;;583:1;580;573:12;532:55;-1:-1:-1;606:20:1;;649:18;638:30;;635:50;;;681:1;678;671:12;635:50;718:4;710:6;706:17;694:29;;770:3;763:4;754:6;746;742:19;738:30;735:39;732:59;;;787:1;784;777:12;732:59;450:347;;;;;:::o;802:409::-;872:6;880;933:2;921:9;912:7;908:23;904:32;901:52;;;949:1;946;939:12;901:52;989:9;976:23;1022:18;1014:6;1011:30;1008:50;;;1054:1;1051;1044:12;1008:50;1093:58;1143:7;1134:6;1123:9;1119:22;1093:58;:::i;:::-;1170:8;;1067:84;;-1:-1:-1;802:409:1;-1:-1:-1;;;;802:409:1:o;1408:154::-;1494:42;1487:5;1483:54;1476:5;1473:65;1463:93;;1552:1;1549;1542:12;1567:247;1626:6;1679:2;1667:9;1658:7;1654:23;1650:32;1647:52;;;1695:1;1692;1685:12;1647:52;1734:9;1721:23;1753:31;1778:5;1753:31;:::i;:::-;1803:5;1567:247;-1:-1:-1;;;1567:247:1:o;1819:184::-;1871:77;1868:1;1861:88;1968:4;1965:1;1958:15;1992:4;1989:1;1982:15;2008:255;2080:2;2074:9;2122:6;2110:19;;2159:18;2144:34;;2180:22;;;2141:62;2138:88;;;2206:18;;:::i;:::-;2242:2;2235:22;2008:255;:::o;2268:334::-;2339:2;2333:9;2395:2;2385:13;;-1:-1:-1;;2381:86:1;2369:99;;2498:18;2483:34;;2519:22;;;2480:62;2477:88;;;2545:18;;:::i;:::-;2581:2;2574:22;2268:334;;-1:-1:-1;2268:334:1:o;2607:129::-;2692:18;2685:5;2681:30;2674:5;2671:41;2661:69;;2726:1;2723;2716:12;2741:132;2808:20;;2837:30;2808:20;2837:30;:::i;:::-;2741:132;;;:::o;2878:245::-;2926:4;2959:18;2951:6;2948:30;2945:56;;;2981:18;;:::i;:::-;-1:-1:-1;3038:2:1;3026:15;-1:-1:-1;;3022:88:1;3112:4;3018:99;;2878:245::o;3128:462::-;3170:5;3223:3;3216:4;3208:6;3204:17;3200:27;3190:55;;3241:1;3238;3231:12;3190:55;3277:6;3264:20;3308:48;3324:31;3352:2;3324:31;:::i;:::-;3308:48;:::i;:::-;3381:2;3372:7;3365:19;3427:3;3420:4;3415:2;3407:6;3403:15;3399:26;3396:35;3393:55;;;3444:1;3441;3434:12;3393:55;3509:2;3502:4;3494:6;3490:17;3483:4;3474:7;3470:18;3457:55;3557:1;3532:16;;;3550:4;3528:27;3521:38;;;;3536:7;3128:462;-1:-1:-1;;;3128:462:1:o;3595:1156::-;3692:6;3745:2;3733:9;3724:7;3720:23;3716:32;3713:52;;;3761:1;3758;3751:12;3713:52;3801:9;3788:23;3830:18;3871:2;3863:6;3860:14;3857:34;;;3887:1;3884;3877:12;3857:34;3910:22;;;;3966:6;3948:16;;;3944:29;3941:49;;;3986:1;3983;3976:12;3941:49;4012:22;;:::i;:::-;4070:2;4057:16;4050:5;4043:31;4127:2;4123;4119:11;4106:25;4101:2;4094:5;4090:14;4083:49;4185:2;4181;4177:11;4164:25;4159:2;4152:5;4148:14;4141:49;4243:2;4239;4235:11;4222:25;4217:2;4210:5;4206:14;4199:49;4281:31;4307:3;4303:2;4299:12;4281:31;:::i;:::-;4275:3;4268:5;4264:15;4257:56;4367:3;4363:2;4359:12;4346:26;4340:3;4333:5;4329:15;4322:51;4419:3;4415:2;4411:12;4398:26;4449:2;4439:8;4436:16;4433:36;;;4465:1;4462;4455:12;4433:36;4502:44;4538:7;4527:8;4523:2;4519:17;4502:44;:::i;:::-;4496:3;4489:5;4485:15;4478:69;;4593:3;4589:2;4585:12;4572:26;4623:2;4613:8;4610:16;4607:36;;;4639:1;4636;4629:12;4607:36;4676:44;4712:7;4701:8;4697:2;4693:17;4676:44;:::i;:::-;4670:3;4659:15;;4652:69;-1:-1:-1;4663:5:1;3595:1156;-1:-1:-1;;;;;3595:1156:1:o;4756:250::-;4841:1;4851:113;4865:6;4862:1;4859:13;4851:113;;;4941:11;;;4935:18;4922:11;;;4915:39;4887:2;4880:10;4851:113;;;-1:-1:-1;;4998:1:1;4980:16;;4973:27;4756:250::o;5011:329::-;5052:3;5090:5;5084:12;5117:6;5112:3;5105:19;5133:76;5202:6;5195:4;5190:3;5186:14;5179:4;5172:5;5168:16;5133:76;:::i;:::-;5254:2;5242:15;-1:-1:-1;;5238:88:1;5229:98;;;;5329:4;5225:109;;5011:329;-1:-1:-1;;5011:329:1:o;5345:217::-;5492:2;5481:9;5474:21;5455:4;5512:44;5552:2;5541:9;5537:18;5529:6;5512:44;:::i;5567:180::-;5626:6;5679:2;5667:9;5658:7;5654:23;5650:32;5647:52;;;5695:1;5692;5685:12;5647:52;-1:-1:-1;5718:23:1;;5567:180;-1:-1:-1;5567:180:1:o;5934:477::-;6013:6;6021;6029;6082:2;6070:9;6061:7;6057:23;6053:32;6050:52;;;6098:1;6095;6088:12;6050:52;6134:9;6121:23;6111:33;;6195:2;6184:9;6180:18;6167:32;6222:18;6214:6;6211:30;6208:50;;;6254:1;6251;6244:12;6208:50;6293:58;6343:7;6334:6;6323:9;6319:22;6293:58;:::i;:::-;5934:477;;6370:8;;-1:-1:-1;6267:84:1;;-1:-1:-1;;;;5934:477:1:o;6601:1463::-;6754:6;6762;6770;6778;6786;6794;6802;6810;6818;6871:3;6859:9;6850:7;6846:23;6842:33;6839:53;;;6888:1;6885;6878:12;6839:53;6924:9;6911:23;6901:33;;6981:2;6970:9;6966:18;6953:32;6943:42;;7035:2;7024:9;7020:18;7007:32;7048:31;7073:5;7048:31;:::i;:::-;7098:5;-1:-1:-1;7154:2:1;7139:18;;7126:32;7177:18;7207:14;;;7204:34;;;7234:1;7231;7224:12;7204:34;7272:6;7261:9;7257:22;7247:32;;7317:7;7310:4;7306:2;7302:13;7298:27;7288:55;;7339:1;7336;7329:12;7288:55;7379:2;7366:16;7405:2;7397:6;7394:14;7391:34;;;7421:1;7418;7411:12;7391:34;7474:7;7469:2;7459:6;7456:1;7452:14;7448:2;7444:23;7440:32;7437:45;7434:65;;;7495:1;7492;7485:12;7434:65;7526:2;7522;7518:11;7508:21;;7548:6;7538:16;;;7607:3;7596:9;7592:19;7579:33;7563:49;;7637:2;7627:8;7624:16;7621:36;;;7653:1;7650;7643:12;7621:36;7692:60;7744:7;7733:8;7722:9;7718:24;7692:60;:::i;:::-;7771:8;;-1:-1:-1;7666:86:1;-1:-1:-1;7859:3:1;7844:19;;7831:33;;-1:-1:-1;7876:16:1;;;7873:36;;;7905:1;7902;7895:12;7873:36;;7944:60;7996:7;7985:8;7974:9;7970:24;7944:60;:::i;:::-;7918:86;;8023:8;8013:18;;;8050:8;8040:18;;;6601:1463;;;;;;;;;;;:::o;8069:320::-;8137:6;8190:2;8178:9;8169:7;8165:23;8161:32;8158:52;;;8206:1;8203;8196:12;8158:52;8246:9;8233:23;8279:18;8271:6;8268:30;8265:50;;;8311:1;8308;8301:12;8265:50;8334:49;8375:7;8366:6;8355:9;8351:22;8334:49;:::i;8698:248::-;8766:6;8774;8827:2;8815:9;8806:7;8802:23;8798:32;8795:52;;;8843:1;8840;8833:12;8795:52;-1:-1:-1;;8866:23:1;;;8936:2;8921:18;;;8908:32;;-1:-1:-1;8698:248:1:o;8951:1023::-;9156:2;9145:9;9138:21;9201:6;9195:13;9190:2;9179:9;9175:18;9168:41;9263:2;9255:6;9251:15;9245:22;9240:2;9229:9;9225:18;9218:50;9322:2;9314:6;9310:15;9304:22;9299:2;9288:9;9284:18;9277:50;9382:2;9374:6;9370:15;9364:22;9358:3;9347:9;9343:19;9336:51;9453:18;9446:3;9438:6;9434:16;9428:23;9424:48;9418:3;9407:9;9403:19;9396:77;9528:3;9520:6;9516:16;9510:23;9504:3;9493:9;9489:19;9482:52;9119:4;9581:3;9573:6;9569:16;9563:23;9605:6;9648:2;9642:3;9631:9;9627:19;9620:31;9674:51;9720:3;9709:9;9705:19;9691:12;9674:51;:::i;:::-;9660:65;;9774:3;9766:6;9762:16;9756:23;-1:-1:-1;;9831:9:1;9823:6;9819:22;9815:95;9810:2;9799:9;9795:18;9788:123;9928:40;9961:6;9945:14;9928:40;:::i;:::-;9920:48;8951:1023;-1:-1:-1;;;;;;8951:1023:1:o;10590:455::-;10819:6;10808:9;10801:25;10862:6;10857:2;10846:9;10842:18;10835:34;10917:18;10909:6;10905:31;10900:2;10889:9;10885:18;10878:59;10973:3;10968:2;10957:9;10953:18;10946:31;10782:4;10994:45;11034:3;11023:9;11019:19;11011:6;10994:45;:::i;11374:545::-;11474:6;11469:3;11462:19;11444:3;11500:4;11529:2;11524:3;11520:12;11513:19;;11555:5;11578:1;11588:306;11602:6;11599:1;11596:13;11588:306;;;11679:6;11666:20;11699:33;11724:7;11699:33;:::i;:::-;11770:42;11757:56;11745:69;;11834:12;;;;11869:15;;;;11624:1;11617:9;11588:306;;;-1:-1:-1;11910:3:1;;11374:545;-1:-1:-1;;;;;11374:545:1:o;11924:359::-;12141:6;12130:9;12123:25;12184:2;12179;12168:9;12164:18;12157:30;12104:4;12204:73;12273:2;12262:9;12258:18;12250:6;12242;12204:73;:::i;:::-;12196:81;11924:359;-1:-1:-1;;;;;11924:359:1:o;12288:184::-;12358:6;12411:2;12399:9;12390:7;12386:23;12382:32;12379:52;;;12427:1;12424;12417:12;12379:52;-1:-1:-1;12450:16:1;;12288:184;-1:-1:-1;12288:184:1:o;12477:::-;12529:77;12526:1;12519:88;12626:4;12623:1;12616:15;12650:4;12647:1;12640:15;12666:128;12733:9;;;12754:11;;;12751:37;;;12768:18;;:::i;12799:430::-;13044:6;13033:9;13026:25;13087:6;13082:2;13071:9;13067:18;13060:34;13130:2;13125;13114:9;13110:18;13103:30;13007:4;13150:73;13219:2;13208:9;13204:18;13196:6;13188;13150:73;:::i;13234:184::-;13286:77;13283:1;13276:88;13383:4;13380:1;13373:15;13407:4;13404:1;13397:15;13423:737;13692:6;13681:9;13674:25;13735:6;13730:2;13719:9;13715:18;13708:34;13778:6;13773:2;13762:9;13758:18;13751:34;13821:6;13816:2;13805:9;13801:18;13794:34;13865:3;13859;13848:9;13844:19;13837:32;13906:6;13900:3;13889:9;13885:19;13878:35;13964:6;13956;13950:3;13939:9;13935:19;13922:49;14021:1;13991:22;;;14015:3;13987:32;;;13980:43;;;;14075:2;14063:15;;;-1:-1:-1;;14059:88:1;14044:104;14040:114;;13423:737;-1:-1:-1;;;;;13423:737:1:o;14418:853::-;14741:4;14770:3;14812:18;14804:6;14800:31;14789:9;14782:50;14868:6;14863:2;14852:9;14848:18;14841:34;14911:6;14906:2;14895:9;14891:18;14884:34;14954:6;14949:2;14938:9;14934:18;14927:34;14998:6;14992:3;14981:9;14977:19;14970:35;15042:6;15036:3;15025:9;15021:19;15014:35;15086:2;15080:3;15069:9;15065:19;15058:31;15112:44;15152:2;15141:9;15137:18;15129:6;15112:44;:::i;:::-;15098:58;;15205:9;15197:6;15193:22;15187:3;15176:9;15172:19;15165:51;15233:32;15258:6;15250;15233:32;:::i;:::-;15225:40;14418:853;-1:-1:-1;;;;;;;;;;;14418:853:1:o;15276:209::-;15314:3;15342:18;15395:2;15388:5;15384:14;15422:2;15413:7;15410:15;15407:41;;15428:18;;:::i;:::-;15477:1;15464:15;;15276:209;-1:-1:-1;;;15276:209:1:o;15490:136::-;15568:13;;15590:30;15568:13;15590:30;:::i;15631:441::-;15684:5;15737:3;15730:4;15722:6;15718:17;15714:27;15704:55;;15755:1;15752;15745:12;15704:55;15784:6;15778:13;15815:48;15831:31;15859:2;15831:31;:::i;15815:48::-;15888:2;15879:7;15872:19;15934:3;15927:4;15922:2;15914:6;15910:15;15906:26;15903:35;15900:55;;;15951:1;15948;15941:12;15900:55;15964:77;16038:2;16031:4;16022:7;16018:18;16011:4;16003:6;15999:17;15964:77;:::i;16077:1144::-;16185:6;16238:2;16226:9;16217:7;16213:23;16209:32;16206:52;;;16254:1;16251;16244:12;16206:52;16287:9;16281:16;16316:18;16357:2;16349:6;16346:14;16343:34;;;16373:1;16370;16363:12;16343:34;16396:22;;;;16452:6;16434:16;;;16430:29;16427:49;;;16472:1;16469;16462:12;16427:49;16498:22;;:::i;:::-;16549:2;16543:9;16536:5;16529:24;16599:2;16595;16591:11;16585:18;16580:2;16573:5;16569:14;16562:42;16650:2;16646;16642:11;16636:18;16631:2;16624:5;16620:14;16613:42;16701:2;16697;16693:11;16687:18;16682:2;16675:5;16671:14;16664:42;16739;16776:3;16772:2;16768:12;16739:42;:::i;:::-;16733:3;16726:5;16722:15;16715:67;16829:3;16825:2;16821:12;16815:19;16809:3;16802:5;16798:15;16791:44;16874:3;16870:2;16866:12;16860:19;16904:2;16894:8;16891:16;16888:36;;;16920:1;16917;16910:12;16888:36;16957:55;17004:7;16993:8;16989:2;16985:17;16957:55;:::i;:::-;16951:3;16944:5;16940:15;16933:80;;17052:3;17048:2;17044:12;17038:19;17082:2;17072:8;17069:16;17066:36;;;17098:1;17095;17088:12;17066:36;17135:55;17182:7;17171:8;17167:2;17163:17;17135:55;:::i;18189:475::-;18256:5;18304:4;18292:9;18287:3;18283:19;18279:30;18276:50;;;18322:1;18319;18312:12;18276:50;18355:4;18349:11;18399:4;18391:6;18387:17;18470:6;18458:10;18455:22;18434:18;18422:10;18419:34;18416:62;18413:88;;;18481:18;;:::i;:::-;18517:4;18510:24;18582:16;;18567:32;;18653:2;18638:18;;;18632:25;18615:15;;;18608:50;;;;-1:-1:-1;18552:6:1;18189:475;-1:-1:-1;18189:475:1:o;18669:252::-;18765:6;18818:2;18806:9;18797:7;18793:23;18789:32;18786:52;;;18834:1;18831;18824:12;18786:52;18857:58;18907:7;18896:9;18857:58;:::i;18926:1213::-;19039:6;19047;19100:2;19088:9;19079:7;19075:23;19071:32;19068:52;;;19116:1;19113;19106:12;19068:52;19149:9;19143:16;19178:18;19219:2;19211:6;19208:14;19205:34;;;19235:1;19232;19225:12;19205:34;19258:60;19310:7;19301:6;19290:9;19286:22;19258:60;:::i;:::-;19248:70;;19337:2;19327:12;;19385:2;19374:9;19370:18;19364:25;19414:2;19404:8;19401:16;19398:36;;;19430:1;19427;19420:12;19398:36;19453:24;;19508:4;19500:13;;19496:27;-1:-1:-1;19486:55:1;;19537:1;19534;19527:12;19486:55;19566:2;19560:9;19588:2;19584;19581:10;19578:36;;;19594:18;;:::i;:::-;19640:2;19637:1;19633:10;19623:20;;19663:28;19687:2;19683;19679:11;19663:28;:::i;:::-;19725:15;;;19795:11;;;19791:20;;;19756:12;;;;19823:19;;;19820:39;;;19855:1;19852;19845:12;19820:39;19879:11;;;;19899:210;19915:6;19910:3;19907:15;19899:210;;;19988:3;19982:10;19969:23;;20005:31;20030:5;20005:31;:::i;:::-;20049:18;;;19932:12;;;;20087;;;;19899:210;;;20128:5;20118:15;;;;;;;;18926:1213;;;;;:::o;20144:184::-;20196:77;20193:1;20186:88;20293:4;20290:1;20283:15;20317:4;20314:1;20307:15;20885:195;20924:3;20955:66;20948:5;20945:77;20942:103;;21025:18;;:::i;:::-;-1:-1:-1;21072:1:1;21061:13;;20885:195::o;21085:125::-;21150:9;;;21171:10;;;21168:36;;;21184:18;;:::i;21215:485::-;21301:6;21309;21362:2;21350:9;21341:7;21337:23;21333:32;21330:52;;;21378:1;21375;21368:12;21330:52;21410:9;21404:16;21460:4;21453:5;21449:16;21442:5;21439:27;21429:55;;21480:1;21477;21470:12;21429:55;21552:2;21537:18;;21531:25;21503:5;;-1:-1:-1;21579:18:1;21568:30;;21565:50;;;21611:1;21608;21601:12;21565:50;21634:60;21686:7;21677:6;21666:9;21662:22;21634:60;:::i;:::-;21624:70;;;21215:485;;;;;:::o","abiDefinition":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"AppConfigLib__IncorrectVersion","type":"error"},{"inputs":[{"internalType":"uint256","name":"actual","type":"uint256"},{"internalType":"uint256","name":"expected","type":"uint256"}],"name":"InterchainClientV1__IncorrectMsgValue","type":"error"},{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"OptionsLib__IncorrectVersion","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"srcChainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"}],"name":"InterchainTransactionReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"clientNonce","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dstChainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"verificationFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"executionFee","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"options","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"InterchainTransactionSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"clientNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedOptions","type":"bytes"}],"name":"decodeOptions","outputs":[{"components":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"gasAirdrop","type":"uint256"}],"internalType":"struct OptionsV1","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"internalType":"struct InterchainTransaction","name":"icTx","type":"tuple"}],"name":"encodeTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"executedTransactions","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"executionFees","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"interchainDB","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"transaction","type":"bytes"}],"name":"interchainExecute","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"interchainSend","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedTx","type":"bytes"}],"name":"isExecutable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"linkedClients","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executionFees_","type":"address"}],"name":"setExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_interchainDB","type":"address"}],"name":"setInterchainDB","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"setLinkedClient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"interchainExecute(uint256,bytes)":{"notice":"Executes a transaction that has been sent via the Interchain."},"interchainSend(uint256,bytes32,address,address[],bytes,bytes)":{"notice":"Sends a message to another chain via the Interchain Communication Protocol."},"setExecutionFees(address)":{"notice":"Sets the address of the ExecutionFees contract."},"setInterchainDB(address)":{"notice":"Sets the address of the InterchainDB contract."},"setLinkedClient(uint256,bytes32)":{"notice":"Sets the linked client for a specific chain ID."}},"version":1},"developerDoc":{"details":"Implements the operations of the Interchain Execution Layer.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"interchainExecute(uint256,bytes)":{"details":"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.","params":{"gasLimit":"The gas limit to use for the execution.","transaction":"The transaction data."}},"interchainSend(uint256,bytes32,address,address[],bytes,bytes)":{"details":"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.","params":{"dstChainId":"The chain ID of the destination chain.","message":"The message being sent.","options":"Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.","receiver":"The address of the receiver on the destination chain.","srcExecutionService":"The address of the execution service to use for the message.","srcModules":"The source modules involved in the message sending."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setExecutionFees(address)":{"details":"Only callable by the contract owner or an authorized account.","params":{"executionFees_":"The address of the ExecutionFees contract."}},"setInterchainDB(address)":{"details":"Only callable by the contract owner or an authorized account.","params":{"_interchainDB":"The address of the InterchainDB contract."}},"setLinkedClient(uint256,bytes32)":{"details":"Stores the address of the linked client in a mapping with the chain ID as the key.","params":{"chainId":"The chain ID for which the client is being set.","client":"The address of the client being linked."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"InterchainClientV1","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"AppConfigLib__IncorrectVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__IncorrectMsgValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"OptionsLib__IncorrectVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"}],\"name\":\"InterchainTransactionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clientNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"InterchainTransactionSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"clientNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"}],\"name\":\"decodeOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAirdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionsV1\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct InterchainTransaction\",\"name\":\"icTx\",\"type\":\"tuple\"}],\"name\":\"encodeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainDB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"}],\"name\":\"interchainExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"interchainSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"isExecutable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"linkedClients\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executionFees_\",\"type\":\"address\"}],\"name\":\"setExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interchainDB\",\"type\":\"address\"}],\"name\":\"setInterchainDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"setLinkedClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements the operations of the Interchain Execution Layer.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"interchainExecute(uint256,bytes)\":{\"details\":\"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.\",\"params\":{\"gasLimit\":\"The gas limit to use for the execution.\",\"transaction\":\"The transaction data.\"}},\"interchainSend(uint256,bytes32,address,address[],bytes,bytes)\":{\"details\":\"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.\",\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"message\":\"The message being sent.\",\"options\":\"Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\",\"receiver\":\"The address of the receiver on the destination chain.\",\"srcExecutionService\":\"The address of the execution service to use for the message.\",\"srcModules\":\"The source modules involved in the message sending.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setExecutionFees(address)\":{\"details\":\"Only callable by the contract owner or an authorized account.\",\"params\":{\"executionFees_\":\"The address of the ExecutionFees contract.\"}},\"setInterchainDB(address)\":{\"details\":\"Only callable by the contract owner or an authorized account.\",\"params\":{\"_interchainDB\":\"The address of the InterchainDB contract.\"}},\"setLinkedClient(uint256,bytes32)\":{\"details\":\"Stores the address of the linked client in a mapping with the chain ID as the key.\",\"params\":{\"chainId\":\"The chain ID for which the client is being set.\",\"client\":\"The address of the client being linked.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"InterchainClientV1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"interchainExecute(uint256,bytes)\":{\"notice\":\"Executes a transaction that has been sent via the Interchain.\"},\"interchainSend(uint256,bytes32,address,address[],bytes,bytes)\":{\"notice\":\"Sends a message to another chain via the Interchain Communication Protocol.\"},\"setExecutionFees(address)\":{\"notice\":\"Sets the address of the ExecutionFees contract.\"},\"setInterchainDB(address)\":{\"notice\":\"Sets the address of the InterchainDB contract.\"},\"setLinkedClient(uint256,bytes32)\":{\"notice\":\"Sets the linked client for a specific chain ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainClientV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{"clientNonce()":"0d898416","decodeOptions(bytes)":"d5e788a0","encodeTransaction((uint256,bytes32,uint256,bytes32,uint64,uint256,bytes,bytes))":"4d84cc11","executedTransactions(bytes32)":"8691d34c","executionFees()":"7341eaf9","interchainDB()":"0e785ce0","interchainExecute(uint256,bytes)":"80efe777","interchainSend(uint256,bytes32,address,address[],bytes,bytes)":"98939d28","isExecutable(bytes)":"31afa7de","linkedClients(uint256)":"7268b08f","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setExecutionFees(address)":"3dc68b87","setInterchainDB(address)":"b7ce2078","setLinkedClient(uint256,bytes32)":"f34234c8","transferOwnership(address)":"f2fde38b"}},"solidity/InterchainClientV1.sol:InterchainClientV1Events":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"srcChainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"}],"name":"InterchainTransactionReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"clientNonce","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dstChainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"verificationFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"executionFee","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"options","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"InterchainTransactionSent","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"}],\"name\":\"InterchainTransactionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clientNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"InterchainTransactionSent\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainClientV1Events\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:InterchainEntryLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220244c9ce44fb75dd3a97fde90adbd4c86334b4973e9d983ad4081ecbb6f1adb1764736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220244c9ce44fb75dd3a97fde90adbd4c86334b4973e9d983ad4081ecbb6f1adb1764736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"16160:1299:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;16160:1299:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"16160:1299:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainEntryLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:InterchainTransactionLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204c5a94a68b6fe561418de6e2ff667549298fd99920fad7148217efb006c12f4764736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204c5a94a68b6fe561418de6e2ff667549298fd99920fad7148217efb006c12f4764736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"17779:1214:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;17779:1214:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"17779:1214:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainTransactionLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:OptionsLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220719be663027215c29f460b8307736b5de12bc2fc702fed89b27798ad2fcd456864736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220719be663027215c29f460b8307736b5de12bc2fc702fed89b27798ad2fcd456864736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"12290:1958:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;12290:1958:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"12290:1958:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"OptionsLib__IncorrectVersion","type":"error"}],"userDoc":{"kind":"user","methods":{},"notice":"A library for encoding and decoding Interchain options related to interchain messages.","version":1},"developerDoc":{"kind":"dev","methods":{},"title":"OptionsLib","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"OptionsLib__IncorrectVersion\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"OptionsLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for encoding and decoding Interchain options related to interchain messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"OptionsLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:Ownable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"solidity/InterchainClientV1.sol:TypeCasts":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122010e23a36462f219fb16d2f3e60d5f120be93a4a21e0615c59aae6d4fbb83ef2964736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122010e23a36462f219fb16d2f3e60d5f120be93a4a21e0615c59aae6d4fbb83ef2964736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 clientNonce,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 expected);\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sets the address of the InterchainDB contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param _interchainDB The address of the InterchainDB contract.\n     */\n    function setInterchainDB(address _interchainDB) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently primarily gas limit + native gas drop.\n     * @param message The message being sent.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     */\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable;\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction The InterchainTransaction struct to be checked.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction) external view returns (bool);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    uint8 constant OPTIONS_V1 = 1;\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the entry on the source chain\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint64 nonce;\n    uint256 dbNonce;\n    bytes options;\n    bytes message;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint64 nonce,\n        uint256 dbNonce,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            nonce: nonce,\n            dbNonce: dbNonce,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing an entry from the remote Interchain DataBase verified by the Interchain Module\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param entryValue   The value of the entry: writer + dataHash hashed together\n    struct RemoteEntry {\n        uint256 verifiedAt;\n        bytes32 entryValue;\n    }\n\n    error InterchainDB__ConflictingEntries(bytes32 existingEntryValue, InterchainEntry newEntry);\n    error InterchainDB__EntryDoesNotExist(uint256 dbNonce);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId();\n\n    /// @notice Write data to the Interchain DataBase as a new entry.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `verifyEntry` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce);\n\n    /// @notice Request the given Interchain Modules to verify the already written entry on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any entry.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param destChainId   The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the written entry on this chain\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestVerification(uint256 destChainId, uint256 dbNonce, address[] memory srcModules) external payable;\n\n    /// @notice Write data to the Interchain DataBase,\n    /// and request the given Interchain Modules to verify it on the destination chain.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: additional verification for the same entry could be later done using `requestVerification`\n    /// by providing the returned `dbNonce`.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the written entry on this chain\n    function writeEntryWithVerification(\n        uint256 destChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce);\n\n    /// @notice Allows the Interchain Module to verify the entry coming from a remote source chain.\n    /// @param entry        The Interchain Entry to confirm\n    function verifyEntry(InterchainEntry memory entry) external;\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param destChainId  The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 destChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Get the Interchain Entry by the writer and the writer nonce.\n    /// @dev Will revert if the entry with the given nonce does not exist.\n    /// @param dbNonce      The database nonce of the written entry on this chain\n    function getEntry(uint256 dbNonce) external view returns (InterchainEntry memory);\n\n    /// @notice Get the nonce of the database.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or zero if the module has not verified the entry.\n    function readEntry(\n        address dstModule,\n        InterchainEntry memory entry\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    uint64 public clientNonce;\n    address public interchainDB;\n    address public executionFees;\n    mapping(bytes32 =\u003e bool) public executedTransactions;\n\n    // Chain ID =\u003e Bytes32 Address of src clients\n    mapping(uint256 =\u003e bytes32) public linkedClients;\n\n    constructor() Ownable(msg.sender) {}\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) public onlyOwner {\n        executionFees = executionFees_;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setInterchainDB(address _interchainDB) public onlyOwner {\n        interchainDB = _interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) public onlyOwner {\n        linkedClients[chainId] = client;\n    }\n\n    // TODO: Calculate Gas Pricing per module and charge fees\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        public\n        payable\n    {\n        // TODO: should check options for being correctly formatted\n        uint256 verificationFee = IInterchainDB(interchainDB).getInterchainFee(dstChainId, srcModules);\n        // TODO: should check msg.value \u003e= verificationFee\n        uint256 executionFee = msg.value - verificationFee;\n\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            nonce: clientNonce,\n            dbNonce: IInterchainDB(interchainDB).getDBNonce(),\n            options: options,\n            message: message\n        });\n\n        bytes32 transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        assert(\n            icTx.dbNonce\n                == IInterchainDB(interchainDB).writeEntryWithVerification{value: verificationFee}(\n                    icTx.dstChainId, transactionId, srcModules\n                )\n        );\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: abi.encode(icTx).length,\n                transactionId: transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n        }\n        IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, transactionId);\n        emit InterchainTransactionSent(\n            transactionId,\n            icTx.dbNonce,\n            icTx.nonce,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n        // Increment nonce for next message\n        clientNonce++;\n    }\n\n    // TODO: App Config Versioning\n    // TODO: What if receiver is not a contract / doesn't conform to interface?\n    /**\n     * @dev Retrieves the application configuration for a given receiver application.\n     * @param receiverApp The address of the receiver application.\n     * @return requiredResponses The number of required responses from the receiving modules.\n     * @return optimisticTimePeriod The time period within which responses are considered valid.\n     * @return approvedDstModules An array of addresses of the approved destination modules.\n     */\n    function _getAppConfig(address receiverApp)\n        internal\n        view\n        returns (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules)\n    {\n        bytes memory appConfig;\n        (appConfig, approvedDstModules) = IInterchainApp(receiverApp).getReceivingConfig();\n        AppConfigV1 memory decodedAppConfig = appConfig.decodeAppConfigV1();\n        requiredResponses = decodedAppConfig.requiredResponses;\n        optimisticTimePeriod = decodedAppConfig.optimisticPeriod;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx) public view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        bytes32 transactionId = icTx.transactionId();\n        return _isExecutable(transactionId, icTx);\n    }\n\n    function _isExecutable(bytes32 transactionId, InterchainTransaction memory icTx) internal view returns (bool) {\n        require(executedTransactions[transactionId] == false, \"Transaction already executed\");\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            srcWriter: linkedClients[icTx.srcChainId],\n            dataHash: transactionId\n        });\n\n        (uint256 requiredResponses, uint256 optimisticTimePeriod, address[] memory approvedDstModules) =\n            _getAppConfig(TypeCasts.bytes32ToAddress(icTx.dstReceiver));\n\n        uint256[] memory approvedResponses = _getApprovedResponses(approvedDstModules, icEntry);\n\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedResponses, optimisticTimePeriod);\n        require(finalizedResponses \u003e= requiredResponses, \"Not enough valid responses to meet the threshold\");\n        return true;\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedResponses An array of timestamps when each approved response was recorded.\n     * @param optimisticTimePeriod The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        uint256[] memory approvedResponses,\n        uint256 optimisticTimePeriod\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 finalizedResponses = 0;\n        for (uint256 i = 0; i \u003c approvedResponses.length; i++) {\n            if (approvedResponses[i] + optimisticTimePeriod \u003c= block.timestamp) {\n                finalizedResponses++;\n            }\n        }\n        return finalizedResponses;\n    }\n    /**\n     * @dev Retrieves the responses from approved modules for a given InterchainEntry.\n     * This function iterates over all approved modules, querying the InterchainDB for each module's response\n     * to the provided InterchainEntry. It compiles these responses into an array of uint256, where each\n     * element represents the timestamp of a module's response.\n     *\n     * @param approvedModules An array of addresses representing the approved modules that can write responses.\n     * @param icEntry The InterchainEntry for which responses are being retrieved.\n     * @return approvedResponses An array of uint256 representing the timestamps of responses from approved modules.\n     */\n\n    function _getApprovedResponses(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry\n    )\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory approvedResponses = new uint256[](approvedModules.length);\n        for (uint256 i = 0; i \u003c approvedModules.length; i++) {\n            approvedResponses[i] = IInterchainDB(interchainDB).readEntry(approvedModules[i], icEntry);\n        }\n        return approvedResponses;\n    }\n\n    function encodeTransaction(InterchainTransaction memory icTx) public view returns (bytes memory) {\n        return abi.encode(icTx);\n    }\n\n    function decodeOptions(bytes memory encodedOptions) public view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // TODO: Gas Fee Consideration that is paid to executor\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(uint256 gasLimit, bytes calldata transaction) external payable {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = icTx.transactionId();\n        require(_isExecutable(transactionId, icTx), \"Transaction is not executable\");\n        executedTransactions[transactionId] = true;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            nonce: icTx.nonce,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"14283:280:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;14283:280:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"14283:280:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"TypeCasts\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xffcafefde1fa1648767475d006a3306c36e48822eb6941d0af1c942f88f6a794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf4b37d8150a98884a63b8364fbab9b6941d211997db006ab28e1d363c2316\",\"dweb:/ipfs/QmYtAiBhfitPP5AZHnSynqibqbfYadMSA5jUxDUNVSRFp1\"]}},\"version\":1}"},"hashes":{}}}