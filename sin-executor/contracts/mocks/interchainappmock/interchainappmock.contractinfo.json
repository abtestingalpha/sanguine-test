{"solidity/InterchainAppMock.sol:AppConfigLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200142d42fccb109a3d975169ccdb6375a4d1fb7c05b92cf0bd7e217f1903fd2df64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200142d42fccb109a3d975169ccdb6375a4d1fb7c05b92cf0bd7e217f1903fd2df64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// test/mocks/InterchainAppMock.sol\n\ncontract InterchainAppMock is IInterchainApp {\n    address[] public receivingModules;\n\n    function setReceivingModule(address _receivingModule) public {\n        receivingModules.push(_receivingModule);\n    }\n\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory _receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external\n        virtual\n        override\n    {}\n\n    function getLinkedIApp(uint64 chainID) external view virtual override returns (address) {}\n\n    function getSendingModules() external view virtual override returns (address[] memory) {}\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules) {}\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable virtual override {}\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"1065:2072:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1065:2072:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"1065:2072:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"AppConfigLib__IncorrectVersion","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"AppConfigLib__IncorrectVersion\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainAppMock.sol\":\"AppConfigLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainAppMock.sol\":{\"keccak256\":\"0x80364fe35b0e3dd44758d81408d706bcb84bcb82113864d0fc8e489db4a5f34c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e78751421d27de8ac35215891104353598ab6aec7de40531228b67f1ac6af343\",\"dweb:/ipfs/QmNTW5dKG3PrJ8Ev3DGhddiMtUugHUFL13NgAc8vimgDuT\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainAppMock.sol:IInterchainApp":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// test/mocks/InterchainAppMock.sol\n\ncontract InterchainAppMock is IInterchainApp {\n    address[] public receivingModules;\n\n    function setReceivingModule(address _receivingModule) public {\n        receivingModules.push(_receivingModule);\n    }\n\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory _receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external\n        virtual\n        override\n    {}\n\n    function getLinkedIApp(uint64 chainID) external view virtual override returns (address) {}\n\n    function getSendingModules() external view virtual override returns (address[] memory) {}\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules) {}\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable virtual override {}\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"appReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainID","type":"uint64"}],"name":"getLinkedIApp","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReceivingConfig","outputs":[{"internalType":"bytes","name":"appConfig","type":"bytes"},{"internalType":"address[]","name":"modules","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSendingModules","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"send","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"chainIDs","type":"uint64[]"},{"internalType":"address[]","name":"linkedIApps","type":"address[]"},{"internalType":"address[]","name":"sendingModules","type":"address[]"},{"internalType":"address[]","name":"receivingModules","type":"address[]"},{"internalType":"uint256","name":"requiredResponses","type":"uint256"},{"internalType":"uint64","name":"optimisticTimePeriod","type":"uint64"}],"name":"setAppConfig","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"appReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainID\",\"type\":\"uint64\"}],\"name\":\"getLinkedIApp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceivingConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"appConfig\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSendingModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"chainIDs\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"linkedIApps\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sendingModules\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivingModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"requiredResponses\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"optimisticTimePeriod\",\"type\":\"uint64\"}],\"name\":\"setAppConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainAppMock.sol\":\"IInterchainApp\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainAppMock.sol\":{\"keccak256\":\"0x80364fe35b0e3dd44758d81408d706bcb84bcb82113864d0fc8e489db4a5f34c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e78751421d27de8ac35215891104353598ab6aec7de40531228b67f1ac6af343\",\"dweb:/ipfs/QmNTW5dKG3PrJ8Ev3DGhddiMtUugHUFL13NgAc8vimgDuT\"]}},\"version\":1}"},"hashes":{"appReceive(uint256,bytes32,uint64,bytes)":"d1eb8bde","getLinkedIApp(uint64)":"bfc849ee","getReceivingConfig()":"287bc057","getSendingModules()":"ea13398f","send(bytes32,uint256,bytes)":"e1ef3b3f","setAppConfig(uint64[],address[],address[],address[],uint256,uint64)":"dd34f56a"}},"solidity/InterchainAppMock.sol:InterchainAppMock":{"code":"0x608060405234801561001057600080fd5b50610731806100206000396000f3fe60806040526004361061007b5760003560e01c8063dd34f56a1161004e578063dd34f56a14610193578063e079da63146101b6578063e1ef3b3f146101d6578063ea13398f146101ea57600080fd5b8063287bc0571461008057806392c2f0c3146100a7578063bfc849ee14610138578063d1eb8bde1461017e575b600080fd5b34801561008c57600080fd5b5060608060405161009e92919061028e565b60405180910390f35b3480156100b357600080fd5b506101366100c236600461033a565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b34801561014457600080fd5b50610159610153366004610374565b50600090565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009e565b61013661018c3660046103d8565b5050505050565b34801561019f57600080fd5b506101366101ae3660046105b6565b505050505050565b3480156101c257600080fd5b506101596101d136600461067c565b610206565b6101366101e4366004610695565b50505050565b3480156101f657600080fd5b50606060405161009e91906106e8565b6000818154811061021657600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600081518084526020808501945080840160005b8381101561028357815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610251565b509495945050505050565b604081526000835180604084015260005b818110156102bc576020818701810151606086840101520161029f565b506000606082850101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f820116830190506060838203016020840152610308606082018561023d565b95945050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461033557600080fd5b919050565b60006020828403121561034c57600080fd5b61035582610311565b9392505050565b803567ffffffffffffffff8116811461033557600080fd5b60006020828403121561038657600080fd5b6103558261035c565b60008083601f8401126103a157600080fd5b50813567ffffffffffffffff8111156103b957600080fd5b6020830191508360208285010111156103d157600080fd5b9250929050565b6000806000806000608086880312156103f057600080fd5b85359450602086013593506104076040870161035c565b9250606086013567ffffffffffffffff81111561042357600080fd5b61042f8882890161038f565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156104b6576104b6610440565b604052919050565b600067ffffffffffffffff8211156104d8576104d8610440565b5060051b60200190565b600082601f8301126104f357600080fd5b81356020610508610503836104be565b61046f565b82815260059290921b8401810191818101908684111561052757600080fd5b8286015b848110156105495761053c8161035c565b835291830191830161052b565b509695505050505050565b600082601f83011261056557600080fd5b81356020610575610503836104be565b82815260059290921b8401810191818101908684111561059457600080fd5b8286015b84811015610549576105a981610311565b8352918301918301610598565b60008060008060008060c087890312156105cf57600080fd5b863567ffffffffffffffff808211156105e757600080fd5b6105f38a838b016104e2565b9750602089013591508082111561060957600080fd5b6106158a838b01610554565b9650604089013591508082111561062b57600080fd5b6106378a838b01610554565b9550606089013591508082111561064d57600080fd5b5061065a89828a01610554565b9350506080870135915061067060a0880161035c565b90509295509295509295565b60006020828403121561068e57600080fd5b5035919050565b600080600080606085870312156106ab57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156106d057600080fd5b6106dc8782880161038f565b95989497509550505050565b602081526000610355602083018461023d56fea2646970667358221220c2dde84297266b9295de690effb1f6971f3ecd8430f5e1ac23c0b8e8d1b577f264736f6c63430008140033","runtime-code":"0x60806040526004361061007b5760003560e01c8063dd34f56a1161004e578063dd34f56a14610193578063e079da63146101b6578063e1ef3b3f146101d6578063ea13398f146101ea57600080fd5b8063287bc0571461008057806392c2f0c3146100a7578063bfc849ee14610138578063d1eb8bde1461017e575b600080fd5b34801561008c57600080fd5b5060608060405161009e92919061028e565b60405180910390f35b3480156100b357600080fd5b506101366100c236600461033a565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b34801561014457600080fd5b50610159610153366004610374565b50600090565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009e565b61013661018c3660046103d8565b5050505050565b34801561019f57600080fd5b506101366101ae3660046105b6565b505050505050565b3480156101c257600080fd5b506101596101d136600461067c565b610206565b6101366101e4366004610695565b50505050565b3480156101f657600080fd5b50606060405161009e91906106e8565b6000818154811061021657600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600081518084526020808501945080840160005b8381101561028357815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610251565b509495945050505050565b604081526000835180604084015260005b818110156102bc576020818701810151606086840101520161029f565b506000606082850101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f820116830190506060838203016020840152610308606082018561023d565b95945050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461033557600080fd5b919050565b60006020828403121561034c57600080fd5b61035582610311565b9392505050565b803567ffffffffffffffff8116811461033557600080fd5b60006020828403121561038657600080fd5b6103558261035c565b60008083601f8401126103a157600080fd5b50813567ffffffffffffffff8111156103b957600080fd5b6020830191508360208285010111156103d157600080fd5b9250929050565b6000806000806000608086880312156103f057600080fd5b85359450602086013593506104076040870161035c565b9250606086013567ffffffffffffffff81111561042357600080fd5b61042f8882890161038f565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156104b6576104b6610440565b604052919050565b600067ffffffffffffffff8211156104d8576104d8610440565b5060051b60200190565b600082601f8301126104f357600080fd5b81356020610508610503836104be565b61046f565b82815260059290921b8401810191818101908684111561052757600080fd5b8286015b848110156105495761053c8161035c565b835291830191830161052b565b509695505050505050565b600082601f83011261056557600080fd5b81356020610575610503836104be565b82815260059290921b8401810191818101908684111561059457600080fd5b8286015b84811015610549576105a981610311565b8352918301918301610598565b60008060008060008060c087890312156105cf57600080fd5b863567ffffffffffffffff808211156105e757600080fd5b6105f38a838b016104e2565b9750602089013591508082111561060957600080fd5b6106158a838b01610554565b9650604089013591508082111561062b57600080fd5b6106378a838b01610554565b9550606089013591508082111561064d57600080fd5b5061065a89828a01610554565b9350506080870135915061067060a0880161035c565b90509295509295509295565b60006020828403121561068e57600080fd5b5035919050565b600080600080606085870312156106ab57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156106d057600080fd5b6106dc8782880161038f565b95989497509550505050565b602081526000610355602083018461023d56fea2646970667358221220c2dde84297266b9295de690effb1f6971f3ecd8430f5e1ac23c0b8e8d1b577f264736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13;\n\n// contracts/interfaces/IInterchainApp.sol\n\ninterface IInterchainApp {\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external;\n\n    function getLinkedIApp(uint64 chainID) external view returns (address);\n\n    function getSendingModules() external view returns (address[] memory);\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable;\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable;\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// test/mocks/InterchainAppMock.sol\n\ncontract InterchainAppMock is IInterchainApp {\n    address[] public receivingModules;\n\n    function setReceivingModule(address _receivingModule) public {\n        receivingModules.push(_receivingModule);\n    }\n\n    function setAppConfig(\n        uint64[] memory chainIDs,\n        address[] memory linkedIApps,\n        address[] memory sendingModules,\n        address[] memory _receivingModules,\n        uint256 requiredResponses,\n        uint64 optimisticTimePeriod\n    )\n        external\n        virtual\n        override\n    {}\n\n    function getLinkedIApp(uint64 chainID) external view virtual override returns (address) {}\n\n    function getSendingModules() external view virtual override returns (address[] memory) {}\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules) {}\n\n    function send(bytes32 receiver, uint256 dstChainId, bytes calldata message) external payable virtual override {}\n\n    function appReceive(uint256 srcChainId, bytes32 sender, uint64 nonce, bytes calldata message) external payable {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"3176:1068:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"3176:1068:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3900:105;;;;;;;;;;-1:-1:-1;3953:22:0;;3900:105;;;;;;;:::i;:::-;;;;;;;;3267:117;;;;;;;;;;-1:-1:-1;3267:117:0;;;;;:::i;:::-;3338:16;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;3267:117;;;3709:90;;;;;;;;;;-1:-1:-1;3709:90:0;;;;;:::i;:::-;-1:-1:-1;3788:7:0;;3709:90;;;;2232:42:1;2220:55;;;2202:74;;2190:2;2175:18;3709:90:0;2056:226:1;4129:113:0;;;;;;:::i;:::-;;;;;;;3390:313;;;;;;;;;;-1:-1:-1;3390:313:0;;;;;:::i;:::-;;;;;;;;3227:33;;;;;;;;;;-1:-1:-1;3227:33:0;;;;;:::i;:::-;;:::i;4011:112::-;;;;;;:::i;:::-;;;;;;3805:89;;;;;;;;;;-1:-1:-1;3874:16:0;3805:89;;;;;;:::i;3227:33::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3227:33:0;:::o;14:484:1:-;67:3;105:5;99:12;132:6;127:3;120:19;158:4;187:2;182:3;178:12;171:19;;224:2;217:5;213:14;245:1;255:218;269:6;266:1;263:13;255:218;;;334:13;;349:42;330:62;318:75;;413:12;;;;448:15;;;;291:1;284:9;255:218;;;-1:-1:-1;489:3:1;;14:484;-1:-1:-1;;;;;14:484:1:o;503:791::-;728:2;717:9;710:21;691:4;760:6;754:13;803:6;798:2;787:9;783:18;776:34;828:1;838:144;852:6;849:1;846:13;838:144;;;965:4;949:14;;;945:25;;939:32;934:2;915:17;;;911:26;904:68;867:12;838:144;;;842:3;1031:1;1026:2;1017:6;1006:9;1002:22;998:31;991:42;1088:66;1083:2;1075:6;1071:15;1067:88;1056:9;1052:104;1042:114;;1218:2;1206:9;1202:2;1198:18;1194:27;1187:4;1176:9;1172:20;1165:57;1239:49;1284:2;1280;1276:11;1268:6;1239:49;:::i;:::-;1231:57;503:791;-1:-1:-1;;;;;503:791:1:o;1299:196::-;1367:20;;1427:42;1416:54;;1406:65;;1396:93;;1485:1;1482;1475:12;1396:93;1299:196;;;:::o;1500:186::-;1559:6;1612:2;1600:9;1591:7;1587:23;1583:32;1580:52;;;1628:1;1625;1618:12;1580:52;1651:29;1670:9;1651:29;:::i;:::-;1641:39;1500:186;-1:-1:-1;;;1500:186:1:o;1691:171::-;1758:20;;1818:18;1807:30;;1797:41;;1787:69;;1852:1;1849;1842:12;1867:184;1925:6;1978:2;1966:9;1957:7;1953:23;1949:32;1946:52;;;1994:1;1991;1984:12;1946:52;2017:28;2035:9;2017:28;:::i;2287:347::-;2338:8;2348:6;2402:3;2395:4;2387:6;2383:17;2379:27;2369:55;;2420:1;2417;2410:12;2369:55;-1:-1:-1;2443:20:1;;2486:18;2475:30;;2472:50;;;2518:1;2515;2508:12;2472:50;2555:4;2547:6;2543:17;2531:29;;2607:3;2600:4;2591:6;2583;2579:19;2575:30;2572:39;2569:59;;;2624:1;2621;2614:12;2569:59;2287:347;;;;;:::o;2639:618::-;2735:6;2743;2751;2759;2767;2820:3;2808:9;2799:7;2795:23;2791:33;2788:53;;;2837:1;2834;2827:12;2788:53;2873:9;2860:23;2850:33;;2930:2;2919:9;2915:18;2902:32;2892:42;;2953:37;2986:2;2975:9;2971:18;2953:37;:::i;:::-;2943:47;;3041:2;3030:9;3026:18;3013:32;3068:18;3060:6;3057:30;3054:50;;;3100:1;3097;3090:12;3054:50;3139:58;3189:7;3180:6;3169:9;3165:22;3139:58;:::i;:::-;2639:618;;;;-1:-1:-1;2639:618:1;;-1:-1:-1;3216:8:1;;3113:84;2639:618;-1:-1:-1;;;2639:618:1:o;3262:184::-;3314:77;3311:1;3304:88;3411:4;3408:1;3401:15;3435:4;3432:1;3425:15;3451:334;3522:2;3516:9;3578:2;3568:13;;3583:66;3564:86;3552:99;;3681:18;3666:34;;3702:22;;;3663:62;3660:88;;;3728:18;;:::i;:::-;3764:2;3757:22;3451:334;;-1:-1:-1;3451:334:1:o;3790:182::-;3849:4;3882:18;3874:6;3871:30;3868:56;;;3904:18;;:::i;:::-;-1:-1:-1;3949:1:1;3945:14;3961:4;3941:25;;3790:182::o;3977:665::-;4030:5;4083:3;4076:4;4068:6;4064:17;4060:27;4050:55;;4101:1;4098;4091:12;4050:55;4137:6;4124:20;4163:4;4187:59;4203:42;4242:2;4203:42;:::i;:::-;4187:59;:::i;:::-;4280:15;;;4366:1;4362:10;;;;4350:23;;4346:32;;;4311:12;;;;4390:15;;;4387:35;;;4418:1;4415;4408:12;4387:35;4454:2;4446:6;4442:15;4466:147;4482:6;4477:3;4474:15;4466:147;;;4548:22;4566:3;4548:22;:::i;:::-;4536:35;;4591:12;;;;4499;;4466:147;;;-1:-1:-1;4631:5:1;3977:665;-1:-1:-1;;;;;;3977:665:1:o;4647:667::-;4701:5;4754:3;4747:4;4739:6;4735:17;4731:27;4721:55;;4772:1;4769;4762:12;4721:55;4808:6;4795:20;4834:4;4858:59;4874:42;4913:2;4874:42;:::i;4858:59::-;4951:15;;;5037:1;5033:10;;;;5021:23;;5017:32;;;4982:12;;;;5061:15;;;5058:35;;;5089:1;5086;5079:12;5058:35;5125:2;5117:6;5113:15;5137:148;5153:6;5148:3;5145:15;5137:148;;;5219:23;5238:3;5219:23;:::i;:::-;5207:36;;5263:12;;;;5170;;5137:148;;5319:1188;5521:6;5529;5537;5545;5553;5561;5614:3;5602:9;5593:7;5589:23;5585:33;5582:53;;;5631:1;5628;5621:12;5582:53;5671:9;5658:23;5700:18;5741:2;5733:6;5730:14;5727:34;;;5757:1;5754;5747:12;5727:34;5780:60;5832:7;5823:6;5812:9;5808:22;5780:60;:::i;:::-;5770:70;;5893:2;5882:9;5878:18;5865:32;5849:48;;5922:2;5912:8;5909:16;5906:36;;;5938:1;5935;5928:12;5906:36;5961:63;6016:7;6005:8;5994:9;5990:24;5961:63;:::i;:::-;5951:73;;6077:2;6066:9;6062:18;6049:32;6033:48;;6106:2;6096:8;6093:16;6090:36;;;6122:1;6119;6112:12;6090:36;6145:63;6200:7;6189:8;6178:9;6174:24;6145:63;:::i;:::-;6135:73;;6261:2;6250:9;6246:18;6233:32;6217:48;;6290:2;6280:8;6277:16;6274:36;;;6306:1;6303;6296:12;6274:36;;6329:63;6384:7;6373:8;6362:9;6358:24;6329:63;:::i;:::-;6319:73;;;6439:3;6428:9;6424:19;6411:33;6401:43;;6463:38;6496:3;6485:9;6481:19;6463:38;:::i;:::-;6453:48;;5319:1188;;;;;;;;:::o;6512:180::-;6571:6;6624:2;6612:9;6603:7;6599:23;6595:32;6592:52;;;6640:1;6637;6630:12;6592:52;-1:-1:-1;6663:23:1;;6512:180;-1:-1:-1;6512:180:1:o;6697:545::-;6785:6;6793;6801;6809;6862:2;6850:9;6841:7;6837:23;6833:32;6830:52;;;6878:1;6875;6868:12;6830:52;6914:9;6901:23;6891:33;;6971:2;6960:9;6956:18;6943:32;6933:42;;7026:2;7015:9;7011:18;6998:32;7053:18;7045:6;7042:30;7039:50;;;7085:1;7082;7075:12;7039:50;7124:58;7174:7;7165:6;7154:9;7150:22;7124:58;:::i;:::-;6697:545;;;;-1:-1:-1;7201:8:1;-1:-1:-1;;;;6697:545:1:o;7247:261::-;7426:2;7415:9;7408:21;7389:4;7446:56;7498:2;7487:9;7483:18;7475:6;7446:56;:::i","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"appReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainID","type":"uint64"}],"name":"getLinkedIApp","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReceivingConfig","outputs":[{"internalType":"bytes","name":"appConfig","type":"bytes"},{"internalType":"address[]","name":"modules","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSendingModules","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"receivingModules","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"send","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"chainIDs","type":"uint64[]"},{"internalType":"address[]","name":"linkedIApps","type":"address[]"},{"internalType":"address[]","name":"sendingModules","type":"address[]"},{"internalType":"address[]","name":"_receivingModules","type":"address[]"},{"internalType":"uint256","name":"requiredResponses","type":"uint256"},{"internalType":"uint64","name":"optimisticTimePeriod","type":"uint64"}],"name":"setAppConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_receivingModule","type":"address"}],"name":"setReceivingModule","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"appReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainID\",\"type\":\"uint64\"}],\"name\":\"getLinkedIApp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceivingConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"appConfig\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSendingModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receivingModules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"chainIDs\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"linkedIApps\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sendingModules\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_receivingModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"requiredResponses\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"optimisticTimePeriod\",\"type\":\"uint64\"}],\"name\":\"setAppConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receivingModule\",\"type\":\"address\"}],\"name\":\"setReceivingModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainAppMock.sol\":\"InterchainAppMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainAppMock.sol\":{\"keccak256\":\"0x80364fe35b0e3dd44758d81408d706bcb84bcb82113864d0fc8e489db4a5f34c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e78751421d27de8ac35215891104353598ab6aec7de40531228b67f1ac6af343\",\"dweb:/ipfs/QmNTW5dKG3PrJ8Ev3DGhddiMtUugHUFL13NgAc8vimgDuT\"]}},\"version\":1}"},"hashes":{"appReceive(uint256,bytes32,uint64,bytes)":"d1eb8bde","getLinkedIApp(uint64)":"bfc849ee","getReceivingConfig()":"287bc057","getSendingModules()":"ea13398f","receivingModules(uint256)":"e079da63","send(bytes32,uint256,bytes)":"e1ef3b3f","setAppConfig(uint64[],address[],address[],address[],uint256,uint64)":"dd34f56a","setReceivingModule(address)":"92c2f0c3"}}}