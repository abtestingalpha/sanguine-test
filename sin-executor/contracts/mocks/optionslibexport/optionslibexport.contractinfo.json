{"solidity/OptionsLibExport.sol:OptionsLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e6943f05b73c8f27239df323e38bba9c6e3444b4454525632bf204bc75a2320364736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e6943f05b73c8f27239df323e38bba9c6e3444b4454525632bf204bc75a2320364736f6c63430008140033","info":{"source":"pragma solidity =0.8.20 ^0.8.0;\n\n// contracts/libs/Options.sol\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    /// @dev Struct to hold V1 of options data.\n    /// @param version The version of the options.\n    /// @param gasLimit The gas limit for the transaction.\n    /// @param gasAirdrop The amount of gas to airdrop.\n    struct Options {\n        uint8 version;\n        uint256 gasLimit;\n        // uint256 msgValue;\n        uint256 gasAirdrop;\n    }\n\n    /// @notice Encodes options into a bytes format.\n    /// @param options The Options to encode.\n    /// @return The encoded options as bytes.\n    function encodeOptions(Options memory options) internal pure returns (bytes memory) {\n        return abi.encode(options.version, options.gasLimit, options.gasAirdrop);\n    }\n\n    /// @notice Decodes options from a bytes format back into an Options struct.\n    /// @param data The options data in bytes format.\n    /// @return The decoded options as an Options struct.\n    function decodeOptions(bytes memory data) internal pure returns (Options memory) {\n        (uint8 version, uint256 gasLimit, uint256 gasAirdrop) = abi.decode(data, (uint8, uint256, uint256));\n        return Options(version, gasLimit, gasAirdrop);\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/mocks/OptionsLibExport.sol\n\ncontract OptionsLibMocks {\n    function encodeOptions(OptionsLib.Options memory options) public view returns (bytes memory) {\n        return OptionsLib.encodeOptions(options);\n    }\n\n    function decodeOptions(bytes memory data) public view returns (OptionsLib.Options memory) {\n        return OptionsLib.decodeOptions(data);\n    }\n\n    function addressToBytes32(address convertable) public view returns (bytes32) {\n        return TypeCasts.addressToBytes32(convertable);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"185:1144:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;185:1144:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"185:1144:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"notice":"A library for encoding and decoding Interchain options related to interchain messages.","version":1},"developerDoc":{"kind":"dev","methods":{},"title":"OptionsLib","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"OptionsLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for encoding and decoding Interchain options related to interchain messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/OptionsLibExport.sol\":\"OptionsLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/OptionsLibExport.sol\":{\"keccak256\":\"0xa02be239341cdc9b2c89ce045cf05c209859e5754cf28db928d20e630f80fe72\",\"urls\":[\"bzz-raw://dd84568d93ac80997f135c0c72c22271973cdf38238e6bd0d6a1c9d9341440ef\",\"dweb:/ipfs/QmXrY9GfCrQX7mVvqTNrYe6TxW2FMEghsoMRGpVhiJoUik\"]}},\"version\":1}"},"hashes":{}},"solidity/OptionsLibExport.sol:OptionsLibMocks":{"code":"0x608060405234801561001057600080fd5b50610442806100206000396000f3fe608060405234801561001057600080fd5b50600436106100405760003560e01c80622baf7e1461004557806382c947b71461006e578063d5e788a01461008f575b600080fd5b6100586100533660046101fb565b6100c7565b604051610065919061025d565b60405180910390f35b61008161007c3660046102c9565b61010b565b604051908152602001610065565b6100a261009d366004610306565b610129565b60408051825160ff168152602080840151908201529181015190820152606001610065565b8051602080830151604080850151815160ff909516938501939093528381019190915260608381019290925280518084038301815260809093019052905b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8216610105565b6101506040518060600160405280600060ff16815260200160008152602001600081525090565b6101058261017b6040518060600160405280600060ff16815260200160008152602001600081525090565b60008060008480602001905181019061019491906103d5565b6040805160608101825260ff909416845260208401929092529082015295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60ff811681146101f857600080fd5b50565b60006060828403121561020d57600080fd5b6040516060810181811067ffffffffffffffff82111715610230576102306101ba565b604052823561023e816101e9565b8152602083810135908201526040928301359281019290925250919050565b600060208083528351808285015260005b8181101561028a5785810183015185820160400152820161026e565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156102db57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146102ff57600080fd5b9392505050565b60006020828403121561031857600080fd5b813567ffffffffffffffff8082111561033057600080fd5b818401915084601f83011261034457600080fd5b813581811115610356576103566101ba565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561039c5761039c6101ba565b816040528281528760208487010111156103b557600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806000606084860312156103ea57600080fd5b83516103f5816101e9565b60208501516040909501519096949550939250505056fea26469706673582212207ee0fe8bc4fae08f7e5efdb9b1d785a034c7d7f6292a5c9c97f4a7ce4111132664736f6c63430008140033","runtime-code":"0x608060405234801561001057600080fd5b50600436106100405760003560e01c80622baf7e1461004557806382c947b71461006e578063d5e788a01461008f575b600080fd5b6100586100533660046101fb565b6100c7565b604051610065919061025d565b60405180910390f35b61008161007c3660046102c9565b61010b565b604051908152602001610065565b6100a261009d366004610306565b610129565b60408051825160ff168152602080840151908201529181015190820152606001610065565b8051602080830151604080850151815160ff909516938501939093528381019190915260608381019290925280518084038301815260809093019052905b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8216610105565b6101506040518060600160405280600060ff16815260200160008152602001600081525090565b6101058261017b6040518060600160405280600060ff16815260200160008152602001600081525090565b60008060008480602001905181019061019491906103d5565b6040805160608101825260ff909416845260208401929092529082015295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60ff811681146101f857600080fd5b50565b60006060828403121561020d57600080fd5b6040516060810181811067ffffffffffffffff82111715610230576102306101ba565b604052823561023e816101e9565b8152602083810135908201526040928301359281019290925250919050565b600060208083528351808285015260005b8181101561028a5785810183015185820160400152820161026e565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156102db57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146102ff57600080fd5b9392505050565b60006020828403121561031857600080fd5b813567ffffffffffffffff8082111561033057600080fd5b818401915084601f83011261034457600080fd5b813581811115610356576103566101ba565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561039c5761039c6101ba565b816040528281528760208487010111156103b557600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806000606084860312156103ea57600080fd5b83516103f5816101e9565b60208501516040909501519096949550939250505056fea26469706673582212207ee0fe8bc4fae08f7e5efdb9b1d785a034c7d7f6292a5c9c97f4a7ce4111132664736f6c63430008140033","info":{"source":"pragma solidity =0.8.20 ^0.8.0;\n\n// contracts/libs/Options.sol\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    /// @dev Struct to hold V1 of options data.\n    /// @param version The version of the options.\n    /// @param gasLimit The gas limit for the transaction.\n    /// @param gasAirdrop The amount of gas to airdrop.\n    struct Options {\n        uint8 version;\n        uint256 gasLimit;\n        // uint256 msgValue;\n        uint256 gasAirdrop;\n    }\n\n    /// @notice Encodes options into a bytes format.\n    /// @param options The Options to encode.\n    /// @return The encoded options as bytes.\n    function encodeOptions(Options memory options) internal pure returns (bytes memory) {\n        return abi.encode(options.version, options.gasLimit, options.gasAirdrop);\n    }\n\n    /// @notice Decodes options from a bytes format back into an Options struct.\n    /// @param data The options data in bytes format.\n    /// @return The decoded options as an Options struct.\n    function decodeOptions(bytes memory data) internal pure returns (Options memory) {\n        (uint8 version, uint256 gasLimit, uint256 gasAirdrop) = abi.decode(data, (uint8, uint256, uint256));\n        return Options(version, gasLimit, gasAirdrop);\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/mocks/OptionsLibExport.sol\n\ncontract OptionsLibMocks {\n    function encodeOptions(OptionsLib.Options memory options) public view returns (bytes memory) {\n        return OptionsLib.encodeOptions(options);\n    }\n\n    function decodeOptions(bytes memory data) public view returns (OptionsLib.Options memory) {\n        return OptionsLib.decodeOptions(data);\n    }\n\n    function addressToBytes32(address convertable) public view returns (bytes32) {\n        return TypeCasts.addressToBytes32(convertable);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"1687:479:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"1687:479:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1718:150;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2024:140;;;;;;:::i;:::-;;:::i;:::-;;;2030:25:1;;;2018:2;2003:18;2024:140:0;1884:177:1;1874:144:0;;;;;;:::i;:::-;;:::i;:::-;;;;3265:13:1;;3280:4;3261:24;3243:43;;3342:4;3330:17;;;3324:24;3302:20;;;3295:54;3393:17;;;3387:24;3365:20;;;3358:54;3231:2;3216:18;1874:144:0;3051:367:1;1718:150:0;815:15;;832:16;;;;;850:18;;;;;804:65;;3651:4:1;3639:17;;;804:65:0;;;3621:36:1;;;;3673:18;;;3666:34;;;;1797:12:0;3716:18:1;;;3709:34;;;;804:65:0;;;;;;;;;3594:18:1;;;;804:65:0;;1797:12;1828:33;1821:40;1718:150;-1:-1:-1;;1718:150:0:o;2024:140::-;2092:7;1485:22;;;2118:39;1388:127;1874:144;1937:25;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;1937:25:0;1981:30;2006:4;1140:14;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;1140:14:0;1167:13;1182:16;1200:18;1233:4;1222:43;;;;;;;;;;;;:::i;:::-;1282:38;;;;;;;;;;;;;;;;;;;;;;;;;;1075:252;-1:-1:-1;;;;;1075:252:0:o;14:184:1:-;66:77;63:1;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:114;287:4;280:5;276:16;269:5;266:27;256:55;;307:1;304;297:12;256:55;203:114;:::o;322:633::-;404:6;457:2;445:9;436:7;432:23;428:32;425:52;;;473:1;470;463:12;425:52;506:2;500:9;548:2;540:6;536:15;617:6;605:10;602:22;581:18;569:10;566:34;563:62;560:88;;;628:18;;:::i;:::-;664:2;657:22;701:23;;733:29;701:23;733:29;:::i;:::-;771:21;;853:2;838:18;;;825:32;808:15;;;801:57;919:2;904:18;;;891:32;874:15;;;867:57;;;;-1:-1:-1;778:6:1;322:633;-1:-1:-1;322:633:1:o;960:605::-;1070:4;1099:2;1128;1117:9;1110:21;1160:6;1154:13;1203:6;1198:2;1187:9;1183:18;1176:34;1228:1;1238:140;1252:6;1249:1;1246:13;1238:140;;;1347:14;;;1343:23;;1337:30;1313:17;;;1332:2;1309:26;1302:66;1267:10;;1238:140;;;1242:3;1427:1;1422:2;1413:6;1402:9;1398:22;1394:31;1387:42;1556:2;1486:66;1481:2;1473:6;1469:15;1465:88;1454:9;1450:104;1446:113;1438:121;;;;960:605;;;;:::o;1570:309::-;1629:6;1682:2;1670:9;1661:7;1657:23;1653:32;1650:52;;;1698:1;1695;1688:12;1650:52;1737:9;1724:23;1787:42;1780:5;1776:54;1769:5;1766:65;1756:93;;1845:1;1842;1835:12;1756:93;1868:5;1570:309;-1:-1:-1;;;1570:309:1:o;2066:980::-;2134:6;2187:2;2175:9;2166:7;2162:23;2158:32;2155:52;;;2203:1;2200;2193:12;2155:52;2243:9;2230:23;2272:18;2313:2;2305:6;2302:14;2299:34;;;2329:1;2326;2319:12;2299:34;2367:6;2356:9;2352:22;2342:32;;2412:7;2405:4;2401:2;2397:13;2393:27;2383:55;;2434:1;2431;2424:12;2383:55;2470:2;2457:16;2492:2;2488;2485:10;2482:36;;;2498:18;;:::i;:::-;2632:2;2626:9;2694:4;2686:13;;2537:66;2682:22;;;2706:2;2678:31;2674:40;2662:53;;;2730:18;;;2750:22;;;2727:46;2724:72;;;2776:18;;:::i;:::-;2816:10;2812:2;2805:22;2851:2;2843:6;2836:18;2891:7;2886:2;2881;2877;2873:11;2869:20;2866:33;2863:53;;;2912:1;2909;2902:12;2863:53;2968:2;2963;2959;2955:11;2950:2;2942:6;2938:15;2925:46;3013:1;2991:15;;;3008:2;2987:24;2980:35;;;;-1:-1:-1;2995:6:1;2066:980;-1:-1:-1;;;;;2066:980:1:o;3754:369::-;3840:6;3848;3856;3909:2;3897:9;3888:7;3884:23;3880:32;3877:52;;;3925:1;3922;3915:12;3877:52;3957:9;3951:16;3976:29;3999:5;3976:29;:::i;:::-;4069:2;4054:18;;4048:25;4113:2;4098:18;;;4092:25;4024:5;;4048:25;;-1:-1:-1;4092:25:1;3754:369;-1:-1:-1;;;3754:369:1:o","abiDefinition":[{"inputs":[{"internalType":"address","name":"convertable","type":"address"}],"name":"addressToBytes32","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeOptions","outputs":[{"components":[{"internalType":"uint8","name":"version","type":"uint8"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"gasAirdrop","type":"uint256"}],"internalType":"struct OptionsLib.Options","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint8","name":"version","type":"uint8"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"gasAirdrop","type":"uint256"}],"internalType":"struct OptionsLib.Options","name":"options","type":"tuple"}],"name":"encodeOptions","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"convertable\",\"type\":\"address\"}],\"name\":\"addressToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAirdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionsLib.Options\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAirdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionsLib.Options\",\"name\":\"options\",\"type\":\"tuple\"}],\"name\":\"encodeOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/OptionsLibExport.sol\":\"OptionsLibMocks\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/OptionsLibExport.sol\":{\"keccak256\":\"0xa02be239341cdc9b2c89ce045cf05c209859e5754cf28db928d20e630f80fe72\",\"urls\":[\"bzz-raw://dd84568d93ac80997f135c0c72c22271973cdf38238e6bd0d6a1c9d9341440ef\",\"dweb:/ipfs/QmXrY9GfCrQX7mVvqTNrYe6TxW2FMEghsoMRGpVhiJoUik\"]}},\"version\":1}"},"hashes":{"addressToBytes32(address)":"82c947b7","decodeOptions(bytes)":"d5e788a0","encodeOptions((uint8,uint256,uint256))":"002baf7e"}},"solidity/OptionsLibExport.sol:TypeCasts":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220649cac46061c386adbb185ba88ea5bfb50373e11c48753f96247be5c4fe58cb764736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220649cac46061c386adbb185ba88ea5bfb50373e11c48753f96247be5c4fe58cb764736f6c63430008140033","info":{"source":"pragma solidity =0.8.20 ^0.8.0;\n\n// contracts/libs/Options.sol\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    /// @dev Struct to hold V1 of options data.\n    /// @param version The version of the options.\n    /// @param gasLimit The gas limit for the transaction.\n    /// @param gasAirdrop The amount of gas to airdrop.\n    struct Options {\n        uint8 version;\n        uint256 gasLimit;\n        // uint256 msgValue;\n        uint256 gasAirdrop;\n    }\n\n    /// @notice Encodes options into a bytes format.\n    /// @param options The Options to encode.\n    /// @return The encoded options as bytes.\n    function encodeOptions(Options memory options) internal pure returns (bytes memory) {\n        return abi.encode(options.version, options.gasLimit, options.gasAirdrop);\n    }\n\n    /// @notice Decodes options from a bytes format back into an Options struct.\n    /// @param data The options data in bytes format.\n    /// @return The decoded options as an Options struct.\n    function decodeOptions(bytes memory data) internal pure returns (Options memory) {\n        (uint8 version, uint256 gasLimit, uint256 gasAirdrop) = abi.decode(data, (uint8, uint256, uint256));\n        return Options(version, gasLimit, gasAirdrop);\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/mocks/OptionsLibExport.sol\n\ncontract OptionsLibMocks {\n    function encodeOptions(OptionsLib.Options memory options) public view returns (bytes memory) {\n        return OptionsLib.encodeOptions(options);\n    }\n\n    function decodeOptions(bytes memory data) public view returns (OptionsLib.Options memory) {\n        return OptionsLib.decodeOptions(data);\n    }\n\n    function addressToBytes32(address convertable) public view returns (bytes32) {\n        return TypeCasts.addressToBytes32(convertable);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"1364:280:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1364:280:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"1364:280:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/OptionsLibExport.sol\":\"TypeCasts\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/OptionsLibExport.sol\":{\"keccak256\":\"0xa02be239341cdc9b2c89ce045cf05c209859e5754cf28db928d20e630f80fe72\",\"urls\":[\"bzz-raw://dd84568d93ac80997f135c0c72c22271973cdf38238e6bd0d6a1c9d9341440ef\",\"dweb:/ipfs/QmXrY9GfCrQX7mVvqTNrYe6TxW2FMEghsoMRGpVhiJoUik\"]}},\"version\":1}"},"hashes":{}}}